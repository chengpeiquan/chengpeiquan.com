{
  "title": "Vue 3.0图片裁切插件：vue-picture-cropper",
  "desc": "开始玩Vue 3.0之后发现生态上要啥没啥，所以自己弄了一个，基于cropper.js，支持Vue 3.0的图片裁切工具组件，支持在Vue组件里按需引入，模板和实例也仅限在组件内使用，根据Vue 3.x的设计思想，官方也不推荐全局导入各类插件。",
  "keywords": "vue picture cropper,vue 3.0 cropper,vue 3.0 图片裁切",
  "date": "2020-11-16 08:12:00",
  "cover": "http://cdn.chengpeiquan.com/img/2020/12/1.jpg?x-oss-process=image/interlace,1",
  "categories": [
    "tech"
  ],
  "repo": "https://github.com/chengpeiquan/vue-picture-cropper",
  "id": "vue-picture-cropper",
  "type": "article",
  "author": {
    "name": "chengpeiquan",
    "email": "chengpeiquan@chengpeiquan.com",
    "link": "https://chengpeiquan.com"
  },
  "shortDate": "2020-11-16",
  "content": "<p>[[toc]]</p>\n<p>一个基于 cropper.js ，支持 Vue 3.0 的图片裁切工具组件（目前仅支持 Vue 3.x ）。</p>\n<p>对 Vue 3.0 还不熟悉的同学，可以查阅我之前总结的文档 <a href=\"https://vue3.chengpeiquan.com/\">《Vue3.0学习教程与实战案例》</a></p>\n<p>GitHub： <a href=\"https://github.com/chengpeiquan/vue-picture-cropper\">https://github.com/chengpeiquan/vue-picture-cropper</a></p>\n<p>NPM： <a href=\"https://www.npmjs.com/package/vue-picture-cropper\">https://www.npmjs.com/package/vue-picture-cropper</a></p>\n<h2>demo</h2>\n<p>根据平时常见的使用习惯，弄了一个简单的在线 DEMO ，点击按钮选择图片后，弹出裁切框，裁切后生成裁切结果。</p>\n<p>点击查看：<a href=\"https://chengpeiquan.github.io/vue-picture-cropper-demo/\">vue-picture-cropper-demo</a></p>\n<p><img src=\"https://chengpeiquan.github.io/vue-picture-cropper-demo/static/img/preview.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"vue-picture-cropper-demo\"></p>\n<h2>安装</h2>\n<pre><code>npm install --save-dev vue-picture-cropper\n</code></pre>\n<h2>导入</h2>\n<p>目前仅支持在 Vue 组件里按需引入，模板和实例也仅限在组件内使用，根据 Vue 3.x 的设计思想，官方也不推荐全局导入各类插件。</p>\n<pre><code class=\"language-js\">// xxx.vue\nimport VuePictureCropper, { cropper } from 'vue-picture-cropper'\n</code></pre>\n<p>需要注意的是，如果是基于 <a href=\"https://vitejs.dev/\">Vite</a> 的项目，由于 Vite 需要使用 ESM 组件，所以导入方式需要改成从 <code>ESM</code> 版本导入：</p>\n<pre><code class=\"language-js\">// xxx.vue（注意 from 后面的路径不同）\nimport VuePictureCropper, { cropper } from 'vue-picture-cropper/dist/esm'\n</code></pre>\n<p>导入的模块说明：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模块名称</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">VuePictureCropper</td>\n<td style=\"text-align:left\">组件的模板，用于挂载和渲染，可自定义命名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cropper</td>\n<td style=\"text-align:left\">工具实例，可用于操作相关的api，必须用花括号导入该名称</td>\n</tr>\n</tbody>\n</table>\n<p>对 Vue 3.x 还不熟悉的同学，请看下方的用法示范。</p>\n<h2>用法</h2>\n<p>工具的渲染方法如下，请注意在 Vue 3.x 里，除非你使用 class 风格来编写组件，否则组件都需要通过 <code>defineComponent</code> 来定义。</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;vue-picture-cropper\n    :boxStyle=&quot;{\n      width: '100%',\n      height: '100%',\n      backgroundColor: '#f8f8f8',\n      margin: 'auto'\n    }&quot;\n    :img=&quot;pic&quot;\n    :options=&quot;{\n      viewMode: 1,\n      dragMode: 'crop',\n      aspectRatio: 16 / 9,\n      preview: preview,\n    }&quot;\n    @ready=&quot;ready&quot;\n  /&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport { defineComponent } from 'vue'\nimport VuePictureCropper, { cropper } from 'vue-picture-cropper'\n\nexport default defineComponent({\n  components: {\n    VuePictureCropper\n  },\n  // …\n})\n&lt;/script&gt;\n</code></pre>\n<p>上面是设定了一个裁剪区域，对于文件的选择/传入，以及裁切结果，请通过 <code>&lt;input type=&quot;file&quot; &gt;</code> 或 <code>button</code> 绑定实例的api来获取。</p>\n<p>可参考 DEMO 里面的用法：</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/chengpeiquan/vue-picture-cropper-demo/blob/main/src/views/composition.vue\">Vue 3.0 组合式 API 写法</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/chengpeiquan/vue-picture-cropper-demo/blob/main/src/views/options.vue\">Vue 2.0 选项式 API 写法</a></p>\n</li>\n</ul>\n<h2>Props</h2>\n<p>简单的说明如下，可参考上方的用法示范自行调整。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">props</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">boxStyle</td>\n<td style=\"text-align:left\">object</td>\n<td style=\"text-align:left\">定义裁剪区域的样式，也就是包裹cropper的父级元素样式</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">img</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">要用来裁切的图片地址</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">options</td>\n<td style=\"text-align:left\">object</td>\n<td style=\"text-align:left\">一些cropper的设定参数，完整可参考 <a href=\"https://github.com/fengyuanchen/cropperjs#options\">options - cropperjs</a></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">events</td>\n<td style=\"text-align:left\">function</td>\n<td style=\"text-align:left\">一些cropper的回调函数，完整可参考 <a href=\"https://github.com/fengyuanchen/cropperjs#events\">events - cropperjs</a></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">presetMode</td>\n<td style=\"text-align:left\">object</td>\n<td style=\"text-align:left\">预设模式，可以开箱即用的预设效果</td>\n<td style=\"text-align:left\"><code>0.4.0</code> 版本才开始支持，详见下方的 <a href=\"#%E9%A2%84%E8%AE%BE%E6%A8%A1%E5%BC%8F\">预设模式</a> 部分文档</td>\n</tr>\n</tbody>\n</table>\n<p>btw: 远程图片会涉及到跨域问题，要服务端进行配合调整，请尽量使用本地图片来避免一些奇怪的问题出现。</p>\n<h2>常用选项</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">viewMode</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">可以决定裁切框的活动范围，可选 0、1、2、3，建议选 1 （裁切框只能在图片区域内活动）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aspectRatio</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">可以指定裁剪框的宽高比，不设置则为自由变化（建议按照裁切结果的尺寸设置对应的比例）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">preview</td>\n<td style=\"text-align:left\">element/string</td>\n<td style=\"text-align:left\">图片预览的容器，一个 DOM 元素。必须可以被 document.querySelectorAll 获取到</td>\n</tr>\n</tbody>\n</table>\n<h2>常用方法</h2>\n<p>可通过 <code>cropper</code> 实例来调取插件的各种 API （也就是在 import 的时候花括号里的那个实例）。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名</th>\n<th style=\"text-align:left\">功能说明</th>\n<th style=\"text-align:left\">用法示范</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">getDataURL</td>\n<td style=\"text-align:left\">获取裁切后的base64结果，可用于本地预览展示</td>\n<td style=\"text-align:left\">const dataURL = cropper.getDataURL()</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getBlob</td>\n<td style=\"text-align:left\">获取裁切后的 blob 结果，可用于传给服务端</td>\n<td style=\"text-align:left\">const blob = cropper.getBlob()</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getFile</td>\n<td style=\"text-align:left\">获取裁切后的 file 结果，可用于传给服务端</td>\n<td style=\"text-align:left\">const file = cropper.getFile()</td>\n<td style=\"text-align:left\"><code>0.2.0</code> 版本开始才支持该方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clear</td>\n<td style=\"text-align:left\">清除裁切框</td>\n<td style=\"text-align:left\">cropper.clear()</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">reset</td>\n<td style=\"text-align:left\">重置默认的裁切区域</td>\n<td style=\"text-align:left\">cropper.reset()</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p><strong>需要注意的是</strong></p>\n<p><code>getDataURL</code> 是同步方法，可以直接拿到结果。</p>\n<p>但 <code>getBlob</code> 和 <code>getFile</code> 自 <code>0.3.0</code> 版本开始是异步方法！！！需配合 <code>Promise</code> 或 <code>async / await</code> 等方式来获取结果。</p>\n<p>三者均属于插件自带的方法，生成的文件格式都是基于源图片的格式，仅支持处理本地图片，不支持远程图片。</p>\n<p>其中均可传入选项来控制获取到的结果变化：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">width</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">设置裁切结果的宽度</td>\n<td style=\"text-align:left\">原图所截区域的大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">height</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">设置裁切结果的高度</td>\n<td style=\"text-align:left\">原图所截区域的大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">minWidth</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">设置裁切结果的最小宽度</td>\n<td style=\"text-align:left\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">minHeight</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">设置裁切结果的最小高度</td>\n<td style=\"text-align:left\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">maxWidth</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">设置裁切结果的最大宽度</td>\n<td style=\"text-align:left\">无上限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">maxHeight</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">设置裁切结果的最大高度</td>\n<td style=\"text-align:left\">无上限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fillColor</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">设置裁剪结果的背景色，比如你想改变png透明区域的颜色</td>\n<td style=\"text-align:left\">transparent</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">imageSmoothingEnabled</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">是否让裁剪后的图片显得平滑</td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">imageSmoothingQuality</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">图片平滑质量，可选low、medium、high</td>\n<td style=\"text-align:left\">low</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fileName</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">文件名，目前只有 <code>getFile</code> 会用到该参数，可不传</td>\n<td style=\"text-align:left\">cropped-当前时间戳.原文件后缀</td>\n</tr>\n</tbody>\n</table>\n<p>用法示范：</p>\n<pre><code class=\"language-js\">// 设定裁切后指定尺寸为 400x250 ，通常可以为 banner 图裁切指定尺寸\nconst opt = {\n  width: 400,\n  height: 250\n};\n\n// 裁切后会按照该尺寸生成结果\nconst dataURL = cropper.getDataURL(opt);\n</code></pre>\n<p>如果是要获取 blob 和 file ，请记得用异步方法：</p>\n<pre><code class=\"language-js\">cropper.getBlob()\n  .then((blob) =&gt; {\n    console.log('blob', blob)\n  })\n// 或者是 await cropper.getBlob()\n\ncropper.getFile()\n  .then((file) =&gt; {\n    console.log('file', file)\n  })\n// 或者是 await cropper.getFile()\n</code></pre>\n<p>具体在项目工程里的使用可以参考文档前面附的 DEMO 源码。</p>\n<p>如果需要转换格式或者处理远程图片，请使用 <a href=\"https://github.com/fengyuanchen/cropperjs#getcroppedcanvasoptions\">getCroppedCanvas</a> （需注意：这个方法存在部分异步操作，请留意用法说明）</p>\n<h2>预设模式</h2>\n<p>这里提供了一些常用的预设模式，方便在日常的业务场景里快速使用。</p>\n<p>通过 <code>presetMode</code> 来指定启用哪个预设模式。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">mode</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">fixedSize=固定尺寸模式，round=圆形模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">width</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">裁切区的宽度，需要大于0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">height</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">裁切区的高度，需要大于0</td>\n</tr>\n</tbody>\n</table>\n<h3>注意事项：</h3>\n<ul>\n<li>\n<p><code>presetMode</code> 只提供了一些简化的配置，比如你要获取圆形头像，就无需自己去处理很多额外的东西，但是一些该传入的 <code>options</code> ，还是需要在 <code>options</code> 指定，请留意对应的示范代码</p>\n</li>\n<li>\n<p>目前使用 <code>presetMode</code> 的情况下， “裁切区域” 和 “裁切结果” 都是一样大的，也就是说，这里指定的 <code>width</code> 和 <code>height</code>，会覆盖 <code>getDataURL</code> 等获取结果 API 传入的 <code>width</code> 和 <code>height</code> 。</p>\n</li>\n<li>\n<p>在指定 <code>presetMode.width</code> 和 <code>presetMode.height</code> 的时候，请留意宽高比例是否与 <code>aspectRatio</code> 一致，如果不一致可能得不到你想要的结果</p>\n</li>\n<li>\n<p><code>presetMode.mode</code> 只接收文档里提及到的值，传入其他将不起作用</p>\n</li>\n</ul>\n<h3>固定尺寸模式</h3>\n<p>可用固定裁切区域的大小，并且获得和裁切区域一样大的裁切结果（这种情况下你可以禁止用户修改裁切区域大小）。</p>\n<p>在线 DEMO ：<a href=\"https://chengpeiquan.github.io/vue-picture-cropper-demo/#/fixedSize\">fixedSize - vue-picture-cropper-demo</a></p>\n<p>DEMO 源码：<a href=\"https://github.com/chengpeiquan/vue-picture-cropper-demo/blob/main/src/views/fixedSize.vue\">fixedSize.vue - vue-picture-cropper-demo</a></p>\n<p>使用方法：</p>\n<ul>\n<li>将 <code>presetMode</code> 的 <code>mode</code> 指定为 <code>fixedSize</code></li>\n<li>将 <code>presetMode</code> 的 <code>width</code> 和 <code>height</code> 指定为想要的尺寸</li>\n<li>将 <code>options</code> 的 <code>dragMode</code> 设置为 <code>move</code> 可以防止裁剪框被取消</li>\n<li>将 <code>options</code> 的 <code>cropBoxResizable</code> 设置为 <code>false</code> 可以关闭裁剪区的大小调整功能</li>\n<li>将 <code>options</code> 的 <code>aspectRatio</code> 比例指定为 <code>width / height</code> 的比例</li>\n</ul>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;vue-picture-cropper\n    :boxStyle=&quot;{\n      width: '100%',\n      height: '100%',\n      backgroundColor: '#f8f8f8',\n      margin: 'auto',\n    }&quot;\n    :img=&quot;pic&quot;\n    :options=&quot;{\n      viewMode: 1,\n      dragMode: 'move',\n      aspectRatio: 1,\n      cropBoxResizable: false,\n    }&quot;\n    :presetMode=&quot;{\n      mode: 'fixedSize',\n      width: 50,\n      height: 50,\n    }&quot;\n  /&gt;\n&lt;/template&gt;\n</code></pre>\n<h3>圆形模式</h3>\n<p>如果你在用户头像等地方，需要裁切为圆形图片，可以使用该模式来帮助你获得一个圆形的 png 图。</p>\n<p>它也是固定裁切区域的大小，并且获得和裁切区域一样大的裁切结果（这种情况下你可以禁止用户修改裁切区域大小）。</p>\n<p>这个情况下，裁切结果固定是 <code>png</code> 图片（否则似乎没有什么裁圆形的意义…）。</p>\n<p>在线 DEMO ：<a href=\"https://chengpeiquan.github.io/vue-picture-cropper-demo/#/round\">round - vue-picture-cropper-demo</a></p>\n<p>DEMO 源码：<a href=\"https://github.com/chengpeiquan/vue-picture-cropper-demo/blob/main/src/views/round.vue\">round.vue - vue-picture-cropper-demo</a></p>\n<p>使用方法：</p>\n<ul>\n<li>将 <code>presetMode</code> 的 <code>mode</code> 指定为 <code>fixedSize</code></li>\n<li>将 <code>presetMode</code> 的 <code>width</code> 和 <code>height</code> 指定为想要的尺寸，两个值需要一样</li>\n<li>将 <code>options</code> 的 <code>dragMode</code> 设置为 <code>move</code> 可以防止裁剪框被取消</li>\n<li>将 <code>options</code> 的 <code>cropBoxResizable</code> 设置为 <code>false</code> 可以关闭裁剪区的大小调整功能</li>\n<li>将 <code>options</code> 的 <code>aspectRatio</code> 比例指定为 <code>1</code></li>\n</ul>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;vue-picture-cropper\n    :boxStyle=&quot;{\n      width: '100%',\n      height: '100%',\n      backgroundColor: '#f8f8f8',\n      margin: 'auto',\n    }&quot;\n    :img=&quot;pic&quot;\n    :options=&quot;{\n      viewMode: 1,\n      dragMode: 'move',\n      aspectRatio: 1,\n      cropBoxResizable: false,\n    }&quot;\n    :presetMode=&quot;{\n      mode: 'round',\n      width: 100,\n      height: 100,\n    }&quot;\n  /&gt;\n&lt;/template&gt;\n</code></pre>\n<h2>其他说明</h2>\n<p>因为本插件是对做了一层组件化的实现，所以本组件也同步了 cropperjs 的所有 API ，均可通过 <code>cropper.xxxx</code> 来使用原来的 API 。</p>\n<p>如果你需要更多高级功能，可以戳原文档参考使用 <a href=\"https://github.com/fengyuanchen/cropperjs#events\">events - cropperjs</a></p>\n"
}