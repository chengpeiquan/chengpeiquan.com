{
  "title": "用Vite更简单的解决Vue3项目的预渲染问题",
  "desc": "之前 Webpack 项目经常会用到预渲染，现在团队都开始用 Vite 了，所以弄一个基于 Vite 的 Vue 3 预渲染 demo 可以参考。",
  "keywords": "Vite,预渲染,Vite预渲染,Vue3预渲染",
  "date": "2022-06-02 22:59:00",
  "cover": "http://cdn.chengpeiquan.com/img/2022/06/20220605213042.jpg?x-oss-process=image/interlace,1",
  "categories": [
    "tech"
  ],
  "repo": "https://github.com/chengpeiquan/vite-vue3-prerender-demo",
  "id": "vite-vue3-prerender",
  "type": "article",
  "author": {
    "name": "chengpeiquan",
    "email": "chengpeiquan@chengpeiquan.com",
    "link": "https://chengpeiquan.com"
  },
  "shortDate": "2022-06-02",
  "content": "<p>[[toc]]</p>\n<p>之前 Webpack 项目经常会用到预渲染，现在团队都开始用 Vite 了，所以弄一个基于 Vite 的 Vue 3 预渲染 demo 可以参考。</p>\n<p>预渲染和静态生成器比较接近，也可以参考我的 <a href=\"https://github.com/chengpeiquan/chengpeiquan.com/blob/main/src/router/index.ts\">SSG 博客</a> 用 <a href=\"https://www.npmjs.com/package/vite-ssg\">vite-ssg</a> 和 <a href=\"https://www.npmjs.com/package/vite-plugin-pages\">vite-plugin-pages</a> 来处理。</p>\n<p>不过 Vite 本身对预渲染也提供了原生的支持，简单的预渲染可以自己写写代码来改造实现。</p>\n<h2>HTML 部分</h2>\n<p>项目根目录下 <code>index.html</code> 里需要追加至少两条资源注入位置的注释：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">注释语句</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">是否必须</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&lt;!--preload-links--&gt;</code></td>\n<td style=\"text-align:center\">预加载资源</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;!--app-html--&gt;</code></td>\n<td style=\"text-align:center\">页面内容</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;!--title--&gt;</code></td>\n<td style=\"text-align:center\">SEO 优化：写入标题</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;!--description--&gt;</code></td>\n<td style=\"text-align:center\">SEO 优化：写入描述</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;!--keywords--&gt;</code></td>\n<td style=\"text-align:center\">SEO 优化：写入关键词</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n</tbody>\n</table>\n<p>并把入口文件改成 <code>entry-client.ts</code> ，原来的 <code>main.ts</code> 会作为客户端和服务端启动时的引用。</p>\n<p>完整代码如下（源码：<a href=\"https://github.com/chengpeiquan/vite-vue3-prerender-demo/blob/main/index.html\">index.html</a> ）：</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;!--title--&gt;\n    &lt;!--description--&gt;\n    &lt;!--keywords--&gt;\n    &lt;!--preload-links--&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;app&quot;&gt;&lt;!--app-html--&gt;&lt;/div&gt;\n    &lt;script type=&quot;module&quot; src=&quot;/src/entry-client.ts&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>其中除了两条必须的注释语句外，可选的部分见 <a href=\"#seo-%E4%BC%98%E5%8C%96\">SEO 优化</a> 。</p>\n<h2>入口文件</h2>\n<p>普通项目是使用 <code>src/main.ts</code> 作为入口文件，需要改造成两个入口：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">注释语句</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">源码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>entry-client.ts</code></td>\n<td style=\"text-align:center\">客户端入口</td>\n<td style=\"text-align:center\"><a href=\"https://github.com/chengpeiquan/vite-vue3-prerender-demo/blob/main/src/entry-client.ts\">查看源码</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>entry-server.ts</code></td>\n<td style=\"text-align:center\">服务端入口</td>\n<td style=\"text-align:center\"><a href=\"https://github.com/chengpeiquan/vite-vue3-prerender-demo/blob/main/src/entry-server.ts\">查看源码</a></td>\n</tr>\n</tbody>\n</table>\n<p>而原来的 <code>main.ts</code> 只作为入口函数导出，详见源码： <a href=\"https://github.com/chengpeiquan/vite-vue3-prerender-demo/blob/main/src/main.ts\">main.ts</a></p>\n<h2>路由</h2>\n<p>不再需要手动配置路由结构了，改造后直接读取 <code>src/views</code> 的路由组件来生成页面路由。</p>\n<p>详见源码： <a href=\"https://github.com/chengpeiquan/vite-vue3-prerender-demo/blob/main/src/router/index.ts\">router</a></p>\n<h2>SEO 优化</h2>\n<p>做预渲染为的就是做 SEO ，所以需要自己提前配置好 SEO 的 TKD 三大要素，这里我也是放在 <code>src/router</code> 目录下一起管理了。</p>\n<p>实现逻辑见 <a href=\"#%E9%A2%84%E6%B8%B2%E6%9F%93\">预渲染</a> 部分的说明，这里是以最终每个页面的相对路径来判断要写入的 TKD 信息的。</p>\n<pre><code class=\"language-ts\">export default [\n  {\n    url: '/',\n    title: '首页',\n    description: '这是首页',\n    keywords: ['关键词1', '关键词2'],\n  },\n  // ...\n]\n</code></pre>\n<p>详见源码： <a href=\"https://github.com/chengpeiquan/vite-vue3-prerender-demo/blob/main/src/router/seo.ts\">seo</a></p>\n<h2>预渲染</h2>\n<p><code>scripts/prerender.ts</code> 这个文件是执行预渲染行为，可以按照路由目录的结构渲染为静态 HTML 文件。</p>\n<p>运行 <code>npm run generate</code> ，可以把 <code>dist/static</code> 作为静态站点部署。</p>\n<p>当然我也封装了 <code>npm run build</code> 一次性编译所有平台（ Client / Server / Static ）。</p>\n<p>详见： <a href=\"https://github.com/chengpeiquan/vite-vue3-prerender-demo/blob/main/package.json\">package.json</a> 里的 <code>scripts</code> 部分。</p>\n<h2>常见问题</h2>\n<p>改造过程中遇到的几个问题：</p>\n<h3>水合节点不匹配</h3>\n<p>控制台报错：</p>\n<pre><code class=\"language-bash\">Hydration node mismatch:\n- Client vnode: div \n- Server rendered DOM: &lt;!--app-html--&gt;  \n</code></pre>\n<p>警告来自于 <a href=\"https://github.com/vuejs/core/blob/main/packages/runtime-core/src/hydration.ts\">hydration.ts</a> ，一般可以无视……</p>\n<p>当然也可以了解更多的知识点： <a href=\"https://www.sumcumo.com/en/understand-and-solve-hydration-errors-in-vue-js\">understand-and-solve-hydration-errors-in-vue-js</a></p>\n<h3>路由跳转</h3>\n<p>控制台报错：</p>\n<pre><code class=\"language-bash\">Unhandled error during execution of scheduler flush\n</code></pre>\n<p>需要使用 <code>&lt;Suspense /&gt;</code> 标签来包裹路由视图，详见 <a href=\"https://v3.cn.vuejs.org/guide/migration/suspense.html#suspense\">Suspense</a> 。</p>\n<pre><code class=\"language-diff\">&lt;template&gt;\n-  &lt;!-- &lt;router-view :key=&quot;key&quot; /&gt; --&gt;\n+  &lt;router-view :key=&quot;key&quot; v-slot=&quot;{ Component }&quot;&gt;\n+    &lt;Suspense&gt;\n+      &lt;div&gt;\n+        &lt;component :is=&quot;Component&quot; /&gt;\n+      &lt;/div&gt;\n+    &lt;/Suspense&gt;\n+  &lt;/router-view&gt;\n&lt;/template&gt;\n</code></pre>\n"
}