{
  "title": "vue-baidu-analytics 基于Vue SPA项目的百度统计插件（支持Vue 3.0）",
  "desc": "一个专为SPA项目开发的百度统计插件，支持Vue 3.0以及2.0版本同时使用，也可用于VuePress项目，支持在路由切换时，自动上报流量数据等功能。",
  "keywords": "vue-baidu-analytics,vue百度统计,vue流量上报,spa流量,spa百度统计,vue统计代码,spa统计代码,vuepress统计,vuepress百度统计",
  "date": "2021-01-08 07:21:00",
  "cover": "http://cdn.chengpeiquan.com/img/2019/12/1.jpg?x-oss-process=image/interlace,1",
  "categories": [
    "tech"
  ],
  "repo": "https://github.com/analyticsjs/vue-baidu-analytics",
  "id": "vue-baidu-analytics",
  "type": "article",
  "author": {
    "name": "chengpeiquan",
    "email": "chengpeiquan@chengpeiquan.com",
    "link": "https://chengpeiquan.com"
  },
  "shortDate": "2021-01-08",
  "content": "<p>[[toc]]</p>\n<p>一个只有 3 kB 大小的插件，可以帮你轻松解决 SPA 单页面项目浏览数据不准确的问题，可基于 Vue 路由访问轨迹自动向百度统计平台上报 PV / 事件数据。</p>\n<blockquote>\n<p>本插件自 v2.0.0 开始，最新版插件支持在 Vue 3.0 项目下使用，同时兼容 Vue 2.0 项目的使用，具体使用方法请看下方说明以及在线 demo 。<br>对 Vue 3.0 感兴趣，但还在观望的同学，欢迎阅读我踩坑总结的：<a href=\"https://vue3.chengpeiquan.com/\">Vue3.0学习教程与实战案例</a> （持续更新ing）</p>\n</blockquote>\n<h2>功能</h2>\n<ul>\n<li>\n<p>异步载入百度统计脚本，无需修改入口 HTML</p>\n</li>\n<li>\n<p>支持部署多个站点 ID ，并对应进行数据上报（跨部门合作项目，双方均要收集数据时非常有用）</p>\n</li>\n<li>\n<p>支持自动上报路由切换产生的 PV 数据（需引入 <a href=\"https://router.vuejs.org/\">Vue Router</a>，支持 hash 模式和 history 模式的地址）</p>\n</li>\n<li>\n<p>支持手动提交 PV 上报</p>\n</li>\n<li>\n<p>支持手动提交事件分析上报</p>\n</li>\n<li>\n<p>自动识别 Vue 版本，自动适配 Vue 2.0 / Vue 3.0 使用（本插件 v2.0.0 版本新增）</p>\n</li>\n<li>\n<p>提供了 Hooks API（本插件 v2.1.0 版本新增，因此 CDN 安装的用法略有调整，请留意使用说明）</p>\n</li>\n</ul>\n<h2>项目</h2>\n<p>理论上只要引入了 Vue （必须） 和 Vue Router （自 v2.2.0 起是可选） 的项目均可以正常使用，包括但不限于以下类型：</p>\n<ul>\n<li>\n<p>Vue-CLI 脚手架项目</p>\n</li>\n<li>\n<p>Vite 项目</p>\n</li>\n<li>\n<p>引入 Vue 相关 CDN 的 HTML 页面</p>\n</li>\n<li>\n<p>VuePress 项目</p>\n</li>\n</ul>\n<p>也不仅限于 SPA 单页面项目，在 SSG / SSR 项目里也可以使用。</p>\n<h2>预览</h2>\n<p>两个在线 demo 均已开启 debug 模式，可开启控制台查看上报情况。</p>\n<p>Vue 2.0 版本：<a href=\"https://analyticsjs.github.io/vue-baidu-analytics/demo/vue2.html\" title=\"vue-baidu-analytics demo for Vue 2.x\">vue-baidu-analytics demo for Vue 2.x</a></p>\n<p>Vue 3.0 版本：<a href=\"https://analyticsjs.github.io/vue-baidu-analytics/demo/vue3.html\" title=\"vue-baidu-analytics demo for Vue 3.x\">vue-baidu-analytics demo for Vue 3.x</a></p>\n<h2>选项</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">是否必填</th>\n<th style=\"text-align:center\">选项类型</th>\n<th>选项说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">router</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">object</td>\n<td>Vue Router（自 v2.2.0 版本开始为可选，无路由的单页则不必传该选项）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">siteIdList</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">string[]</td>\n<td>百度统计的站点 id 列表，只有一个站点需要上报就保留一个 id 即可</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isDebug</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">boolean</td>\n<td>是否开启 debug 模式，默认 <code>false</code>，开启后会在 F12 控制台打印上报信息</td>\n</tr>\n</tbody>\n</table>\n<p>友情提示：上线前记得关闭 debug 模式。</p>\n<h2>安装</h2>\n<p>方式一：通过 NPM 安装</p>\n<pre><code class=\"language-bash\">npm install vue-baidu-analytics --save-dev\n</code></pre>\n<p>方式二：通过 CDN 安装</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;http://cdn.jsdelivr.net/npm/vue-baidu-analytics/dist/vue-baidu-analytics.min.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h2>启用</h2>\n<p>通过 NPM 安装的项目，需要先在 main.js 里引入插件（通过 CDN 则无需该步骤）。</p>\n<pre><code class=\"language-js\">import baiduAnalytics from 'vue-baidu-analytics'\n</code></pre>\n<p>安装插件后，在 main.js  引入以下代码（注意 Vue 2.0 和 Vue 3.0 的用法区别），即可开启自动上报功能，首次访问页面会部署统计代码并提交第一次访问数据上报。</p>\n<p>后续在路由切换过程中，也会根据路由的切换提交相应的 URL 信息到百度统计。</p>\n<h3>在 Vue 2.0 里使用</h3>\n<p>可参考demo：<a href=\"https://analyticsjs.github.io/vue-baidu-analytics/demo/js/main-for-vue2.js\">main.js - Vue 2.0 demo</a></p>\n<blockquote>\n<p>自 v2.1.0 版本开始，如果是通过 CDN 安装，需要使用 <code>baiduAnalytics.default</code> 去激活插件，通过 NPM 安装的脚手架项目则使用 <code>baiduAnalytics</code> 就可以</p>\n</blockquote>\n<pre><code class=\"language-js\">// 启动插件\nVue.use(baiduAnalytics, {\n  router: router,\n  siteIdList: [\n    'aaaaaaaaaaaaaaaaaaa',\n    'bbbbbbbbbbbbbbbbbbb'\n  ],\n  isDebug: false\n});\n</code></pre>\n<h3>在 Vue 3.0 里使用</h3>\n<p>可参考demo：<a href=\"https://analyticsjs.github.io/vue-baidu-analytics/demo/js/main-for-vue3.js\">main.js - Vue 3.0 demo</a></p>\n<blockquote>\n<p>自 v2.1.0 版本开始，如果是通过 CDN 安装，需要使用 <code>baiduAnalytics.default</code> 去激活插件，通过 NPM 安装的脚手架项目则使用 <code>baiduAnalytics</code> 就可以</p>\n</blockquote>\n<pre><code class=\"language-js\">/** \n * 初始化Vue\n */\ncreateApp(app)\n  // 启动路由\n  .use(router)\n\n  // 启动插件\n  .use(baiduAnalytics, {\n    router: router,\n    siteIdList: [\n      'aaaaaaaaaaaaaaaaaaa',\n      'bbbbbbbbbbbbbbbbbbb'\n    ],\n    isDebug: false\n  })\n  \n  // 挂载到节点上\n  .mount('#app');\n</code></pre>\n<h3>在 VuePress 里使用</h3>\n<p>插件也支持在Vue的静态文档 <a href=\"https://vuepress.vuejs.org/zh/\">VuePress</a> 项目里使用。</p>\n<p>在项目下的 <code>/docs/.vuepress</code> 文件夹下，创建一个 <code>enhanceApp.js</code>，按照下面的方式引入即可启动数据上报功能。</p>\n<p>官方文档传送门：<a href=\"https://vuepress.vuejs.org/zh/guide/basic-config.html#%E5%BA%94%E7%94%A8%E7%BA%A7%E5%88%AB%E7%9A%84%E9%85%8D%E7%BD%AE\">应用级别的配置 - VuePress</a></p>\n<pre><code class=\"language-js\">import baiduAnalytics from 'vue-baidu-analytics'\n\nexport default ({ Vue, router }) =&gt; {\n  Vue.use(baiduAnalytics, {\n    router: router,\n    siteIdList: [\n      'aaaaaaaaaaaaaaaaaaa',\n      'bbbbbbbbbbbbbbbbbbb',\n      'ccccccccccccccccccc'\n    ],\n    isDebug: false\n  });\n};\n</code></pre>\n<p>可在开发环境打开 debug 模式了解相关的上报情况（上线前记得关闭 debug ）。</p>\n<h2>API</h2>\n<p>自 v2.1.0 版本开始，插件支持直接调用的全局 API <code>$pushBAIDU</code> 和按需导入的钩子 API <code>usePush</code> 两种方式。</p>\n<p>这两种方式在 Vue 2.0 和 3.0 里均可以使用，只不过按照使用习惯和从 Vue 官方推荐的角度来说，全局 API 更适合 Vue 2.0 项目，钩子 API 更适合 Vue 3.0 项目。</p>\n<blockquote>\n<p>插件的 API 不可以直接使用，需要配合 API 里面的 <a href=\"#%E6%96%B9%E6%B3%95\">方法</a> 才可以操作到具体功能。</p>\n</blockquote>\n<h3>全局 API</h3>\n<p>在 Vue 2.0 里，只需要通过我们熟悉的 <code>this</code> 去操作即可：</p>\n<pre><code class=\"language-js\">// xxx.vue in Vue 2.0\nexport default {\n  // ...\n  mounted () {\n    this.$pushBAIDU.pv('/example-url/');\n  },\n  // ...\n}\n</code></pre>\n<p>在 Vue 3.0 里，可以按照官方文档的推荐，导入当前实例变量，通过当前实例变量去操作全局方法：</p>\n<pre><code class=\"language-js\">// xxx.vue in Vue 3.0\nimport { getCurrentInstance } from 'vue'\n\nexport default {\n  setup () {\n    const app = getCurrentInstance();\n    app.appContext.config.globalProperties.$pushBAIDU.pv('/example-url/');\n  }\n}\n</code></pre>\n<p>也可以导入当前实例里的代理组件去操作：</p>\n<pre><code class=\"language-js\">// xxx.vue in Vue 3.0\nimport { getCurrentInstance } from 'vue'\n\nexport default {\n  setup () {\n    const { proxy } = getCurrentInstance();\n    proxy.$pushBAIDU.pv('/example-url/');\n  }\n}\n</code></pre>\n<h3>钩子 API</h3>\n<blockquote>\n<p>钩子 API 需要在用到的组件里 import 导入才可以使用。</p>\n</blockquote>\n<p>在 Vue 2.0 里，你可以绑定一个钩子变量去使用：</p>\n<pre><code class=\"language-js\">// xxx.vue in Vue 2.0\nimport { usePush } from 'vue-baidu-analytics'\n\nexport default {\n  // ...\n  data () {\n    return {\n      // 创建钩子变量\n      baidu: usePush()\n    }\n  },\n  mounted () {\n    // 通过钩子变量去触发方法\n    this.baidu.pv('/example-url/');\n  },\n  // ...\n}\n</code></pre>\n<p>在 Vue 3.0 里，就像在使用路由 <code>const router = useRouter();</code> 一样去使用就可以。</p>\n<pre><code class=\"language-js\">// xxx.vue in Vue 3.0\nimport { usePush } from 'vue-baidu-analytics'\n\nexport default {\n  setup () {\n    // 创建钩子变量\n    const baidu = usePush();\n\n    // 通过钩子变量去触发方法\n    baidu.pv('/example-url/');\n  }\n}\n</code></pre>\n<p>另外，如果 API 与其他插件冲突的话（比如你同时使用了 <a href=\"https://github.com/analyticsjs/vue-cnzz-analytics\">vue-cnzz-analytics</a>），你可以在导入的时候重命名：</p>\n<pre><code class=\"language-js\">import { usePush as useBaidu } from 'vue-baidu-analytics'\nconst baidu = useBaidu();\n</code></pre>\n<h2>方法</h2>\n<p>方法需要通过 API 去触发，全局 API 和 钩子 API 支持的方法都是完全一样的。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法功能</th>\n<th style=\"text-align:left\">使用说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">手动上报页面 PV</td>\n<td style=\"text-align:left\"><a href=\"#%E6%89%8B%E5%8A%A8%E4%B8%8A%E6%8A%A5%E9%A1%B5%E9%9D%A2PV\">点击查看</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">手动上报事件分析</td>\n<td style=\"text-align:left\"><a href=\"#%E6%89%8B%E5%8A%A8%E4%B8%8A%E6%8A%A5%E4%BA%8B%E4%BB%B6%E5%88%86%E6%9E%90\">点击查看</a></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>由于目前 Vue 2.0 的使用者还比较多，下面的举例均只用 Vue 2.0 的操作方法进行演示，Vue 3.0 可根据钩子 API 的说明去调用具体的方法。</p>\n</blockquote>\n<p>注：如果配置了多个站点 ID ，数据都会同时上报给所有站点。</p>\n<h3>手动上报页面 PV</h3>\n<p>如果你有些页面是通过 Tab 切页进行内容渲染切换，但又需要上报访问数据的话，就可以使用这个方法来进行手动上报。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pv</td>\n<td>手动执行 PV 数据上报</td>\n</tr>\n</tbody>\n</table>\n<p><strong>参数</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">是否必填</th>\n<th style=\"text-align:center\">参数类型</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pageUrl</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">string</td>\n<td>提交上报的 URL ，必须是以 <code>/</code> 开头的相对路径，如果不填，则会默认提交为域名根目录</td>\n</tr>\n</tbody>\n</table>\n<p><strong>使用示范</strong></p>\n<pre><code class=\"language-js\">this.$pushBAIDU.pv('/example-url/');\n</code></pre>\n<h3>手动上报事件分析</h3>\n<p>比如你的页面上有个 “换一换” 的功能按钮，想要统计这个按钮的点击情况，就可以通过给按钮绑定上报事件来进行点击情况分析。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">event</td>\n<td>手动执行事件分析数据上报</td>\n</tr>\n</tbody>\n</table>\n<p><strong>参数</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">是否必填</th>\n<th style=\"text-align:center\">参数类型</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">category</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">string</td>\n<td>产生该事件的位置名称，比如 <code>首页banner</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">action</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">string</td>\n<td>产生该事件的行为描述，比如 <code>点击</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">label</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">string</td>\n<td>产生该事件的标签名称，可以用来记录事件子 id，比如 <code>bannerId_123</code>，默认为空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">number</td>\n<td>该事件的分值，默认 0</td>\n</tr>\n</tbody>\n</table>\n<p><strong>使用示范</strong></p>\n<pre><code class=\"language-js\">this.$pushBAIDU.event(\n  this.category,\n  this.action,\n  this.label,\n  this.value\n);\n</code></pre>\n<h2>更新记录</h2>\n<p>点击查看：<a href=\"https://github.com/analyticsjs/vue-baidu-analytics/releases\">releases</a></p>\n<h2>License</h2>\n<p><a href=\"https://github.com/analyticsjs/vue-baidu-analytics/blob/master/LICENSE\">MIT License</a> © 2019 <a href=\"https://github.com/chengpeiquan\">chengpeiquan</a></p>\n"
}