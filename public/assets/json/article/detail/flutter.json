{
  "title": "从前端开发者身份入门Flutter和Dart的学习笔记",
  "desc": "有很多相似，又有很多不同，慢慢适应一下",
  "keywords": "flutter,dart",
  "date": "2022-01-28 00:02:00",
  "cover": "http://cdn.chengpeiquan.com/img/2021/11/20220127161927.jpg?x-oss-process=image/interlace,1",
  "categories": [
    "tech"
  ],
  "isDraft": true,
  "id": "flutter",
  "type": "article",
  "author": {
    "name": "chengpeiquan",
    "email": "chengpeiquan@chengpeiquan.com",
    "link": "https://chengpeiquan.com"
  },
  "shortDate": "2022-01-28",
  "content": "<p>[[toc]]</p>\n<p>最近有空，接触一下 Flutter 和 Dart 的开发，虽然说前端入门 Flutter 比较友好，但个人觉得最最最开始其实不怎么友好，当然写了几个小时 Dart 之后感觉确实都是熟悉的身影，但真的刚入门的那一两个小时真的特别困，所以还是要不定期记录一些遇到的问题。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2021/11/20220127163236.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"\"></p>\n<p>本文主要面向平时写 Vue + TypeScript 的开发者，主要通过一些常用知识点的对比，来加快对 Flutter 的入门学习，因为很多道理是相同的，区别只在于怎么用。</p>\n<h2>在线文档</h2>\n<p>国内很多中文文档都十分陈旧，主要原因跟 Flutter 的版本更新比较频繁有关系，如果看国内那些老文档，你连 Hello World 都跑不起来… 建议直接阅读官方的英文文档。</p>\n<p>点击阅读：<a href=\"https://docs.flutter.dev/\">Flutter 官方英文文档</a></p>\n<p>不过也有本不错的开源书一直在更新维护，也值得一看！</p>\n<p>点击阅读：<a href=\"https://book.flutterchina.club/\">Flutter 实战·第二版</a></p>\n<p>Dart 语言上手倒是没有太大的难度，主要了解一下语法结构就好，大部分在敲 DEMO 代码的实践过程中就能理解和记住了，在 Flutter 实战这本书有一章是总结了一些 Dart 的速记，可以看看。</p>\n<p>点击阅读：<a href=\"https://book.flutterchina.club/chapter1/dart.html\">Dart 语言简介</a></p>\n<p>另外对于编程风格，建议有空先看一波 Flutter 官方提供的风格指南。</p>\n<p>点击阅读：<a href=\"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo\">Style Guide For Flutter Repo</a></p>\n<h2>项目起步</h2>\n<p>建议先阅读一遍 <a href=\"https://zhuanlan.zhihu.com/p/90836859\">万字长文轻松彻底入门 Flutter，秒变大前端</a>，有个大概的了解再自己折腾。</p>\n<p>看完了，就开始折腾了，作为一个前端，相对于 Android Studio ，当然是更愿意用 VSCode 啦！</p>\n<blockquote>\n<p>用 VSCode 的好处是自动热重载， 用 Terminal 需要自己手动在命令行敲 <code>r</code> 才能刷新，就很 emmm…</p>\n</blockquote>\n<h3>VSCode 支持</h3>\n<p>VSCode 的 Flutter 和 Dart 支持特别友好，安装对应的插件就行。</p>\n<ul>\n<li>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter\">Flutter - VS Code Market</a></p>\n</li>\n<li>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code\">Dart - VS Code Market</a></p>\n</li>\n</ul>\n<h3>启动调试</h3>\n<p>调试有两种方式，一个是直接在 Chrome 上预览网页版，一个是在模拟器上预览（我是 Windows 开发所以也只能体验一下安卓模拟器）。</p>\n<h4>Chrome 模拟器</h4>\n<p>调试的话可以通过 VSCode 的 <a href=\"https://github.com/chengpeiquan/flutter_demo/blob/main/.vscode/launch.json\">lunch.json</a> 配置一个 Flutter 启动。</p>\n<pre><code class=\"language-json\">{\n  &quot;version&quot;: &quot;0.2.0&quot;,\n  &quot;configurations&quot;: [\n    {\n      &quot;name&quot;: &quot;Flutter&quot;,\n      &quot;type&quot;: &quot;dart&quot;,\n      &quot;request&quot;: &quot;launch&quot;\n    }\n  ]\n}\n</code></pre>\n<p>或者在 Windows Terminal 等终端里 <code>cd</code> 进项目目录，跑 <code>flutter run</code> 运行。</p>\n<p>会唤起 Chrome 浏览器，支持热重载。</p>\n<h4>安卓模拟器</h4>\n<p>我按照这个教程配置了一波，运行成功了。</p>\n<p><a href=\"https://blog.csdn.net/qq_40259641/article/details/90475896\">[Flutter] 调用VS Code 模拟器(虚拟机), 不借助Genymotion</a></p>\n<h3>项目入口</h3>\n<p><code>lib</code> 文件夹是 <code>main.dart</code> 为应用程序的入口文件， <code>runApp</code> 是 Flutter 应用的入口。</p>\n<pre><code class=\"language-dart\">void main() {\n  runApp(const MyApp());\n}\n</code></pre>\n<p>其他的文件可以参照平时的开发习惯，分文件编写后 import 进来。</p>\n<p>阿里有个 Star 很多的项目 <a href=\"https://github.com/alibaba/flutter-go/tree/master/lib\">Flutter GO</a>，可以参考下项目结构</p>\n<h3>路由管理</h3>\n<p>Flutter 和 Vue 一样，也是有路由的概念，通过定义路由文件和关联路由表，即可实现一套 APP 的路由。</p>\n<p>一般情况下（我个人觉得的）最好是用命名路由并通过路由名称跳转。</p>\n<pre><code class=\"language-dart\">MaterialApp(\n  // ...\n  // 在这里注册命名路由\n  routes: {\n    'list': (context) =&gt; const ListPage(),\n  },\n  home: const MyHomePage(\n    title: '程沛权',\n    avatar: 'https://avatars.githubusercontent.com/u/24845958?v=4',\n  ),\n);\n</code></pre>\n<p>比如，如果单纯的从首页 <code>push</code> 到列表页面，地址栏不会更新，依旧是首页的地址，热重载刷新后依然是回到首页去，开发调试过程中非常麻烦。</p>\n<pre><code class=\"language-dart\">// 地址栏依旧是 http://localhost:55368/#/\nNavigator.push(context, MaterialPageRoute(\n  builder: (context) {\n    return const ListPage();\n  },\n));\n</code></pre>\n<p>但是如果通过 <code>pushNamed</code> 来跳转到注册的路由，则可以得到一条专用的地址（地址格式和 Vue Router 的 <code>hash</code> 模式一毛一样…），这样热重载后依然可以停留在列表页。</p>\n<pre><code class=\"language-dart\">// 地址栏会切换到 http://localhost:55368/#list\nNavigator.pushNamed(context, 'list');\n</code></pre>\n<p>点击阅读：<a href=\"https://book.flutterchina.club/chapter2/flutter_router.html#_2-4-1-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\">路由管理</a> 这一章。</p>\n<h2>设计风格对比</h2>\n<p>在 Flutter 有两类主流的设计风格： Material 和 Cupertino 。</p>\n<p><a href=\"https://api.flutter.dev/flutter/material/material-library.html\">Material widgets</a> 实现了 iOS，Android 和 web 三端的 Material 设计风格。</p>\n<p><a href=\"https://api.flutter.dev/flutter/cupertino/cupertino-library.html\">Cupertino widgets</a> 基于 Apple Human Interface Guidelines 实现了当前的 iOS 设计风格。</p>\n<p>一般情况下都是默认采用 Android 的 Material 风格， DEMO 也是这样，不知道实际开发的时候会不会用 Cupertino 还是其他，有待实践。</p>\n<p>有一篇文章做了一些选择方面的介绍： <a href=\"https://kendevlog.wordpress.com/2020/11/04/flutter_mat_vs_cup/\">Material 還是 Cupertino？</a></p>\n<h2>部件速记对比</h2>\n<p>都说写前端的人比较容易上手 Dart 和 Flutter ，感觉虽然确实没有那么难入门，不过一开始也会觉得一头雾水，这里放一些标签对比，在实现功能的时候可以快速找到应该用什么部件：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">HTML Tag</th>\n<th style=\"text-align:center\">Flutter Widget</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">div</td>\n<td style=\"text-align:center\">Container</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">span</td>\n<td style=\"text-align:center\">Text</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">img</td>\n<td style=\"text-align:center\">Image</td>\n</tr>\n</tbody>\n</table>\n<p>更多的部件可以查看官网的 API 文档：<a href=\"https://api.flutter.dev/\">API Docs - Flutter</a></p>\n<p>还有两个比较重要的部件类型需要记住：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:left\">用途说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">StatelessWidget</td>\n<td style=\"text-align:left\">无状态变更，UI静态固化的Widget， 页面渲染性能更高。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">StatefulWidget</td>\n<td style=\"text-align:left\">因状态变更可以导致UI变更的的Widget，涉及到数据渲染场景，都使用StatefulWidget。</td>\n</tr>\n</tbody>\n</table>\n<h2>运算符</h2>\n<p>虽然 Dart 的运算符和 TypeScript / JavaScript 大同小异，但还是有些不太一样，比如…</p>\n<pre><code class=\"language-bash\">The '===' operator is not supported.dart(unsupported_operator)\n</code></pre>\n<p>建议看一遍：<a href=\"https://juejin.cn/post/6844903983882960909\">Dart 运算符、流程控制</a></p>\n<h2>常见问题</h2>\n<p>建议先阅读一波 Flutter 实战 那本书，起步流程什么的，在上面都有，这里只记录一些踩坑到比较蛋疼的问题。</p>\n<h3>Android SDK 报错</h3>\n<p>Flutter 开发需要有 Android Studio 环境，但是安装了 Android SDK 后会报 <code>unable to access android sdk add-on list</code> ，在 StackOverflow 找到了解决方案：</p>\n<ol>\n<li>打开 <code>Settings</code></li>\n<li>点击 <code>HTTP Proxy</code> ，选择 <code>Auto-detect proxy settings</code></li>\n<li>测试 <code>youtube.com</code></li>\n</ol>\n<p>参考链接 <a href=\"https://stackoverflow.com/questions/28918069/unable-to-access-android-sdk-add-on-list\">Unable to access Android SDK add-on list</a></p>\n<h3>安卓模拟器报错</h3>\n<p>暂时无解，折腾了 2 个上午都没搞明白怎么弄，可能公司电脑的问题，等回家再试试。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2022/01/20220129104628.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"报错界面\"></p>\n<h3>GlobalKey 报错</h3>\n<p>在调整路由结构的时候，遇到一个 GlobalKey 的报错如下：</p>\n<pre><code class=\"language-bash\">A GlobalKey was used multiple times inside one widge's child list…\n</code></pre>\n<p>一开始是把所有路由都挂到了命令路由里去了，包括 <code>home</code> ，所以首页就崩溃了。</p>\n<pre><code class=\"language-dart\">MaterialApp(\n  title: 'Flutter Demo',\n  theme: ThemeData(primarySwatch: Colors.blueGrey),\n  darkTheme: ThemeData(primarySwatch: black),\n  routes: routes,\n);\n</code></pre>\n<p>然后把首页配置回来才可以，看来首页还是要独立抽离一个配置。</p>\n<pre><code class=\"language-diff\">MaterialApp(\n  title: 'Flutter Demo',\n  theme: ThemeData(primarySwatch: Colors.blueGrey),\n  darkTheme: ThemeData(primarySwatch: black),\n  routes: routes,\n+  home: const HomePage(\n+    title: '程沛权',\n+    avatar: 'https://avatars.githubusercontent.com/u/24845958?v=4',\n+  ),\n);\n</code></pre>\n<h3>打印 LOG</h3>\n<p>类似于 <code>console.log</code> ， Dart 使用 <code>print</code> 来打印 LOG ，如果是在 Chrome 模拟器预览的话，按 F12 打开 Console 面板就可以看到 LOG 了。</p>\n<p>不过有个问题就是 VSCode 一直报一个很烦人的提示，查了一下原来是新版本的 Flutter 要求用 <code>debugPrint</code> 代替 <code>print</code> 了。</p>\n<p>点击查看：<a href=\"https://stackoverflow.com/a/69531249/15117507\">Avoid <code>print</code> calls in production code. (Documentation)</a></p>\n<h3>自定义 Widget</h3>\n<p>在 Flutter ， <code>widget</code> 类似于前端项目的 <code>component</code> ，在实现的时候目前探索是有两种方式可以写出来：</p>\n<p>一种是前端常用的函数式编程，通过函数直接 <code>return</code> 一个 <code>widget</code> 。</p>\n<pre><code class=\"language-dart\">Widget Avatar(\n    {required String url, required double width}) {\n  return Container(\n    // ...\n  );\n}\n</code></pre>\n<p>一种是面向对象编程，通过 <code>class</code> 去定义一个 <code>widget</code> 。</p>\n<pre><code class=\"language-dart\">class Avatar extends StatelessWidget {\n  const Avatar(\n      {Key? key, required this.url, required this.width})\n      : super(key: key);\n\n  final String url;\n  final double width;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      // ...\n    );\n  }\n}\n</code></pre>\n<p>在 StackOverflow 上有关于这个问题的讨论：<a href=\"https://stackoverflow.com/questions/53234825/what-is-the-difference-between-functions-and-classes-to-create-reusable-widgets\">What is the difference between functions and classes to create reusable widgets?</a></p>\n<p>还有一个官方在 YouTube 上的视频教程说明这一点： <a href=\"https://www.youtube.com/watch?v=IOyq-eTRhvo\">Flutter解析：小部件与辅助方法（Helper Method）</a></p>\n<p>大佬总结了一些对比就是：</p>\n<h4>Classes 的优点</h4>\n<blockquote>\n<p>允许性能优化（ const 构造函数，更细粒度的重建）<br><br>\n确保在两个不同布局之间切换正确处理资源（函数可能会重用某些先前的状态）<br><br>\n确保热重载正常工作（使用函数可能会破坏 showDialogs 之类的热重载）<br><br>\n已集成到小部件检查器中。<br><br>\n我们 ClassWidget 在 devtool 显示的小部件树中看到，这有助于理解屏幕上的内容<br><br>\n我们可以重写 debugFillProperties 以打印传递给小部件的参数是什么<br><br>\n更好的错误消息<br><br>\n如果发生异常（如 ProviderNotFound ），框架将为您提供当前构建的小部件的名称。如果您仅在函数 + 中拆分小部件树 Builder ，则您的错误将没有有用的名称<br><br>\n可以定义 Keys<br><br>\n可以使用上下文 API</p>\n</blockquote>\n<h4>Functions 的优点</h4>\n<blockquote>\n<p>代码更少（可以使用代码生成功能小部件来解决）</p>\n</blockquote>\n<p>所以记住最好是通过类去定义一个 widget ，而不是函数。</p>\n<h3>无效的 Material Color</h3>\n<p>这个情况是出现在准备给 darkTheme 设置黑色的 AppBar ，选择了 <code>Colors.black</code> 结果报了这个错误。</p>\n<pre><code class=\"language-bash\">The argument type 'Color' can't be assigned to the parameter type 'MaterialColor?'.dartargument_type_not_assignable\n</code></pre>\n<p>原因是部分颜色不属于 <code>MaterialColor</code> 类型，如果要使用，需要自己创建：</p>\n<pre><code class=\"language-dart\">const MaterialColor black = MaterialColor(\n  0xFF000000,\n  &lt;int, Color&gt;{\n    50: Color(0xFF000000),\n    100: Color(0xFF000000),\n    200: Color(0xFF000000),\n    300: Color(0xFF000000),\n    400: Color(0xFF000000),\n    500: Color(0xFF000000),\n    600: Color(0xFF000000),\n    700: Color(0xFF000000),\n    800: Color(0xFF000000),\n    900: Color(0xFF000000),\n  },\n);\n</code></pre>\n<p>点击查看：<a href=\"https://blog.csdn.net/adojayfan/article/details/113728375\">Flutter更改主题颜色报错:type ‘Color‘ is not a subtype of type ‘MaterialColor‘</a></p>\n<h3>缺少参数传入</h3>\n<p>如果你定义了一个部件：</p>\n<pre><code class=\"language-dart\">class Foo extends StatelessWidget {\n  const Foo(Key? key) : super(key: key);\n  // ...\n}\n</code></pre>\n<p>但是调用 <code>Foo()</code> 的时候会报这样的错误：</p>\n<pre><code class=\"language-bash\">1 positional argument(s) expected, but 0 found.\n</code></pre>\n<blockquote>\n<p>我明明不需要传 key 啊！！！为什么？？？</p>\n</blockquote>\n<p>Dart 和 TypeScript 不一样的地方在于， TS 通过 <code>?</code> 直接可以定义参数可选，但是 Dart 的可选参数需要用花括号 <code>{}</code> 括起来，在类型后面加上问号 <code>?</code> 仅仅只是用来声明为可空，所以这样定义实际上还是表示必须传 <code>key</code> 。</p>\n<p>所以要改成这样（注意 Foo 后面的 <code>()</code> 变成了 <code>({})</code> ）：</p>\n<pre><code class=\"language-diff\">class Foo extends StatelessWidget {\n-  const Foo(Key? key) : super(key: key);\n+  const Foo({Key? key}) : super(key: key);\n  // ...\n}\n</code></pre>\n<h3>图片部件</h3>\n<p>Flutter 的图片部件效果和 HTML 的 <code>img</code> 整体还是比较相似，不过用法上有些差距，但很好记，稍微写一下就能记住了。</p>\n<h4>写法的区别</h4>\n<p>一开始比较迷惑 <code>Image.network</code> 和 <code>NetworkImage</code> 有啥区别，看了一下还真是有区别…</p>\n<p><a href=\"https://stackoverflow.com/questions/52242995/difference-in-networkimage-and-image-network\">Difference in NetworkImage and Image.network?</a></p>\n<h4>适应效果</h4>\n<p>和 CSS 的 <code>object-fit</code> 一样， Flutter 的图片也支持配置 fit 效果，支持的样式效果和 CSS 大同小异。</p>\n<pre><code class=\"language-dart\">Image.network(\n  'https://example.com/cover.jpg?x-oss-process=image/interlace,1/resize,w_750',\n  fit: BoxFit.cover,\n)\n</code></pre>\n<p>关于图片的更多说明可以戳：<a href=\"https://book.flutterchina.club/chapter3/img_and_icon.html#_3-3-%E5%9B%BE%E7%89%87%E5%8F%8Aicon\">图片及ICON</a></p>\n<h3>设置圆角</h3>\n<p>这个一定要点名！笑死，一个设置圆角的问题被浏览了 20 多万次…</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2022/01/20220129164221.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"209k 的浏览量…\"></p>\n<p>具体戳：<a href=\"https://stackoverflow.com/questions/58350235/add-border-to-a-container-with-borderradius-in-flutter\">Add border to a Container with borderRadius in Flutter</a></p>\n<h3>静态资源</h3>\n<p>Flutter 也有类似于 Vue 的 public 文件夹，存放一些静态资源，但是这里的路径有个坑，反复查了很多遍 <a href=\"https://docs.flutter.dev/development/ui/assets-and-images\">Adding assets and images</a> 文档都没有说引入的时候文件是要放在哪里，从哪里引入（ Vue 就有明确的说明 public 下的资源是从根目录读取），所以花了很多时间在调试路径的问题。</p>\n<p>不过还好机智的打印了一波路径和看请求，最终还是跑通了。</p>\n<p>首先需要去项目根目录下的 <code>pubspec.yaml</code> 文件里配置 <code>assets</code> 字段的数据：</p>\n<pre><code class=\"language-yaml\">flutter:\n  # To add assets to your application, add an assets section, like this:\n  assets:\n    - assets/mock/\n</code></pre>\n<p>这里的路径注意了！ <code>assets/mock/</code> 代表着我把 <code>mock</code> 文件夹放在了项目根目录下的 <code>assets</code> 文件夹里，为什么不是别的地方？</p>\n<p>因为经过不断打印错误的路径，发现 Flutter 的静态资源真的是从 <code>/assets/</code> 开始的，不是根目录，也不是基于当前文件去写相对地址。</p>\n<p>注释里的 <code>like this</code> 真的就是要跟他一样从 assets 开始配置，而不是 YAML 语法格式相同就好…也就是我这里的 JSON 文件的路径是类似：</p>\n<pre><code class=\"language-bash\">http://localhost:52128/assets/mock/list.json\n</code></pre>\n<p>这样在 Dart 文件里就可以直接省略掉 assets 开头：</p>\n<pre><code class=\"language-dart\">await DefaultAssetBundle.of(context).loadString('mock/list.json');\n</code></pre>\n<p>否则放别的地方你还要一直 <code>../</code> 之类的去写更复杂的相对路径。</p>\n<h3>解析 JSON</h3>\n<p>因为要 Mock 一些数据，所以写了几个 JSON 文件作为静态资产去导入，有几个需要注意的：</p>\n<pre><code class=\"language-dart\">// 确保导入了这个库\nimport 'dart:convert';\n</code></pre>\n<p>然后才可以使用 <code>jsonDecode()</code> 或者 <code>json.decode()</code> 去解析 JSON 内容。</p>\n<p>参考资料：<a href=\"https://stackoverflow.com/questions/51601519/how-to-decode-json-in-flutter/51601542#51601542\">How to decode JSON in Flutter?</a></p>\n<h3>构建异步部件</h3>\n<p>APP 肯定离不开网络请求，包括 Mock 的 JSON 数据，都是请求回来的，在这里折腾了很长时间才解决，倒不是文档看不懂，而是因为 VSCode 的 Dart 代码补全和类型补全帮我搞了几个麻烦的问题… 所以在没有绝对把握之前，还是先看文档，再去各种补全代码才是王道。</p>\n<p>直接贴上相关的文章吧。</p>\n<p>点击阅读：<a href=\"https://book.flutterchina.club/chapter1/dart.html#_1-4-4-%E5%BC%82%E6%AD%A5%E6%94%AF%E6%8C%81\">Dart 的异步支持</a></p>\n<p>点击阅读：<a href=\"https://book.flutterchina.club/chapter7/futurebuilder_and_streambuilder.html#_7-6-1-futurebuilder\">Flutter 异步 UI 更新</a></p>\n<p>点击阅读：<a href=\"https://flutterigniter.com/build-widget-with-async-method-call/\">How to Build Widgets with an Async Method Call</a></p>\n"
}