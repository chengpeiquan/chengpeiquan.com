{
  "title": "git-commit-analytics 分析Git Commit记录生成工作日报",
  "desc": "一个可以分析你的 Git 仓库 commit 记录的工具。它可以帮你生成一份工作日报 / 周报，或者你需要的更长时间范围的工作报告。",
  "keywords": "git log,git commit analytics,git report,git commit report,git log report",
  "date": "2022-01-03 00:00:00",
  "cover": "http://cdn.chengpeiquan.com/img/2022/01/20220103234230.jpg?x-oss-process=image/interlace,1",
  "categories": [
    "tech"
  ],
  "id": "git-commit-analytics",
  "type": "article",
  "author": {
    "name": "chengpeiquan",
    "email": "chengpeiquan@chengpeiquan.com",
    "link": "https://chengpeiquan.com"
  },
  "shortDate": "2022-01-03",
  "content": "<p>[[toc]]</p>\n<p>一个可以分析你的 Git 仓库 commit 记录的工具。它可以帮你生成一份工作日报 / 周报，或者你需要的更长时间范围的工作报告。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2022/01/20220103021254.gif\" alt=\"git-commit-analytics\"></p>\n<h2>客户端下载</h2>\n<p>这是一个客户端工具，所以你需要下载程序去使用它，点击 <a href=\"https://github.com/analyticsjs/git-commit-analytics/releases/latest\">最新版本</a> 去下载客户端。</p>\n<h2>更新记录</h2>\n<p>你可以查看 <a href=\"https://github.com/analyticsjs/git-commit-analytics/blob/main/CHANGELOG.md\">更新记录</a> 去了解每个版本的更新内容。</p>\n<h2>使用说明</h2>\n<p>创建并填写你的配置文件，然后运行程序，即可获得你的工作报告。</p>\n<h2>配置文件</h2>\n<p>你需要在与程序相同的文件夹下，创建一个名为 <code>config.json</code> 的文件，并写入以下格式的内容。</p>\n<pre><code class=\"language-json\">{\n  &quot;lang&quot;: &quot;en&quot;,\n  &quot;authors&quot;: [\n    &quot;chengpeiquan&quot;\n  ],\n  &quot;dateRange&quot;: [\n    &quot;2021-12-01&quot;,\n    &quot;2022-01-31&quot;\n  ],\n  &quot;repos&quot;: [\n    &quot;D:\\\\Git\\\\git-commit-analytics&quot;\n  ],\n  &quot;format&quot;: {\n    &quot;git-commit-analytics&quot;: &quot;Git Commit Analytics&quot;\n  },\n  &quot;includes&quot;: [\n    &quot;feat&quot;,\n    &quot;fix&quot;,\n    &quot;docs&quot;,\n    &quot;style&quot;,\n    &quot;refactor&quot;,\n    &quot;test&quot;,\n    &quot;chore&quot;\n  ],\n  &quot;excludes&quot;: [\n    &quot;typo&quot;,\n    &quot;backup&quot;,\n    &quot;progress&quot;\n  ]\n}\n</code></pre>\n<p>配置项说明如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">key</th>\n<th style=\"text-align:center\">type</th>\n<th style=\"text-align:left\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">lang</td>\n<td style=\"text-align:center\">string</td>\n<td style=\"text-align:left\">设置软件的默认语言，支持 <code>en</code> （英语）和 <code>zh</code> （简体中文）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">authors</td>\n<td style=\"text-align:center\">string[]</td>\n<td style=\"text-align:left\">筛选 commit 的作者名称，支持多个作者名称，用于你在不同的仓库可能有不同的名字。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dateRange</td>\n<td style=\"text-align:center\">[string, string]</td>\n<td style=\"text-align:left\">填写 [开始日期， 结束日期] ， 支持合法的时间格式，会从开始日期的 <code>00:00:00</code> 统计到截止日期的 <code>23:59:59</code> 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">repos</td>\n<td style=\"text-align:center\">string[]</td>\n<td style=\"text-align:left\">你电脑里的 Git 仓库文件夹，需要提前切换到你要统计的分支。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">format</td>\n<td style=\"text-align:center\">{ [key: string]: string }</td>\n<td style=\"text-align:left\">格式化你的文件夹名称为项目名。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">includes</td>\n<td style=\"text-align:center\">string[]</td>\n<td style=\"text-align:left\">要纳入统计的 commit message 前缀。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">excludes</td>\n<td style=\"text-align:center\">string[]</td>\n<td style=\"text-align:left\">在统计出来的结果里，排除掉包含了这些关键词的 commit message 。</td>\n</tr>\n</tbody>\n</table>\n<p>Among them, <code>authors</code> / <code>includes</code> / <code>excludes</code> will be created as regular expressions to match data.</p>\n<p>其中，<code>authors</code> / <code>includes</code> / <code>excludes</code> 会创建为正则表达式去匹配数据。</p>\n<h2>工作报告</h2>\n<p>The report file will be generated in <code>markdown</code> syntax (probably the most common format for developer?) and saved as a file in <code>.txt</code> format (probably the most compatible format?).</p>\n<p>报告文件会以 <code>markdown</code> 语法生成（可能是对程序员最通用的格式？），并以 <code>.txt</code> 格式的文件保存（可能是兼容性最好的格式？）。</p>\n<p>The project name will be classified as the second-level title, and 7 types of commit prefixes will be classified as the third-level title:</p>\n<p>会以项目名称作为二级标题归类，以 7 个类型的 commit 前缀作为三级标题归类：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">type</th>\n<th style=\"text-align:center\">description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">feat</td>\n<td style=\"text-align:center\">功能开发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fix</td>\n<td style=\"text-align:center\">BUG修复</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">docs</td>\n<td style=\"text-align:center\">完善文档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">style</td>\n<td style=\"text-align:center\">优化样式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">refactor</td>\n<td style=\"text-align:center\">代码重构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">test</td>\n<td style=\"text-align:center\">测试用例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">chore</td>\n<td style=\"text-align:center\">其他优化</td>\n</tr>\n</tbody>\n</table>\n<p>你可以点击 <a href=\"https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\">Commit message 和 Change log 编写指南</a> 学习如何规范化提交 Git Commit 。</p>\n"
}