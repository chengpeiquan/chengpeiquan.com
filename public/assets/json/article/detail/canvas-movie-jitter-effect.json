{
  "title": "电影故障抖动视觉效果实现：对大话手游愚人节专题的探究",
  "desc": "前几天愚人节的时候，大话手游官网上了一个专题，里面很多图片位置都使用了一个类似电影那种画面抖动的效果（目前只剩下一个slogan了，其他都下线了），很好奇是怎么实现的，于是扒了一下页面的源码，了解了一些实现思路，整理一下以后可能会用到。",
  "keywords": "抖屏效果",
  "date": "2020-04-21 07:47:00",
  "cover": "http://cdn.chengpeiquan.com/img/2020/04/1.jpg?x-oss-process=image/interlace,1",
  "categories": [
    "tech"
  ],
  "repo": "https://github.com/chengpeiquan/canvas-movie-jitter-effect",
  "id": "canvas-movie-jitter-effect",
  "type": "article",
  "author": {
    "name": "chengpeiquan",
    "email": "chengpeiquan@chengpeiquan.com",
    "link": "https://chengpeiquan.com"
  },
  "shortDate": "2020-04-21",
  "content": "<p>[[toc]]</p>\n<p>前几天愚人节的时候，大话手游官网上了一个专题（<a href=\"https://dhxy.163.com/2020/gsq/\">专题地址</a>），里面很多图片位置都使用了一个类似电影那种画面抖动的效果（目前只剩下一个 slogan 了，其他都下线了），很好奇是怎么实现的，于是扒了一下页面的源码，了解了一些实现思路，整理一下以后可能会用到。</p>\n<h2>效果</h2>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2020/04/1.gif\" alt=\"\"></p>\n<h2>起因</h2>\n<p>其实这个需求如果是直接给你做，你能不能马上有思路去做出来呢？相信大部分人都会有，那我为啥还要去看他们怎么实现的呢？</p>\n<p>想做这件事的原因，主要是：</p>\n<p>1、想知道对方是怎么实现的，那个抖动的特效，是有素材还是直接前端处理出来的，是不是在自己的预料之中。</p>\n<p>2、自己虽然能马上想到一些实现方案，但还是想看看是否有更优秀的解决办法，可以偷师学习！</p>\n<p>3、看看这个效果的素材是怎么处理的，以后遇到类似的需求，我是不是可以把一些锅甩给设计师？</p>\n<h2>思路</h2>\n<p>在看它是怎么实现之前，先凭经验猜测了一下，有多少种可能实现的方式：gif 动图、视频、flash、逐帧动画、图片切换、背景图切换、svg、canvas…（前端牛逼啊！！！！）</p>\n<p>当然每种方法的实现成本不一样，对应的体验和性能也不一样，思路有了，那么来验证一下官网是怎么做的。</p>\n<h2>探路</h2>\n<p>我开始以为是用的视频，因为按网易游戏以往的尿性来说，营销页面上的动态类主视觉基本都是用视频来实现的…那么要怎么看实现方法呢？当然是看 DOM 啊！</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2020/04/1-1.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"\"></p>\n<p>所以，用的是 canvas，那就有趣了！还好不是视频，直接弄个视频引入的话也就没这篇文章什么事了…</p>\n<p>canvas 的动画效果，都是一帧一帧的定时走出来的，这说明素材是来自设计师之手，不一定是前端直接处理的。</p>\n<p>接下来就找素材了，这种效果的素材，基本上都是图片，找图片的过程就比较简单了，作为主视觉上这么大的 slogan，结合刚刚查看 DOM 的时候，你发现那个地方的 className 就叫 slogan，那么对应的素材命名，肯定也跟 slogan 有关，单刀直入切到 img，搜索 slogan 关键词，全都出来了。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2020/04/2.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"\"></p>\n<p>可以看出他们是把整个动画过程的每一帧，都处理了一张图片素材，我们先把素材弄下来。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2020/04/3.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"\"></p>\n<p>一共有 30 帧，30 张一样尺寸的素材，现在素材有了，接下来就可以开始尝试效果复原。</p>\n<h2>实现</h2>\n<p>实现方案我上面说了，那就一个方案一个方案来看怎么实现，完整的在线 demo 在文末有地址。</p>\n<p>方案根据推荐度从低到高说起吧，实现难度基本上也是从低到高这样…</p>\n<h3>方案一：使用 gif 动图</h3>\n<p>先从最容易想到的方案说起吧，动图从制作成本来说是最省事的…只需要一个 img 标签就可以导进来了。</p>\n<p>【推荐】★★★☆☆</p>\n<p>【优点】简单，直接导个 gif 引入就完事，纯 html。</p>\n<p>【弊端】一般来说动图都会比较大，像 demo 里面只有一个 slogan 动图都去到了 866KB，太多的 gif 对页面的渲染速度有影响，用户体验不是最佳。</p>\n<pre><code class=\"language-javascript\">// html\n&lt;section class=&quot;section section-01&quot;&gt;\n  &lt;div class=&quot;img&quot;&gt;\n    &lt;img src=&quot;img/slogan.gif&quot;&gt;\n  &lt;/div&gt;\n&lt;/section&gt;\n</code></pre>\n<h3>方案二：切换图片地址</h3>\n<p>结合我们的素材，已经是处理好一帧一帧这样的过渡状态，那通过定时切换的效果，把他们按指定的时间和顺序切下去，也可以达到想要的效果。</p>\n<p>【推荐】★★☆☆☆</p>\n<p>【优点】简单，批量导出每一帧的 png 素材出来，定时替换图片的地址就完事（而且每一帧的素材都不会很大）。</p>\n<p>【弊端】需要频繁的操作 DOM，性能方面开销太大。</p>\n<pre><code class=\"language-javascript\">// html\n&lt;section class=&quot;section section-02&quot;&gt;\n  &lt;div class=&quot;img&quot;&gt;\n    &lt;img src=&quot;img/0.png&quot;&gt;\n  &lt;/div&gt;\n&lt;/section&gt;\n\n// js\n&lt;script type=&quot;text/javascript&quot;&gt;\n  const slogan = {\n    index: 0,\n    indexMax: 29,\n    time: 0,\n    dom: document.querySelector('.section-02 .img img'),\n    auto(speed){\n      let change = setInterval( () =&gt; {\n        // 动态调整图片帧显示\n        this.index &lt; this.indexMax ? this.index++ : this.index = 0;\n        this.dom.setAttribute('src', `img/${this.index}.png`);\n\n        // 每运行10次动画周期后销毁定时器，进行垃圾回收后再重新创建\n        this.time += speed;\n        if ( this.time &gt; this.indexMax * speed * 10) {\n          clearInterval(change);\n          change = null;\n          this.time = 0;\n          this.auto(speed);\n        }\n      }, speed);\n    }\n  }\n  slogan.auto(100);\n&lt;/script&gt;\n</code></pre>\n<h3>方案三：使用定时器切换背景图</h3>\n<p>【推荐】★★☆☆☆</p>\n<p>和方法二比较类似，只不过方法二是切换图片的 src，这里是切换 div 的样式，来达到换背景图的效果，优缺点说起来差不多。</p>\n<pre><code class=\"language-javascript\">// html\n&lt;section class=&quot;section section-03&quot;&gt;\n  &lt;div class=&quot;img bg&quot;&gt;&lt;/div&gt;\n&lt;/section&gt;\n\n// js\n&lt;script type=&quot;text/javascript&quot;&gt;\n  const sloganBg = {\n    index: 0,\n    indexMax: 29,\n    time: 0,\n    dom: document.querySelector('.section-03 .bg'),\n    auto(speed){\n      let change = setInterval( () =&gt; {\n        // 先移除上一帧的样式\n        this.dom.classList.remove(`bg-${this.index}`);\n\n        // 动态调整图片帧显示\n        this.index &lt; this.indexMax ? this.index++ : this.index = 0;\n        this.dom.classList.add(`bg-${this.index}`);\n\n        // 每运行10次动画周期后销毁定时器，进行垃圾回收后再重新创建\n        this.time += speed;\n        if ( this.time &gt; this.indexMax * speed * 10) {\n          clearInterval(change);\n          change = null;\n          this.time = 0;\n          this.auto(speed);\n        }\n      }, speed);\n    }\n  }\n  sloganBg.auto(100);\n&lt;/script&gt;\n</code></pre>\n<h3>方案四：使用 css3 逐帧动画</h3>\n<p>这个办法我是比较推荐的，实现成本并不高，写起来也很简单，体验又好。</p>\n<p>【推荐】★★★★☆</p>\n<p>【优点】简单，性能好，生成雪碧图，然后写个动画就完事。</p>\n<p>【弊端】部分古董设备不兼容，然后还有个问题，就是像 demo 里的这个素材，做成雪碧图贼他妈大（2.24MB，经过 tinypin 压缩后还是有 640KB），所以素材太大的情况下，最好不要用这个办法来搞。</p>\n<pre><code class=\"language-javascript\">// css\n&lt;style&gt;\n.go {\n  background-image: url('../img/sprites.png');\n  background-repeat: no-repeat;\n  animation: go steps(29, end) 3s infinite;\n}\n@keyframes go {\n  100% {\n    background-position: -0 -8729px;\n}\n&lt;/style&gt;\n\n// html\n&lt;section class=&quot;section section-04&quot;&gt;\n  &lt;div class=&quot;img bg go&quot;&gt;&lt;/div&gt;\n&lt;/section&gt;\n</code></pre>\n<p>实现思路：</p>\n<p>1、把所有的帧素材都合并为一张雪碧图，减少 http 请求，通过 animation 的背景图移动来实现视觉上的切换。</p>\n<p>2、这里运用到了 css3 的 animation-timing-function 的 steps，减少动画过程的代码编写</p>\n<p>3、结合第 2 点，因为 steps(number, position)的两个参数，第一个参数是设定有多少帧，第二个参数是设置动画的连续方式，所以根据 steps 的特性，我们生成的雪碧图需要无间隔并且连贯（我生成的就是从上到下排序下来的）</p>\n<p>这里推荐一个在线工具：<a href=\"https://www.toptal.com/developers/css/sprite-generator\">快速生成雪碧图</a></p>\n<p>还有关于里面的 steps 的用法，可以参考张老师的文章：<a href=\"https://www.zhangxinxu.com/wordpress/2018/06/css3-animation-steps-step-start-end/\">CSS3 animation 属性中的 steps 功能符深入介绍<br>\n</a></p>\n<h3>方案五：使用 canvas 逐帧绘制</h3>\n<p>终于来到一开头提到的 canvas 实现方案了。大话官网专题，我看了一下源代码，虽然代码被混淆，但还是可以看出，应该是通过引入插件来实现的。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2020/04/4.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"\"></p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2020/04/5.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"\"></p>\n<p>我们自己写其实也不难，因为知道了本身的实现套路（有逐帧素材，然后通过逐帧逐帧去绘制渲染出来），那就可以着手编写代码了。</p>\n<p>【推荐】★★★★★</p>\n<p>【优点】canvas 在性能上有天然的优势，对于高频率的更新渲染，用 canvas 重绘来实现效果更佳。</p>\n<p>【弊端】古董机对 canvas 的兼容性不太友好，如果可以抛弃这些古董用户的话，还是推荐这个方案！</p>\n<pre><code class=\"language-javascript\">// html\n&lt;section class=&quot;section section-05&quot;&gt;\n  &lt;div class=&quot;img&quot;&gt;&lt;/div&gt;\n&lt;/section&gt;\n\n// js\n&lt;script type=&quot;text/javascript&quot;&gt;\n  const sloganCanvas = {\n    index: 0,\n    indexMax: 29,\n    canvasWidth: 801,\n    canvasHeight: 301,\n    init(){\n      // 创建画布\n      const canvas = document.createElement('canvas');\n      canvas['width'] = this.canvasWidth;\n      canvas['height'] = this.canvasHeight;\n      document.querySelector('.section-05 .img').appendChild(canvas);\n\n      // 绘制内容\n      this.draw(this.index, canvas);\n    },\n    draw(index, canvas){\n      const context = canvas.getContext('2d');\n      const img = new Image();\n      img.onload = () =&gt; {\n        // 绘制前先清空画布\n        context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n        // 然后再绘制当前帧\n        context.drawImage(img, 0, 0, this.canvasWidth, this.canvasHeight);\n\n        // 画完更换下一帧的索引\n        this.index &lt; this.indexMax ? this.index++ : this.index = 0;\n        setTimeout( () =&gt; {\n          this.draw(this.index, canvas);\n        }, 100);\n      }\n      img.src = `img/${this.index}.png`;\n    }\n  }\n  sloganCanvas.init();\n&lt;/script&gt;\n</code></pre>\n<p>实现思路：</p>\n<p>1、动态创建 canvas，不要写死 canvas 的宽度和高度，实际需求如果要覆盖移动端，请动态计算尺寸后生成（官网专题是不做移动端了，移动端纯 jpg 图，感觉有点可惜）</p>\n<p>2、载入每帧的素材的时候，后续操作都要放在 img 的 onload 事件里执行</p>\n<p>3、每次进行绘制之前，记得先清空画布，否则会一直叠加绘制，就没法看了…</p>\n<p>4、通过 setTimeout 的延时回调控制无限循环动画的速度</p>\n<h2>最后</h2>\n<p>有几个方案我没有写，关于 svg 对这个需求的实现，暂时没有思路，我选择放弃，以后想到了再来补上！</p>\n<p>而视频和 flash 这些多媒体的展示方案，这里就略过了，处理成本对我来说还是比较高的，要配合设计的主视觉去输出优质的素材，我不太擅长…（所以这种方案可以考虑把活交给设计师…）</p>\n<p>最后放上 demo 地址：<a href=\"https://chengpeiquan.github.io/canvas-movie-jitter-effect/index.html\">电影抖屏效果 demo</a></p>\n"
}