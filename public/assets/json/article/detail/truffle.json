{
  "title": "Truffle初探和踩坑笔记",
  "desc": "能找到的教程都好老，记录一版踩坑笔记，后面遇到类似的问题可以快速处理。",
  "keywords": "truffle,trufflesuite,智能合约,DAPP",
  "date": "2021-10-12 06:32:20",
  "cover": "http://cdn.chengpeiquan.com/img/2021/10/20211012094643.jpg?x-oss-process=image/interlace,1",
  "categories": [
    "tech"
  ],
  "id": "truffle",
  "type": "article",
  "author": {
    "name": "chengpeiquan",
    "email": "chengpeiquan@chengpeiquan.com",
    "link": "https://chengpeiquan.com"
  },
  "shortDate": "2021-10-12",
  "content": "<p>[[toc]]</p>\n<p>一个刚入门的 Truffle DEMO 和学习笔记，能找到的教程都好老，记录一版踩坑笔记，后面遇到类似的问题可以快速处理，啃的 Truffle 的英文文档，国内的翻译文档都太老了，都快速找到的停留在 2019 年之前，实在没法看。</p>\n<p>官方文档：<a href=\"https://www.trufflesuite.com/docs/truffle/overview\">Truffle Document</a></p>\n<p>模板库：<a href=\"https://www.trufflesuite.com/boxes\">Truffle Boxes</a></p>\n<p>Truffle 的模板库有点类似于 GitHub 仓库的 template 功能，你可以根据你的技术选型，在初始化 Truffle 项目的时候，选择合适的模板创建项目，比如基于 React / Vue / Vyper 等等，再去做调整。</p>\n<h2>了解概念</h2>\n<p>开始搞事情之前，先了解几个新概念，我估计大部分人应该还是跟我一样，刚接触的时候都是一脸懵逼。</p>\n<p>Truffle 是一个开发智能合约的工具，也可以用来做 DAPP ，这两个概念，引用别的地方的说明大概了解一下：</p>\n<blockquote>\n<p>智能合约 —— 可以简单理解为脚本，用来处理各种业务逻辑</p>\n</blockquote>\n<blockquote>\n<p>DAPP —— 包含完整的智能合约 + 用户UI交互界面，载体可以是 Android APP/ iOS APP/ WEB APP ，只要主要逻辑和数据在区块链上就可以</p>\n</blockquote>\n<p>至于怎么把数据和界面连接起来，后面了解了再补充，先记录一下前期的一些学习体验问题。</p>\n<p>目前最知名的区块链游戏体验：<a href=\"https://dappradar.com/ethereum/games/axie-infinity\">Axie Infinity</a></p>\n<h2>安装问题</h2>\n<p>需要全局安装，但理论上第一次安装会得到好几屏幕的报错信息…</p>\n<pre><code class=\"language-bash\"># 全局安装 Truffle\nyarn global add truffle\n</code></pre>\n<p>因为在 Node 基础上还需要 Python 和 C++ 编译器…</p>\n<p>不过其实我之前都有装过，看了报错都是 gyp 相关的，更新了 gyp 就可以了。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">依赖环境</th>\n<th style=\"text-align:center\">下载地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">C++</td>\n<td style=\"text-align:center\"><a href=\"https://visualstudio.microsoft.com/zh-hans/\">Visual Studio</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Python</td>\n<td style=\"text-align:center\"><a href=\"https://github.com/nodejs/node-gyp\">node-gyp</a></td>\n</tr>\n</tbody>\n</table>\n<p>然后再次全局安装 Truffle 就可以了，如果可以正确查询到版本号，说明安装成功了。</p>\n<pre><code class=\"language-bash\"># 查询当前的 Truffle 版本\ntruffle -v\n</code></pre>\n<h2>VS Code 配置</h2>\n<p>点击安装 <a href=\"https://marketplace.visualstudio.com/items?itemName=JuanBlanco.solidity\">solidity</a> 语言高亮和语法补全功能支持。</p>\n<h2>项目初始化</h2>\n<p>直接执行初始化命令 <code>truffle init</code> 只得到了一个空项目，前期建议先按照官方文档 <a href=\"https://www.trufflesuite.com/docs/truffle/quickstart\">Quick Start</a> 里面的建议，先用官方推荐的 <a href=\"https://www.trufflesuite.com/boxes/metacoin\">MetaCoin</a> 项目模板来学习：</p>\n<pre><code class=\"language-bash\"># 创建并进入 DEMO 项目文件夹\nmkdir truffle-demo &amp;&amp; cd truffle-demo\n\n# 通过模板创建一个 Truffle 项目\ntruffle unbox metacoin\n</code></pre>\n<p>初始化后的项目结构：</p>\n<pre><code class=\"language-bash\">truffle-demo\n│\n│ # Solidity 合约目录\n├─contracts\n│\n│ # 部署脚本目录\n├─migrations\n│\n│ # 测试脚本目录\n├─test\n│\n│ # Truffle 配置文件\n└─truffle-config.js\n</code></pre>\n<h2>配置文件</h2>\n<p>和其他前端项目一样，都有一个统一的项目配置文件 <code>truffle-config.js</code> ，这个看文档按需要的配就可以了。</p>\n<p><a href=\"https://www.trufflesuite.com/docs/truffle/reference/configuration\">选项文档</a></p>\n<h2>常用命令</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">命令</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">truffle compile</td>\n<td style=\"text-align:center\">编译成 JSON 文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">truffle test</td>\n<td style=\"text-align:center\">运行 JavaScript 和 Solidity 测试</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">truffle develop</td>\n<td style=\"text-align:center\">调试个人区块链（命令行）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">truffle console</td>\n<td style=\"text-align:center\">调试个人区块链（GUI）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">truffle publish</td>\n<td style=\"text-align:center\">将包发布到以太坊包注册表</td>\n</tr>\n</tbody>\n</table>\n<p>完整命令参见：<a href=\"https://www.trufflesuite.com/docs/truffle/reference/truffle-commands\">Commands</a></p>\n<h2>使用 GUI 调试</h2>\n<p>develop 命令默认基于命令行，可以下载 <a href=\"https://github.com/trufflesuite/ganache-ui/releases\">Ganache</a> 通过 GUI 来调试。</p>\n<p>下载和安装后，需要修改项目的 <code>truffle-config.js</code> 文件：</p>\n<pre><code class=\"language-js\">module.exports = {\n  // ...\n  networks: {\n    development: {\n      host: '127.0.0.1',\n      port: 7545,\n      network_id: '*',\n    },\n  },\n  // ...\n};\n</code></pre>\n<p>然后启动 Ganache ，点击 &quot;Quick Start&quot; ，就可以运行个人区块链了。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2021/10/20211012095732.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"Ganache UI\"></p>\n<p>在命令行运行 <code>truffle console</code> 可以进入 GUI 情况下的调试命令状态（等价于命令行情况的 <code>truffle develop</code>）。</p>\n<h2>解决单元测试异常</h2>\n<p>在实际体验中发现，如果你在刚刚的 <a href=\"#%E4%BD%BF%E7%94%A8-gui-%E8%B0%83%E8%AF%95\">使用 GUI 调试</a> 环节直接配置了 networks 之后，会发现无法再执行 <code>truffle test</code> 了（当然，执行 <code>truffle develop</code> 是没问题的，因为它等价于使用 Ganache）…</p>\n<p>控制台会出现如下报错：</p>\n<pre><code class=\"language-bash\">λ truffle test\n&gt; Something went wrong while attempting to connect to the network at http://127.0.0.1:7545. Check your network configuration.\n\nCould not connect to your Ethereum client with the following parameters:\n    - host       &gt; 127.0.0.1\n    - port       &gt; 7545\n    - network_id &gt; *\nPlease check that your Ethereum client:\n    - is running\n    - is accepting RPC connections (i.e., &quot;--rpc&quot; or &quot;--http&quot; option is used in geth)\n    - is accessible over the network\n    - is properly configured in your Truffle configuration file (truffle-config.js)\n\nTruffle v5.4.14 (core: 5.4.14)\nNode v16.1.0\n</code></pre>\n<p>然后你把 <code>truffle-config.js</code> 里的 <code>networks</code> 注释掉，会发现其实又可以了，就很迷……</p>\n<h3>解决方法一</h3>\n<p>在 GitHub 的 Issue 区查了也有人遇到一样的情况，所以很快有了这个解决方法：</p>\n<ol>\n<li>重新启动 Ganache ，点击 &quot;New Workspace&quot; ，进入配置：</li>\n</ol>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2021/11/20211108105128.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"配置 Ganache 的工作区\"></p>\n<ol start=\"2\">\n<li>点击 “Add Project” ，进入到你的 truffle 项目文件夹，把项目的 <code>truffle-config.js</code> 添加到工作区，然后点击右上角的 “Start” 或者 “Restart” 启动运行。</li>\n</ol>\n<p>在启动 Ganache 的时候，运行 <code>truffle test</code> 就不会出现网络问题了（下次启动 GUI 的时候，选择工作区的配置启动连接，就可以对应的给你的项目开启测试支持了）。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2021/11/20211108142643.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"后续选择工作区来启动\"></p>\n<h3>解决方法二</h3>\n<p>由于方法一要基于 GUI 才能解决这个问题，那如果以后跑在服务器上面，没有 GUI 可以用咋办？观察了一下控制台，在没有配置 <code>networks</code> 选项的时候，执行测试命令时，使用的网络是不一样的：</p>\n<p>配置 networks 前：</p>\n<pre><code class=\"language-bash\">λ truffle test\nUsing network 'test'.\n</code></pre>\n<p>配置 networks 后：</p>\n<pre><code class=\"language-bash\">λ truffle test\nUsing network 'development'.\n</code></pre>\n<p>为什么会出现这个情况？官方文档也没有说明，得去看一下仓库相关的代码了，看看有没有门路…</p>\n<p>按照一般的大型开源项目的习惯，在 GitHub 仓库里找到了 commands 相关的文件，其中 test 命令是位于 <a href=\"https://github.com/trufflesuite/truffle/blob/develop/packages/core/lib/commands/test/index.js#L141-L215\">truffle/packages/core/lib/commands/test/index.js</a> ，这里可以看到测试命令的运行规则是：</p>\n<ol>\n<li>\n<p>有配置了 <code>networks.development</code> 就优先按这个配置启动测试工作</p>\n</li>\n<li>\n<p>如果没有的话，会创建一个 <code>networks.test</code> 的选项，并先通过 <code>Develop.connectOrStart</code> 启动连接开发环境再启动测试工作</p>\n</li>\n</ol>\n<p>所以我们另外一个解决方式就是：</p>\n<ol>\n<li>先开启 develop 环境</li>\n</ol>\n<pre><code class=\"language-bash\">λ truffle develop\nTruffle Develop started at http://127.0.0.1:9545/\n</code></pre>\n<ol start=\"2\">\n<li>然后在 develop 环境下运行测试命令（此时不需要再补 truffle 前缀了），就可以正常运行了</li>\n</ol>\n<pre><code class=\"language-bash\">truffle(develop)&gt; test\nUsing network 'develop'.\n\nCompiling your contracts...\n===========================\n</code></pre>\n<h2>项目构建</h2>\n<p>虽然直接执行 <code>truffle build</code> 可以完成一个最基本的构建行为。</p>\n<h2>其他常见问题</h2>\n<p>一些刚上手可能遇到的问题和解决方案。</p>\n<p>由于官方 DEMO 的上次实际更新是 1 年前（最新更新只是无关痛痒的注释修改），所以为了可持续发展，Solidity 的语言版本始终选择较新的 0.8+ ，而不是默认的 0.5+ ，默认版本可落后太多了。</p>\n<h3>版本号报错</h3>\n<p>初始化后，打开 <code>.sol</code> 文件时， VS Code 会报下面这样的问题：</p>\n<pre><code class=\"language-bash\">Source file requires different compiler version (current compiler is 0.8.6+commit.11564f7e.Emscripten.clang) - note that nightly builds are considered to be strictly less than the released version\n</code></pre>\n<p>因为模板项目的版本可能比较老，跟不上当前的编译器版本，所以根据提示的版本号，手动更新到对应版本就可以了，也可以在 <a href=\"https://github.com/ethereum/solidity/releases\">Solidity</a> 的 GitHub 仓库查看最新版本号。</p>\n<pre><code class=\"language-diff\">- pragma solidity &gt;=0.4.25 &lt;0.7.0;\n+ pragma solidity &gt;=0.4.25 &lt;=0.8.6;\n</code></pre>\n<p>或者是下面这种（个人比较推荐）：</p>\n<pre><code class=\"language-diff\">- pragma solidity &gt;=0.4.25 &lt;0.7.0;\n+ pragma solidity ^0.8.6;\n</code></pre>\n<p>这个是 Solidity 语言的强制要求，为了避免智能合约在编译过程中出现兼容问题，在 soliditylang 的官方文档有说明 <a href=\"https://docs.soliditylang.org/en/develop/layout-of-source-files.html#version-pragma\">version-pragma</a></p>\n<p>具体的版本管理方式，比如 <code>&gt;=</code> 也可以用 <code>^</code> 符号代替版本兼容范围，和 Node 的 <code>package.json</code> 的版本管理是一样的。</p>\n<h3>构造函数的可见性被忽略</h3>\n<p>这个报错是在上面那个版本号报错问题，解决了之后出现的：</p>\n<pre><code class=\"language-bash\">Visibility for constructor is ignored. If you want the contract to be non-deployable, making it &quot;abstract&quot; is sufficient.\n</code></pre>\n<p>这个是 Solidity 语言在 v0.7.0 的更新（<a href=\"https://docs.soliditylang.org/en/v0.7.0/070-breaking-changes.html#functions-and-events\">CHANGLOG</a>）</p>\n<p>由于模板原本是 <code>&lt;0.7.0</code> ，使用的是低于 0.7 版本，所以没有出现这个报错，我们改成了 <code>^0.8.6</code> ，所以出现了这个问题。</p>\n<p>只需要移除掉 <code>constructor</code> 的可见性就可以了：</p>\n<pre><code class=\"language-diff\">contract Migrations {\n  // ...\n\n-  constructor() public {\n+  constructor() {\n    // ...\n  }\n\n  // ...\n}\n</code></pre>\n<h3>缺少构造函数可见性</h3>\n<p>接上一个问题，移除了 <code>constructor</code> 的可见性，又会报缺少可见性的问题（韩红听了都想打人.jpg?x-oss-process=image/interlace,1/resize,w_750）：</p>\n<pre><code class=\"language-bash\">SyntaxError: No visibility specified. Did you intend to add &quot;public&quot;?\n</code></pre>\n<p>这是因为编译器使用的默认版本比较低（0.5.16），而我们用的是 0.8+ 了，版本之间不兼容，所以导致编译出错。</p>\n<p>可以在 <code>truffle-config</code> 里统一修改，指定编译版本范围和我们的文件里保持一致。</p>\n<pre><code class=\"language-js\">module.exports = {\n  compilers: {\n    solc: {\n      version: '^0.8.6',\n    },\n  },\n};\n</code></pre>\n<h3>导入依赖报错</h3>\n<p>比如在测试文件里，会导入 Truffle 自身的依赖：</p>\n<pre><code class=\"language-solidity\">import &quot;truffle/Assert.sol&quot;;\nimport &quot;truffle/DeployedAddresses.sol&quot;;\n</code></pre>\n<p>此时执行测试命令是成功的，但是在 VS Code 会报诸如下面的错误：</p>\n<pre><code class=\"language-bash\">Source &quot;truffle/Assert.sol&quot; not found: File import callback not supported\n</code></pre>\n<p>因为出现的问题只存在于 VS Code ，所以可以确认是语法插件的问题，后面在插件仓库的 Issue  <a href=\"https://github.com/juanfranblanco/vscode-solidity/issues/193\">#193</a> 找到了原因。</p>\n<p>不过好像当前无法解决，所以目前只能是人肉忽视，强迫症也没办法…</p>\n<p>功能不影响测试和编译，不是大问题。</p>\n"
}