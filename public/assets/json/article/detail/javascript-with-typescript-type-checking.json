{
  "title": "让你在编写 JavaScript 的时候也能享受 TypeScript 的类型检查",
  "desc": "现在前端没有几个不写 TypeScript 了吧，但是有时候还是不得不写 JS ，比如我最近写脚手架的时候，代码是直接跑在 Node Runtime 里，没有编译环节，所以用的依然还是 JavaScript 。然而，发现离开了类型限制之后，感觉要写很多注释才能保证一个项目的完整性，就很烦…",
  "keywords": "javascript type,js type,javascript with typescript",
  "date": "2022-01-19 22:42:00",
  "cover": "http://cdn.chengpeiquan.com/img/2021/11/20220119155350.jpg?x-oss-process=image/interlace,1",
  "categories": [
    "tech"
  ],
  "id": "javascript-with-typescript-type-checking",
  "type": "article",
  "author": {
    "name": "chengpeiquan",
    "email": "chengpeiquan@chengpeiquan.com",
    "link": "https://chengpeiquan.com"
  },
  "shortDate": "2022-01-19",
  "content": "<p>[[toc]]</p>\n<p>现在前端没有几个不写 TypeScript 了吧，但是有时候还是不得不写 JS ，比如我最近写脚手架的时候，代码是直接跑在 Node Runtime 里，没有编译环节，所以用的依然还是 JavaScript 。</p>\n<p>然而，发现离开了类型限制之后，感觉要写很多注释才能保证一个项目的完整性，就很烦…</p>\n<p>于是，翻了一下 TypeScript 官网，找到了一篇文章： <a href=\"https://www.typescriptlang.org/docs/handbook/intro-to-js-ts.html\">JS Projects Utilizing TypeScript</a></p>\n<p>大致意思就是在 VSCode 里，配合 ESLint 和 JSDoc 风格的注释，可以实现在 JavaScript 里享受 TypeScript 的类型检查机制，试了一下，还不错，虽然没有写 TS 那么爽，但确实比直接用 JS 写项目要爽。</p>\n<p>配合类型系统，可以节约大量注释的编写，并且一些相同参数格式的地方，导入对应的类型，无需一直重复说明。</p>\n<blockquote>\n<p>这篇文章我会默认你开启了 ESLint</p>\n</blockquote>\n<h2>准备工作</h2>\n<p>需要安装这个依赖，用来检查 JSDoc 语法。</p>\n<pre><code class=\"language-bash\">yarn add -D eslint-plugin-jsdoc\n</code></pre>\n<h2>配置 ESLint</h2>\n<p>打开你的 ESLint 配置文件，比如我的是 <code>.eslintrc.js</code> ，配置 JSDoc 规则支持，这里省略了其他的选项，根据你的项目配置其他的。</p>\n<pre><code class=\"language-js\">module.exports = {\n  // ...\n  extends: [\n    // 继承 JSDoc 的配置\n    'plugin:jsdoc/recommended',\n    // ...\n  ],\n  parserOptions: {\n    // 需要开启 module 支持\n    sourceType: 'module',\n    // ...\n  },\n  plugins: [\n    // 引入 JSDoc 插件\n    'jsdoc',\n    // ...\n  ],\n  // 这个是 JSDoc 的一个配置\n  settings: {\n    jsdoc: {\n      mode: 'typescript',\n    },\n  },\n}\n</code></pre>\n<h2>开启检查</h2>\n<p>要在 JavaScript 文件中开启检查，需要在 JS 文件最前面打上一句注释，这样就会以 TS 的标准来检查你的 JS 代码。</p>\n<pre><code class=\"language-js\">// @ts-check\n\nconst foo = () =&gt; {\n  // ...\n}\n</code></pre>\n<p>虽然就一句注释，但非常关键，如果缺少，后面的检查都不会生效。</p>\n<h2>忽略检查</h2>\n<p>如果有一些地方确实可以忽略检查的，可以通过 <code>ignore</code> 注释语句来跳过检查。</p>\n<pre><code class=\"language-js\">// @ts-check\n\n// @ts-ignore\nconst foo = () =&gt; {\n  // ...\n}\n</code></pre>\n<h2>检查配置</h2>\n<p>采用这种方式的检查机制，你可以参考 <code>tsconfig.json</code> 的配置，在你的项目根目录下创建一个 <code>jsconfig.json</code> 去管理的检查配置。</p>\n<p>可以在 TS 官网查看如何配置：<a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">What is a tsconfig.json</a> 。</p>\n<h2>定义类型</h2>\n<p>简单的类型定义可以通过普通注释实现：</p>\n<pre><code class=\"language-js\">/**\n * 打个招呼\n *\n * @param {string} name 对方的名字\n * @returns {string} 欢迎语句\n */\nconst greet = (name) =&gt; `Hello, ${name}!`\n</code></pre>\n<p>你在调用这个函数的时候，就可以通过 VSCode 的提示轻松了解它的入参、返回都是些什么格式要求。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2021/11/20220119153103.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"VSCode 提示\"></p>\n<p>如果你不按照要求传入对应的数据类型， ESLint 会给你提示报错，太爽了！！！</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2021/11/20220119155720.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"哈哈哈哈报错了！\"></p>\n<p>联合类型也是可以写在里面，还有像数组、对象的格式也支持。</p>\n<pre><code class=\"language-js\">/**\n * 打个招呼\n *\n * @param { { action: string; name: string } } option 选项\n *  action: 行为\n *  name: 对方的名字\n * @returns {string} 欢迎语句\n */\nconst greet = ({ action, name }) =&gt; `${action}, ${name}!`\n</code></pre>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2021/11/20220119153658.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"对象的注释也可以清晰提示\"></p>\n<p>关于如何编写注释来定义类型可以参考 TS 官网的这篇文章：<a href=\"https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html\">Type Checking JavaScript Files</a> 。</p>\n<h2>类型文件</h2>\n<p>当然上面是最简单的用法，实际上需要涉及到很多高级类型的用法，可以通过 <code>.d.ts</code> 文件来管理。</p>\n<p>首先梳理一下自己的目录，建立一个 <code>types</code> 文件夹和 <code>index.d.ts</code> 文件。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2021/11/20220119150609.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"目录结构\"></p>\n<p>里面的类型都需要导出：</p>\n<pre><code class=\"language-ts\">export interface Foo {\n  // ...\n}\n</code></pre>\n<p>然后在 JS 文件里，通过 <code>@typedef</code> 和 <code>import</code> 关键词来导入这个类型。</p>\n<pre><code class=\"language-js\">/**\n * 获取 Foo 列表\n *\n * @typedef { import('../types').Foo } Foo\n * @returns {Foo[]} 一个 Foo 类型的数组\n */\nconst getFooList = () =&gt; {\n  // ...\n}\n</code></pre>\n<p>关于如何在 JSDoc 里写接口可以参考这一篇文章的说明：<a href=\"https://goulet.dev/posts/how-to-write-ts-interfaces-in-jsdoc/\">How to Write TypeScript Interfaces in JSDoc Comments</a></p>\n<h2>相关阅读</h2>\n<p>更多的 JSDoc 语法可以查看 TS 官网的这一篇：<a href=\"https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html\">JSDoc Reference</a></p>\n<h2>使用感受</h2>\n<p>如果是小型项目，并且只跑在 Node 环境，这个方式还是很方便的。</p>\n<p>不过最近脚手架越写越有想法，打算做大，所以我打算重构成纯 TypeScript 了哈哈哈，多了一步打包环节，但是相对于维护代码，还是可以忍受的。</p>\n<p>所以如果稍微大型点的项目，还是老老实实写 TS 吧，这个只是用在一些简单的项目里，作为一个可选的参考方案。</p>\n"
}