{
  "title": "JSSDK开发思路 基于RollupJS的经验记录",
  "desc": "虽然Rollup的推出时间应该是比Webpack早，但之前类库的工作都是公司其他前端部门负责维护，还真的没有去接触过它，直到最近自己要负责开发一个用于新业务线的JSBridge和JSLibrary，才对它有了一定的了解。",
  "keywords": "rollup,rollupjs,rollup打包,rollup babel",
  "date": "2020-08-10 07:42:00",
  "cover": "http://cdn.chengpeiquan.com/img/2020/08/1.jpg?x-oss-process=image/interlace,1",
  "categories": [
    "tech"
  ],
  "id": "rollupjs",
  "type": "article",
  "author": {
    "name": "chengpeiquan",
    "email": "chengpeiquan@chengpeiquan.com",
    "link": "https://chengpeiquan.com"
  },
  "shortDate": "2020-08-10",
  "content": "<p>[[toc]]</p>\n<p>虽然 Rollup 的推出时间应该是比 Webpack 早，但之前类库的工作都是公司其他前端部门负责维护，还真的没有去接触过它，直到最近自己要负责开发一个用于新业务线的 JSBridge 和 JSLibrary，才对它有了一定的了解。</p>\n<p>起步还是建议先阅读一遍官网的介绍，以便对它有一个基本的了解。</p>\n<blockquote>\n<p>RollupJS 官网 <a href=\"https://www.rollupjs.com/\">https://www.rollupjs.com/</a></p>\n</blockquote>\n<p>但是官网的资料很多有坑（因为版本更新然后没有人更新官网资料导致……），所以如果全部按官网的指导走，是走不下去的，一堆问题。</p>\n<p>最明显的一个就是 babel，官网说明默认是 babel6，但如果直接从 npm 执行安装，默认安装 babel 则是 7+，配置起来完全不是一个世界的东西……</p>\n<p>包括搜到的很多博文也都是过期状态，无法参考，所以决定写个分享来汇总下这次遇到的问题和一些可复用的配置。</p>\n<p>注：以下大部分操作都是依赖于命令行操作，Windows 你可以用你熟悉的 <code>cmd</code> 或者 <code>powerShell</code> 或者我熟悉的 <code>cmder</code> ，macOS 可以用终端等等。</p>\n<h2>创建项目</h2>\n<p>Rollup 只是个工具，不是脚手架，所以没有自己的创建命令，需要走传统的项目生成方法去创建。</p>\n<pre><code class=\"language-js\">mkdir rollup-demo &amp;&amp; cd rollup-demo\n</code></pre>\n<h2>初始化项目</h2>\n<p>执行 <code>npm init</code> 命令，根据你的实际情况录入后回车，生成 package.json 文件。</p>\n<p>期间建议把入口文件设置为 <code>src/main.js</code> ，因为实际项目会有很多个分文件，包括你自己编写的 lib 文件、config 文件等等，统一放到 src 下面进行归类管理。</p>\n<p>然后打开 package，修改里面的 script 字段为：</p>\n<pre><code class=\"language-json\">&quot;scripts&quot;: {\n  &quot;build&quot;: &quot;rollup -c rollup.config.js&quot;\n}\n</code></pre>\n<p>至于为什么修改这个，放在后面说。</p>\n<h2>安装依赖</h2>\n<p>帮你合并一条命令一键安装，也可以一个个装，不过最终是都要装的。</p>\n<pre><code class=\"language-js\">npm install --save-dev rollup @rollup/plugin-node-resolve @rollup/plugin-babel @rollup/plugin-commonjs @rollup/plugin-json @rollup/plugin-alias rollup-plugin-terser rollup-plugin-banner @babel/core @babel/plugin-proposal-class-properties @babel/preset-env\n</code></pre>\n<p>以上的包都属于最基础的依赖，建议全部安装，各个包的说明如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">基础包名</th>\n<th style=\"text-align:left\">作用</th>\n<th style=\"text-align:left\">用途补充说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">rollup</td>\n<td style=\"text-align:left\">Rollup 的核心包</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@rollup/plugin-node-resolve</td>\n<td style=\"text-align:left\">Rollup 插件包，帮助 Rollup 识别 node_modules 的包</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@rollup/plugin-babel</td>\n<td style=\"text-align:left\">Rollup 插件包，自动化解决 babel 的转换问题</td>\n<td style=\"text-align:left\">你可以更爽的写 ES6 以上的新语法…</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@rollup/plugin-commonjs</td>\n<td style=\"text-align:left\">Rollup 插件包，可将 CommonJS 模块转换为 ES6</td>\n<td style=\"text-align:left\">大部分 npm 包都是 CommonJS，比如常用的 axios/qs 库，如果你项目里用到了他们，不引入这个插件的话会构建失败</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@rollup/plugin-json</td>\n<td style=\"text-align:left\">Rollup 插件包，可将.json 文件转换为 ES6 模块</td>\n<td style=\"text-align:left\">比如：作为类库当然要涉及到版本更新，版本号肯定不能各种地方都手写，这种情况下就可以从 package.json 读取</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@rollup/plugin-alias</td>\n<td style=\"text-align:left\">Rollup 插件包，配置路径别名</td>\n<td style=\"text-align:left\">alias 的作用大家都懂，开发环境必备</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rollup-plugin-terser</td>\n<td style=\"text-align:left\">Rollup 插件包，混淆压缩 js 代码</td>\n<td style=\"text-align:left\">打包发布必备</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rollup-plugin-banner</td>\n<td style=\"text-align:left\">Rollup 插件包，给打包后的文件添加注释</td>\n<td style=\"text-align:left\">一般可以添加开发者信息、版本号等信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@babel/core</td>\n<td style=\"text-align:left\">@rollup/plugin-babel 的依赖包，该插件基于 babel7</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@babel/plugin-proposal-class-properties</td>\n<td style=\"text-align:left\">@rollup/plugin-babel 的依赖包，该插件基于 babel7</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">@babel/preset-env</td>\n<td style=\"text-align:left\">@rollup/plugin-babel 的依赖包，该插件基于 babel7</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h2>配置文件</h2>\n<p>上面提到修改了 <code>package.json</code> 的 <code>script</code> 字段，修改的含义是告知 node 在执行 build 命令的时候，通过 rollup 命令去运行一个叫 <code>rollup.config.js</code> 的配置文件（-c 是--config 的缩写）。</p>\n<p>这个文件就是配置文件了，对工程化开发比较熟悉的同学都知道，webpack 对应有 <code>webpack.config.js</code>，Vue-CLI 对应有 <code>vue.config.js</code>，rollup 的这个配置文件功能也是如此，通过维护一份简单的配置，来实现我们个性化的打包目的。</p>\n<p>最基本的 <code>rollup.config.js</code> 的内容如下：</p>\n<pre><code class=\"language-js\">import resolve from '@rollup/plugin-node-resolve'\nimport babel from '@rollup/plugin-babel'\nimport commonjs from '@rollup/plugin-commonjs'\nimport json from '@rollup/plugin-json'\nimport alias from '@rollup/plugin-alias'\nimport { terser } from 'rollup-plugin-terser'\nimport banner from 'rollup-plugin-banner'\n\nconst path = require('path')\nconst resolveDir = (dir) =&gt; path.join(__dirname, dir)\n\nexport default {\n  input: 'src/main.js',\n  output: [\n    {\n      file: `demo/js/demo.js`,\n      format: 'umd',\n      name: 'demo',\n    },\n    {\n      file: `dist/${process.env.npm_package_version}/demo.min.js`,\n      format: 'umd',\n      name: 'demo',\n      plugins: [terser()],\n    },\n  ],\n  plugins: [\n    resolve({\n      browser: true,\n    }),\n    babel({\n      babelHelpers: 'bundled',\n    }),\n    commonjs(),\n    json(),\n    alias({\n      entries: [{ find: '@', replacement: resolveDir('src') }],\n    }),\n    banner(\n      `name: &lt;%= pkg.name %&gt;\\nversion: v&lt;%= pkg.version %&gt;\\nauthor: &lt;%= pkg.author %&gt;`\n    ),\n  ],\n}\n</code></pre>\n<p>这份配置的功能是，在执行了 <code>npm run build</code> 之后，会在 <code>dist</code> 文件夹里，生成一个 “版本号” 文件夹，版本号文件夹下是一个被压缩混淆了的版本。</p>\n<p>同时在 <code>demo</code> 的 js 文件夹下，会生成一个没有混淆的版本用于 demo 的开发调试。</p>\n<p>几个核心的配置选项说明：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">input</td>\n<td style=\"text-align:left\">入口文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">output</td>\n<td style=\"text-align:left\">出口文件，一个数组，支持打包多个版本（通常是一个完整版开发，一个混淆压缩上线）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">output.file</td>\n<td style=\"text-align:left\">出口的文件名，需要包含到文件夹里就把路径也写上，我里面的 process.env.npm_package_version 是以版本号为文件夹归类发布</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">output.format</td>\n<td style=\"text-align:left\">输出格式：amd=异步模块、cjs=CommonJS、es=ES 模块文件、iife=自动执行、umd=通用模块（包含 amd/cjs/iife 为一体）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"http://output.name\">output.name</a></td>\n<td style=\"text-align:left\">暴露的全局变量，可以通过 <a href=\"http://window.xxx\">window.xxx</a> 来访问你的类库，类似 window.jQuery 的作用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">output.plugins</td>\n<td style=\"text-align:left\">打包插件，目前我只配置了一个 terser 用于打包一个压缩版本发布</td>\n</tr>\n</tbody>\n</table>\n<p>完整的配置选项可以查阅官网资料：</p>\n<blockquote>\n<p>大选项列表 - Rollup.js <a href=\"https://www.rollupjs.com/guide/big-list-of-options/#%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BDcore-functionality\">https://www.rollupjs.com/guide/big-list-of-options/#核心功能core-functionality</a></p>\n</blockquote>\n<h2>编译打包</h2>\n<p>开发阶段你可以根据自己的习惯使用各种 npm 包、自己写的 <code>lib/module</code> 文件等等，但是最终都需要在 <code>main.js</code> 导出一个变量：</p>\n<pre><code class=\"language-js\">class Demo {\n  sayHi(name) {\n    console.log(`Hi, ${name}`)\n  }\n}\n\nconst demo = new Demo()\n\nexport default demo\n</code></pre>\n<p>这样使用的人就可以在引入你打包好的文件之后，通过这个变量去使用你的类库里的方法，觉得有点绕？看看最后的例子。</p>\n<h2>关于 Babel</h2>\n<p>因为开发阶段会使用大量的 ES6 等浏览器还不完全兼容的新特性，或者引入一些第三方库，比如 axios 之类的，对于低版本 IE 还不太友好，这些情况下都需要进行 Babel 转换。</p>\n<p>我目前是用的这份配置，命名为 <code>.babelrc</code> 保存到项目根目录下。</p>\n<pre><code class=\"language-js\">{\n  &quot;presets&quot;: [\n    [\n      &quot;@babel/preset-env&quot;,\n      {\n        &quot;modules&quot;: false,\n        &quot;targets&quot;: {\n          &quot;browsers&quot;: &quot;&gt; 1%, IE 11, not op_mini all, not dead&quot;\n        },\n        &quot;useBuiltIns&quot;: &quot;usage&quot;,\n        &quot;corejs&quot;: 2\n      }\n    ]\n  ],\n  &quot;plugins&quot;: [\n    &quot;@babel/plugin-proposal-class-properties&quot;\n  ]\n}\n</code></pre>\n<h2>举个例子</h2>\n<p>我在 <code>main.js</code> 编写一个简单的函数，通过预设好的 <code>demo</code> 变量名打包导出。</p>\n<p>dist 文件夹是最终要发版的混淆压缩版，每个版本都有独立的归类；demo 文件夹是用于开发调试的，这里的是未混淆的版本。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2020/08/1-1.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"\"></p>\n<p>切到 demo 这边，引入打包好的文件，即可通过 <code>demo.xxx</code> 来获取类库的能力。</p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2020/08/1-2.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"\"></p>\n<p><img src=\"http://cdn.chengpeiquan.com/img/2020/08/2.jpg?x-oss-process=image/interlace,1/resize,w_750\" alt=\"\"></p>\n<p>觉得 demo 这个变量没什么逼格？换成$试试……</p>\n<p>微信的 JSSDK 也是类似的用法 <code>wx.config(options);</code> 、<code>wx.chooseImage()</code> 等等，其实大同小异，并没有那么神秘……</p>\n<p>你可以参考 jQuery 的各种方法去玩玩，配合现在 ES6 的各种模块化，相信很快能上手！</p>\n"
}