{
  "title": "vite-plugin-banner：让Vite在打包的时候添加版权注释",
  "desc": "基于Vite，实现一个和webpack banner plugin一样功能的版权注释插件，可以为每个 chunk 文件头部添加 banner 注释。",
  "keywords": "vite-plugin-banner,vite plugin,vite banner,vite注释,vite版权",
  "date": "2021-02-24 07:10:00",
  "cover": "http://cdn.chengpeiquan.com/img/2021/01/20210224102526.jpg?x-oss-process=image/interlace,1",
  "categories": [
    "tech"
  ],
  "repo": "https://github.com/chengpeiquan/vite-plugin-banner",
  "id": "vite-plugin-banner",
  "type": "article",
  "author": {
    "name": "chengpeiquan",
    "email": "chengpeiquan@chengpeiquan.com",
    "link": "https://chengpeiquan.com"
  },
  "shortDate": "2021-02-24",
  "content": "<p>[[toc]]</p>\n<p>我很久前有一篇博客是介绍了一个 WebPack 插件，可以在打包后给 JS / CSS 文件添加一个版权注释，可以表明项目归属，用于声明版权信息或者如果出了什么问题知道可以联系谁。</p>\n<p>传送门：<a href=\"https://chengpeiquan.com/article/vue-cli-webpack-banner-plugin.html\">基于 Vue-CLI 3.0 让 WebPack 在打包的时候添加版权注释</a></p>\n<p>最近开始玩 Vite 的一些东西，虽然文档说可以继承 Rollup 的配置选项，以及一些 Rollup 的插件支持，但测试了一下，banner 功能并没有生效，所以昨晚有空就了解了一下 Vite 插件怎么开发，并参照 Webpack banner plugin 的功能自己写了一个，下面是插件的功能说明，同步了 npm 上的 README。</p>\n<h2>功能</h2>\n<p>为每个 chunk 文件头部添加 banner 注释。</p>\n<h2>安装</h2>\n<p>从 npm (或者 yarn 或者 pnpm) 安装：</p>\n<pre><code class=\"language-bash\">npm install --save-dev vite-plugin-banner\n</code></pre>\n<h2>选项</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">插件选项类型</th>\n<th style=\"text-align:left\">作用描述</th>\n<th style=\"text-align:left\">使用例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">横幅注释的内容</td>\n<td style=\"text-align:left\"><a href=\"#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95\">基础用法</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BannerPluginOptions</td>\n<td style=\"text-align:left\">请参阅下方的类型声明</td>\n<td style=\"text-align:left\"><a href=\"#%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%E6%A0%BC%E5%BC%8F\">可选参数格式</a></td>\n</tr>\n</tbody>\n</table>\n<p>· Type Declarations:</p>\n<pre><code class=\"language-ts\">/**\n * 来自 `vite.config.[ts|js]` 的一些选项\n * @tips 从 `0.2.0` 开始支持此选项类型\n */\nexport interface BannerPluginOptions {\n  /**\n   * Banner 的注释内容\n   */\n  content: string\n\n  /**\n   * Vite.js 配置的输出目录\n   * @default `dist`\n   */\n  outDir?: string\n\n  /**\n   * 是否将错误信息打印到控制台\n   * @tips 从 `0.4.0` 开始支持此选项\n   * @default `false`\n   */\n  debug?: boolean\n}\n</code></pre>\n<h2>用法</h2>\n<p>在大多数情况下，只需使用 <code>String</code> 格式作为插件选项。</p>\n<p>在一些特殊情况下，比如在 <a href=\"https://vitepress.vuejs.org/\">VitePress</a> 中，可能需要使用 <code>Object</code> 格式来传递插件选项，详见 <a href=\"#%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0%E6%A0%BC%E5%BC%8F\">可选参数格式</a> 。</p>\n<h3>基础用法</h3>\n<p>在 <code>vite.config.ts</code> 添加：</p>\n<pre><code class=\"language-ts\">// vite.config.ts\nimport banner from 'vite-plugin-banner'\n// 其他依赖...\n\nexport default defineConfig({\n  plugins: [\n    banner('This is the banner content.'),\n  ]\n})\n</code></pre>\n<p>当你在你的项目上运行 <code>npm run build</code> 打包的时候，在 <code>dist</code> 文件夹（或者你在 <code>vite.config.ts</code> 配置的其他 <a href=\"https://vitejs.dev/config/#build-outdir\">build.outDir</a> ），除了 <code>vendor</code> 文件外，所有的 <code>js</code> 和 <code>css</code> 文件都会添加一个 banner 注释在文件顶部。</p>\n<p>例如，在生成的 <code>app.b3a7772e.js</code> 里:</p>\n<pre><code class=\"language-js\">/* This is the banner content. */\nvar e=Object.assign;import{M as t,d as a,u as r,c......\n</code></pre>\n<h3>高级用法</h3>\n<p>当然，最理想的 banner 注释是和你的项目信息相关联。</p>\n<p>首先，你需要更新你的 <code>package.json</code> 文件，像这样，包含类似的字段内容：</p>\n<pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;chengpeiquan.com&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;description&quot;: &quot;My personal website, technology stack based on Vue.js 3.0, and Vite 2.0, use Server Side Generation.&quot;,\n  &quot;author&quot;: &quot;chengpeiquan&quot;,\n  &quot;homepage&quot;: &quot;https://chengpeiquan.com/&quot;\n}\n</code></pre>\n<p>然后，在你的 <code>vite.config.ts</code> 导入 <code>package.json</code>，像这样更新 banner 插件的内容：</p>\n<pre><code class=\"language-ts\">// vite.config.ts\nimport pkg from './package.json'\n// 其他依赖...\n\nexport default defineConfig({\n  plugins: [\n    banner(`/**\\n * name: ${pkg.name}\\n * version: v${pkg.version}\\n * description: ${pkg.description}\\n * author: ${pkg.author}\\n * homepage: ${pkg.homepage}\\n */`),\n  ]\n})\n</code></pre>\n<p>运行 <code>npm run build</code> 打包, 你可以看到生成出来的 banner 注释更详细：</p>\n<p>例如，在生成的 <code>app.6936be52.js</code> 里:</p>\n<pre><code class=\"language-js\">/**\n * name: chengpeiquan.com\n * version: v0.1.0\n * description: My personal website, technology stack based on Vue.js 3.0, and Vite 2.0, use Server Side Generation.\n * author: chengpeiquan\n * homepage: https://chengpeiquan.com/\n */\nvar e=Object.assign;import{M as t,d as a,u as r,c......\n</code></pre>\n<h3>趣味用法</h3>\n<p>如果你想制作一些个性化的 banner 注释，像什么表白啊、佛系啊、招聘信息啊什么的，可以通过一些在线生成器去制作有趣的内容。</p>\n<p>比如在这些网站上可以直接生成:</p>\n<ul>\n<li>\n<p><a href=\"http://www.network-science.de/ascii/\">http://www.network-science.de/ascii/</a></p>\n</li>\n<li>\n<p><a href=\"https://www.bootschool.net/ascii\">https://www.bootschool.net/ascii</a></p>\n</li>\n</ul>\n<pre><code class=\"language-ts\">// vite.config.ts\nexport default defineConfig({\n  plugins: [\n    banner(`\n    ██   ██         ███████   ██      ██ ████████   ██    ██   ███████   ██     ██\n    ░██  ░██        ██░░░░░██ ░██     ░██░██░░░░░   ░░██  ██   ██░░░░░██ ░██    ░██\n    ░██  ░██       ██     ░░██░██     ░██░██         ░░████   ██     ░░██░██    ░██\n    ░██  ░██      ░██      ░██░░██    ██ ░███████     ░░██   ░██      ░██░██    ░██\n    ░██  ░██      ░██      ░██ ░░██  ██  ░██░░░░       ░██   ░██      ░██░██    ░██\n    ░██  ░██      ░░██     ██   ░░████   ░██           ░██   ░░██     ██ ░██    ░██\n    ░██  ░████████ ░░███████     ░░██    ░████████     ░██    ░░███████  ░░███████ \n    ░░   ░░░░░░░░   ░░░░░░░       ░░     ░░░░░░░░      ░░      ░░░░░░░    ░░░░░░░  \n    `)\n  ]\n})\n</code></pre>\n<p>执行 <code>npm run build</code> 打包,  还是在 <code>app.d9a287b8.js</code> ，现在变成了：</p>\n<pre><code class=\"language-js\">/* \n    ██   ██         ███████   ██      ██ ████████   ██    ██   ███████   ██     ██\n    ░██  ░██        ██░░░░░██ ░██     ░██░██░░░░░   ░░██  ██   ██░░░░░██ ░██    ░██\n    ░██  ░██       ██     ░░██░██     ░██░██         ░░████   ██     ░░██░██    ░██\n    ░██  ░██      ░██      ░██░░██    ██ ░███████     ░░██   ░██      ░██░██    ░██\n    ░██  ░██      ░██      ░██ ░░██  ██  ░██░░░░       ░██   ░██      ░██░██    ░██\n    ░██  ░██      ░░██     ██   ░░████   ░██           ░██   ░░██     ██ ░██    ░██\n    ░██  ░████████ ░░███████     ░░██    ░████████     ░██    ░░███████  ░░███████ \n    ░░   ░░░░░░░░   ░░░░░░░       ░░     ░░░░░░░░      ░░      ░░░░░░░    ░░░░░░░  \n     */\nvar e=Object.assign;import{M as t,d as a,u as r,c......\n</code></pre>\n<h3>可选参数格式</h3>\n<p>我不确定除了 VitePress 还有哪些场景需要用到这种方式来传入选项，所以我用 VitePress 来举例，希望能给到你参考。</p>\n<pre><code class=\"language-ts\">// docs/.vitepress/config.ts\nimport { defineConfig } from 'vitepress'\nimport banner from 'vite-plugin-banner'\nimport pkg from '../../package.json'\n\nconst outDir = '../dist'\n\nexport default defineConfig({\n  // 指定打包的输出目录\n  outDir,\n\n  // 使用 Vite 插件\n  vite: {\n    plugins: [\n      // 请记住在这里使用 Object 格式的选项\n      banner({\n        outDir,\n        content: `/**\\n * name: ${pkg.name}\\n * version: v${pkg.version}\\n * description: ${pkg.description}\\n * author: ${pkg.author}\\n * homepage: ${pkg.homepage}\\n */`,\n      }),\n    ],\n  },\n  // ...\n})\n</code></pre>\n<p>为什么要这么做？</p>\n<p>因为在 VitePress 里，通过 viteConfig.build.outDir 拿到的永远是一个 <code>.temp</code> 的临时目录，不是最终的输出目录，所以你需要手动指定输出目录来告知插件。</p>\n<p>当然，随着 Vitepress 的版本更新，不一定需要这么做，只是当你需要的时候，可以选择这么处理。</p>\n"
}