[
  {
    "slug": "typescript-error-cannot-find-module-undici-types",
    "title": "干净的 TypeScript 项目在编译时报错 Cannot find module 'undici-types' 的原因和解决",
    "desc": "很久前配合 《前端工程化：基于 Vue.js 3.0 的设计与实践》 一书在 TypeScript 章节里讲解的内容，提供了一个很干净的 demo （见 hello-node ），除了必要的基础技术栈外，没有过多的第三方依赖，一直运行良好，直到这个假期收到了读者反馈，和我说在运行 npm run build 时出现类似下方的报错，无法正确编译。",
    "cover": "https://cdn.chengpeiquan.com/img/2024/04/202404062211878.jpg?x-oss-process=image/interlace,1",
    "content": "很久前配合 《前端工程化：基于 Vue.js 3.0 的设计与实践》 一书在 TypeScript 章节里讲解的内容，提供了一个很干净的 demo （见 hello-node ），这里的 “干净” 是指除了必要的基础技术栈外，没有过多的第三方依赖，一直运行良好。\n\n当然在教程里还是主动引导读者自己从零开始创建这个 Hello 项目，这也带来了这个假期遇到的一个读者反馈的问题。\n\n## 事情起因\n\n前几天在 GitHub Issue 的评论区，有位读者和我反馈说在运行  时出现类似下方的报错，无法正确编译（见 #193 (comment) ）。\n\n读者反馈\n\n## 触发错误日志\n\n遇到反馈的问题，首先是要先复现问题，于是先把仓库里的演示项目拉下来跑了一下，依然可以正常运行，但因为 “自己的代码自己清楚” ，马上联想到一个区别，就是读者自己创建的项目，依赖可能都是最新版，而我的演示项目由于 package.json 和 package-lock.json 里的版本号已有指定，因此 node\\_modules 下安装好的依赖可能并不完全一样，所以在演示仓库的项目里，这个错误没有被触发。\n\n因此我把 node\\_modules 和 package-lock.json 文件删除，再重新安装依赖，确实，现在演示项目也无法通过编译了，还好日志很清晰，报错是来自  这个文件：\n\n## 分析错误日志\n\n由于这个项目是很入门的演示项目，主要为了演示 Common JS 模块和 ES Module 模块的开发，以及一些 TypeScript 语法的入门，并没有涉及到 Node.js API 的操作，因此也没有主动去安装  这个包。\n\n这里顺便补充个说明：  包主要是为 TypeScript 提供 Node.js API 的类型定义，如果在项目里调用了 Node.js 的 API ，则需要显式安装它，使 TypeScript 可以识别到这些 API 。\n\n所以  这个包只能是第三方依赖带进来一并被安装的，为了方便排查，重新克隆了一个演示项目的原版，并通过  查看可以正常  时的依赖版本号，以及是哪个包引入的这个依赖。\n\n此时正常  的  版本号是  ，是从  引入的。\n\n同样的命令在有问题的项目下运行，得到不同的版本号  。\n\n查看项目  目录下的 package.json 文件，看到  对  的依赖版本号是设置为  号，也就是通配符（下面是关键信息的列举，非全部）。\n\n通配符版本号是指允许任何版本的依赖项，会安装最新可用版本，这也是为什么删除了 node\\_modules 目录和 package-lock.json 文件后，重新安装依赖后版本变化这么大的原因。\n\n关于这个  依赖，查看了  的 package.json 文件，确实在后面的版本里引入其作为  依赖，而之前的版本并没有，在 GitHub 溜达了一圈，原因可能来自 Node.js Undici 的这个 issue ）。\n\n## 解决问题\n\n原因查明，解决方案就好办了，这里提供两个有效的解决方案。\n\n### 使用 skipLibCheck 选项\n\n由于 demo 的报错主要来自第三方库的代码检查（ TypeScript 默认会检查所有代码），在实际的项目开发中为了节省编译时间和跳过源码之外的问题报错，通常会启用  选项通知 TypeScript 跳过这些依赖库的类型检查（扩展名为  的文件），从而只检查开发者编写的源代码。\n\n这也是为什么写了那么久的 TypeScript 从来没有遇到这种问题的原因，因为在实际项目里一直都是跳过对第三方库的检查啊哈哈哈。\n\n选择这个方案的话，如果是走 CLI 选项编译，可以在命令里添加一个  选项：\n\n如果是通过 tsconfig.json 配置编译选项，则是添加在  里：\n\n关于 skipLibCheck 选项 的更多说明可以在 TypeScript 官网文档上查阅。\n\n### 添加 moduleResolution\n\n除了  ，还有一个解决方案，还记得错误日志吗？在错误日志里给出了两个解决方案的建议：\n\n由于这是一个第三方库的报错，因此  方案不适用（该方案适合对源码目录下的文件配置 Alias 别名）。\n\n因此可以通过另外一个建议，添加  选项。\n\n也可以成功解决编译问题，同理，也可以在 tsconfig.json 里配置该选项：\n\n关于 moduleResolution 选项 的更多说明可以在 TypeScript 官网文档上查阅。\n"
  },
  {
    "slug": "macos-android-studio-emulator-hosts",
    "title": "macOS 基于 Android Studio 修改模拟器 Hosts",
    "desc": "用回 macOS 一段时间了，各种软件对 M 系列芯片基本上也都有支持的版本，除了安卓模拟器 - - 。之前在 Windows 上面常用的 MuMu 、雷电、夜神等模拟器，不是没有 Mac 版，就是虽然有 Mac 版，但不支持 M 系列芯片（ ARM 架构），所以抛弃一系列国产模拟器，回归 Android Studio 。",
    "cover": "https://cdn.chengpeiquan.com/img/2024/02/202402102106942.jpg?x-oss-process=image/interlace,1",
    "content": "用回 macOS 一段时间了，各种软件对 M 系列芯片基本上也都有支持的版本，除了安卓模拟器 - - 。之前在 Windows 上面常用的 MuMu 、雷电、夜神等模拟器，不是没有 Mac 版，就是虽然有 Mac 版，但不支持 M 系列芯片（ ARM 架构），所以抛弃一系列国产模拟器，回归 Android Studio 。\n\n## 创建模拟器\n\n安装和创建模拟器的过程不赘述了，切记要修改 Hosts 的话，需要模拟器支持 Root ，因此不能选择 Google Play 的 System Image ，否则只能以 Readonly 模式启动模拟器，无法 Root 。\n\n不要选择 Google Play\n\n选择这种普通的\n\n## 启动可写权限的模拟器\n\n需要通过命令行以 Writable 的模式启动，这个时候不需要开启 Android Studio 了（从 AS 启动的模拟器只有 Readonly 权限）。\n\n此时模拟器就运行起来，命令行不要关闭，否则模拟器也会退出。\n\n## 检查 ADB 启用状态\n\n下一步操作需要通过  命令来执行（关于 ADB 是什么，详细可以见 Android 的官方文档：Android 调试桥 (adb) ），但这里只是想确认它是否存在。\n\n所以直接看 StackOverflow 的操作即可：Set up adb on Mac OS X 。 因为安装 Android Studio 的时候就默认一起装了，所以直接看里面的 “Option 3 - If you already have Android Studio installed” 部分。\n\n注意：我是使用 Oh My Zsh 的 ZSH Shell ，所以配置文件和 StackOverflow 答案里不一样，记得留意自己用的是哪个 Shell 。\n\n我的 .zshrc 配置\n\n设置后重启 Terminal ，通过  命令查看是否启用成功。\n\n## 修改 Hosts\n\n首先确认模拟器编号，通过命令行启动模拟器后，在设置界面可以看到这个  端口号（可能是别的端口）。\n\n通过命令行启动模拟器\n\n或者是通过 Android Studio 启动模拟器，也可以看到端口号。\n\n通过 Android Studio 启动模拟器\n\n开始修改 Hosts 啦。\n\n接下来就和之前在 Windows 上修改 Hosts 一样啦，改完后把文件 push 回去。\n"
  },
  {
    "slug": "new-mac-2024",
    "title": "给猫儿子的新年礼物 它很喜欢！",
    "desc": "哈哈哈哈哈上一次买 Mac 还是 2015 年，然后在 2019 年换了 Windows 台式机用到现在。最近跑了 5 年的台式机又感觉配置不太够用了，干脆再换回 Mac ，开心！",
    "cover": "https://cdn.chengpeiquan.com/img/2024/02/202402102245723.jpg?x-oss-process=image/interlace,1",
    "content": "哈哈哈哈哈上一次买 Mac 还是 2015 年，然后在 2019 年换了 Windows 台式机用到现在。\n\n最近跑了 5 年的台式机又感觉配置不太够用了，干脆再换回 Mac ，开心！\n"
  },
  {
    "slug": "2023-year-end-summary",
    "title": "年终总结：2023年的一些回顾和2024年的一些小规划",
    "desc": "本来今年的总结第一句话想写 “2023 对我算是比较特殊的一年” ，结果看了一眼去年的回顾，去年也是这么写的… 那今年再强化一下，改成 “2023 对我是非常特殊的一年” 哈哈哈哈哈哈哈，确实非常特殊的一年，因为经历了很多之前没有经历过的事情。",
    "cover": "https://cdn.chengpeiquan.com/img/2023/12/20231230212146.jpg?x-oss-process=image/interlace,1",
    "content": "我家三只超级乖的猫\n\n在落笔之前想起一个古早笑话……\n\n快六点了，街边卖油条的还没来，我只能拨通他的电话，大哥在那边说：我卖了这么多年的油条了，从来自由自在的，自从遇见你之后，我居然有了上班的感觉。\n\n因为我被催更了哈哈哈哈哈（见 #363 ）。\n\n催更现场\n\n本来今年的总结第一句话想写 “2023 对我算是比较特殊的一年” ，结果看了一眼去年的回顾，去年也是这么写的… 那今年再强化一下，改成 “2023 对我是非常特殊的一年” 哈哈哈哈哈哈哈，确实非常特殊的一年，因为经历了很多之前没有经历过的事情。\n\n## 人生中的第一次失业\n\n去年写总结的时候还是元旦放假前，当时的我对于三天后会发生什么事还一无所知，但也不能说完全一无所知吧，作为一名程序员和刑侦爱好者，上家公司总是结合疫情的风吹草动安排半薪和基薪休假（广州当时其实就海珠区比较严重，其他区域已经放开，我们都不在海珠区，这么喜欢跟风就很不对劲…），所以就已经感觉到前公司当时的运作要崩溃了，只是没想到来的这么快而已。那时候元旦假期刚过完，回去上班第一天前老板就开会说融资失败要执笠了，团队要解散。于是我刚休完元旦假期，上了一天班又继续放假了，当然这次是无薪假期哈哈哈哈。\n\n这是我人生中第一次在没下家的情况下直接失业，既然前面有所感知，为什么没有骑驴找马呢？因为团队里都是我合作了很多年的 Partners ，都是我在网易从 2016 年起陆续认识，一起玩了六七年的 Friends 和 Leader ，包括从网易当时的总监熬不住先跳槽了，我们一起被合并到边缘部门，再一起离职去深圳待了两年，再一起回广州，经历了很多事情，所以表面上连网易在内到当时失业，经历的是三家公司，但实际上一直都在一个团队里（包括前老板以前也是网易的总监，所以那段时间首先想的是有难同当，低谷期总是有的，熬过去就好了）。\n\n过年前失业确实是一个很尴尬的节点，大部分公司在年底是没有招聘计划的，通常会在二月底到三月，等新一年的目标定好才会开始陆续招人，所以那个时候想走内推也没有什么公司有 HC ，也尝试谈了几家创业公司，也没有那么大的团队缺口，都是最多只要一个经验丰富点的来带头开荒就顶天了，盘不下几个人的团队一起去，加上做的事情比较无聊和薪资没谈拢，干脆就等过完年再看机会。\n\n## 失业期间在干什么\n\n虽然人到中年还是 “三无” 选手（无老婆、无小孩、无房贷压力），但这个时候 “三无” 属性反而使我的抗风险能力达到了 Max ，没有银行给我的还款压力，没有人在旁边唠叨给我精神压力，身边还有三只懂事粘人的猫，所以那段时间心态也比较平稳，工作方面没了事情做就没事情做吧，我自己还有很多事情要搞（在 GitHub 上列了一堆 Projects ），还是忙个不停。\n\n### 改稿子\n\n那个时候已经和出版社签了合同，准备出版我的书，基于出版规范很多细节要调整，包括不允许出现 “你我他” 这些人称代词，还有很多描述不能口语化，更重要的是保证代码的准确性，平时苦于每天在睡前挤那一两个小时在开夜车改稿，一下子突然有了很多时间让我慢慢改，反而有一种莫名其妙的幸福感… 每天终于不用那么累了，于是对着 83 页 PDF 的规范手册，几十万字的稿子硬是改完了。\n\n这是后来寄过来校对第二次的清样，哈哈哈哈也别被吓到，单面印刷的所以看起来厚到吓人。\n\n薄如蝉翼的稿袋\n\n也就几页稿子…\n\n后来这本书在五一期间正式上市了，围绕前端工程化的入门，虽说前端娱乐圈，框架一个又一个，但真正被企业认可的以及基础方面的知识主要还是没太大变化，书的内容的有效性应该可以维持上几年，刚入门前端觉得有需要的同学可以支持一下，感谢您！\n\n《前端工程化：基于 Vue.js 3.0 的设计与实践》\n\n相关阅读：我写了一本书《前端工程化：基于 Vue.js 3.0 的设计与实践》 想分享一下它背后的故事\n\n当时给身边好友写的签名本，好羞涩哈哈哈哈哈。\n\n人生第一次在自己的书上签名\n\n真的很羞涩哈哈哈哈\n\n### 做设计\n\n去年的总结说要对 create-preset 改版，程序至今还是没时间改，倒是对官网先重新设计了一版，还自己鼠绘了个 LOGO ，一年了，自己看起来还是很满意哈哈哈哈哈哈。\n\n当时的票圈\n\n还想设计设计自己的新文身，从去年回广州就想加图案，但因为忙也没时间搞，有时间的时候也会胡乱画画找找灵感（红色的是画上去的，最终还是没确定下来，后面也没有时间了就又搁置了，新的一年再看看吧）。\n\n乱画一通\n\n第一个文身的由来\n\n### 戒掉了网络游戏\n\n当年作为一个资深玩家进的游戏行业，又凭着丰富的游戏经验跳去了网易游戏，没想到有一天我也会不玩网络游戏了，一月份我弃坑了玩了五年的某手游（排名在全区第二），一方面是失业带来的危机感让我觉得继续玩这种时不时要充值的游戏没什么意义，另外一方面是狗策划安排的活动时间实在是过于挤压我为数不多的休息时间，既然花了钱去玩还得不到快乐，那就干脆就不玩了。\n\n在成为 “不抽烟不喝酒不玩游戏” 的好男人一段时间后，有时候很无聊又想玩玩游戏消磨下疲劳，所以现在又像小孩子一样，重新玩起了小时候玩的那些游戏，在模拟器玩 FC 和街机，还有老头滚动条之类的经典单机。\n\n红白机永远的神！\n\n双截龙 Ⅱ\n\n### 其他的事情\n\n其他事情主要就是改简历和准备面试的事情，失业时间说短不短，说长也不长，刚好过年前到元宵后休息了两个月，二月底内推到现在的这家公司面试通过后就入职了。\n\n## 新工作是干什么的\n\n现在在一家做 NAS 方向的初创公司做开发，依然是自研团队。目前项目里 C++ 负责 NAS 操作系统的开发，而前端这边是负责把操作系统上的功能实现为界面化的交互（像 Windows / macOS 那样），所以这是一个很重前端的项目，比起传统的 C 端应用或者 B 端一些低代码平台，这个项目我觉得更有意思，也很考验开发者的 TypeScript 功底，目前来了半年多，感觉自己的能力和理解又有了很多提升，当然也离不开身边大佬们的指导和帮助。\n\n产品还在开发中，等上线了我再公开哈哈哈哈\n\n另外还有一个很神奇的缘分，就是现在的老板其实也是我十年前的老板， PP 助手的创始人（早期越狱那个年代的 iOS 用户应该都知道？），我之前也是在 PP 助手团队，后来跟着被收购到了 UC ，再被收购到阿里，被阿里收购后因为阿里部门间合并后的一些后遗症，做的不开心了，我才跳去了网易。\n\nUC 十周年时，当年发的朋友圈\n\n兜兜转转又回来了以前的团队，说不出的兴奋感，因为这里的人也很好，又是一见如故，哪怕多年未见，连我的花名都还记得！虽然离开了一群合作很久的 Partners ，但又回到了另一个很好的 Team ，很开心的一年！现在这里除了以前 PP 的老友，也有后面在 UC 和阿里的同事，虽然有些之前并未谋面，但很快就达成了默契，很合拍的工作节奏！\n\n## 开源社区\n\n今年还是活跃在 GitHub 上（截图生成自 GitHub Contributions ），可能去年码字太多，今年几乎没写什么文章，一直在敲代码，弥补之前没做的很多事情。\n\n2023 年在 GitHub 的活跃情况\n\n今年敲代码的时间比去年高了不少，晒一下这一年最高敲代码时间的一周，沉浸式敲代码哇哈哈… （统计数据来自 WakaTime ），我记得有一天敲了 12h 的代码，太早的统计要付费才能看，忘记留个图纪念下。\n\n2023-12-03\n\n这么长的敲代码时间倒不是因为公司加班，公司除了版本 DDL 前后会加加班之外，都是六点半下班和双休。\n\n时间方面主要是在这几个地方：\n\n完善自己的工具链（ e.g. 贝斯手 Bassist 系列，还有一些没公开的），把自己常用的工具和配置都集合到一个 Monorepo 管理，避免每次用的时候都要加一堆配置或者重新实现\n\n踩 React 的坑…（下面说）\n\n踩其他技术栈的坑（例如尝试写了一点 Rust … 还有各种 demo 吧，不是开源，但也都托管在 GitHub 上，所以活跃度就这么来的… ）\n\n关于踩 React 的坑，去年在总结的新年展望里提到要好好写一下 React ，倒不是说 Vue 不好，相反，真的把主技术栈切到 React 后才发现 Vue 帮开发者做了好多优化，而 React 好多要靠开发者自己处理… Vue 真是保姆级！\n\n之所以在出了一本 Vue 的书之后，自己写起了 React ，是因为我写多了想换换口味，之前因为公司一直都是 Vue 为主，所以不知不觉也写了得有五年多的 Vue 了，不想像以前读书一样，只偏科数学和物理，文科一塌糊涂，最后总成绩就显得很一般。目前在 Vue 自己也算是有一套自己的最佳实践，平时遇到问题也可以很快排查，而 React 还没有达到这种状态，所以今年主要也在解决自己的偏科问题。\n\n刚好今年换工作后是新团队新项目，涉及到技术选型，新团队的 Partners 都很一致的选择用 React 来写，所以我也很符合个人预期的都在写 React 了。\n\n## 其他的感慨\n\n首先， AI 真好用哈哈哈，自从 ChatGPT 出来后，工作再也离不开它了，目前主要用它消耗掉很多基础的工作，比如输出单元测试用例、 JSON 转 TypeScript 类型等等，还有遇到问题现在可能不是首选 Google 搜索了，而是在 GPT 先问一下，如果不靠谱再去 Google / StackOverflow / GitHub Issue 找答案。\n\n再一个就是离开网易后很感慨一件事，就是刚转行的时候曾经的产品运营身份让我在技术路上走的蛮辛苦的，有人不认可，有人不信任，在当时确实是一个劣势，毕竟万事开头难，但经过这么多年的热爱和坚持，劣势反过来已经成为了自己的优势。\n\n有一定的产品设计经验、有一定的用户体验优化能力、懂 SEO 懂运营懂用户，往产品工程师方向发展，比做一个纯技术的全栈工程师更现实一些（相对于我这种普通人的认知层面来说的，大佬肯定又有不一样的认知），当然现在托 Node.js 的福，只写 TypeScript 的我也可以写全栈了。\n\n## 新年愿望\n\n首先希望身体健康啊哈哈哈，距离上一次去医院不知道多少年了，今年才又进了一次医院，做了人生中的第一个小手术，当时耳朵因为细菌感染引起皮脂腺囊肿，去做了个引流手术，第一次动刀子，内心还是比较慌的，还好过程也没有啥感觉，打了个麻药，所以手术过程中还没有文身有感觉（我文身不打麻药！）\n\n惨兮兮的朋友圈\n\n其他的还是先把原来还没搞完的事情搞起来吧，比如想重构博客一年多了，结果因为这个那个事情，一直拖着没处理，一下子距离上一次重构都已经三年了，真是见鬼啊哈哈哈哈时间怎么这么快！！！\n\n都记录在 GitHub 的 Projects 里管理了，等做到了再说吧，不立那么多 Flag ，免得一年又一年说了又不做哈哈哈哈哈。\n\n好多计划都赶不上变化哈哈哈哈\n\n谢谢阅读！\n"
  },
  {
    "slug": "my-custom-nas",
    "title": "千元预算组装了个入门NAS设备 一文分享NAS的硬件基础知识",
    "desc": "最近在一千元预算内搞了一台 NAS ，在这个过程也算蛮自定义的搭配，记录一下这个过程中的主要知识点和最终搭配结果。初接触 NAS 的时候最迷茫的应该就是它的概念和用途了，就算了解了它的作用，想采购一个合适的 NAS 设备又会涉及到很多硬件知识。既然选择自己配 NAS 做一个 DIY 玩家，肯定还是需要先熟悉一些前置的硬件知识，否则大可花几千块钱买成品 NAS 了，所以有一些前置知识点还是值得先简单了解一下。",
    "cover": "https://cdn.chengpeiquan.com/img/2023/06/20230611223039.jpg?x-oss-process=image/interlace,1",
    "content": "最近在一千元预算内搞了一台 NAS ，在这个过程也算蛮自定义的搭配，记录一下这个过程中的主要知识点和最终搭配结果。## 前置知识初接触 NAS 的时候最迷茫的应该就是它的概念和用途了，就算了解了它的作用，想采购一个合适的 NAS 设备又会涉及到很多硬件知识。既然选择自己配 NAS 做一个 DIY 玩家，肯定还是需要先熟悉一些前置的硬件知识，否则大可花几千块钱买成品 NAS 了，所以有一些前置知识点还是值得先简单了解一下。### 什么是 NAS ?NAS 全称是 Network Attached Storage ，网络附属存储，关于它的概念可以查看 Wikipedia 词条 。用通俗一点的话来理解，它最直接的用途是当一个自建的云盘服务器，可以存放你的照片、视频、电影资源、重要资料数据等等，而存储介质是属于你自己的，除了自己常用的主机可以访问 NAS 单点存储备份外，还可以作为局域网、广域网共享，家里的其他设备也可以访问到 NAS 上的文件，如果体验过用 AirDrop 从 iPhone 向 Mac 共享文件的便利性，那么通过 NAS 也可以解决 iPhone 和 Windows 共享文件比较麻烦的问题。借助 NAS 系统，分布式工作环境可以轻松地从任何联网设备访问文件和文件夹，在局域网里可以访问设备的内网 IP 即可访问到 NAS 系统的桌面操作界面，如果有公网 IP 或者做了内网穿透，还可以绑定自己的域名，不在家的时候也可以通过域名访问到家里的 NAS 系统，做到随时随地访问。借助 NAS 系统，分布式工作环境可以轻松地从任何联网设备访问文件和文件夹因为 NAS 设备充当的是一个服务器的作用，所以在装好系统之后就不需要鼠标键盘和显示器了（系统安装过程中还是需要的，临时拔一下自己其他主机的鼠键和显示器过来用就行）， NAS 系统启动后在局域网内有一个固定的 IP ，使用其他设备（例如台式机、笔记本）去访问这个局域网 IP 即可访问到 NAS 操作系统的桌面界面，这个界面都是以 Web 的形式实现的。我在台式机访问局域网 IP 即可进入 NAS 操作系统界面### 为什么要用 NAS ？在上面提到了 NAS 可以简单的理解为一个自建的云盘，存储介质都属于自己，数据的管理也都是自己，这一点有什么好处呢？如果你在网上冲浪比较久，应该早就知道很多平台哪怕被用户信任了十几年，还是会因为盈利问题或者不可抗拒的原因关闭下线（例如 国内某巨头的相册 、 国内某巨头的云盘），虽然关停前会有一段时间让用户可以把自己的东西下载回本地，但有句话说的好，你永远不知道明天和意外哪个先来，可能在关停前短短的保数据阶段，会因为一些意外的事情导致无法及时处理，比如考研备战期间忙的要死根本无暇顾及太多外部杂事，或者是身体原因住院之类的，我自己也在 2020 年也有过挺长时间经历了卧床不能走路的日子，那段时间除了腿脚不便之外，整个人的精力也是前所未有的低谷期，很多时间根本没办法去及时关注。我不能走路那段时间的日记或者是因为某些原因导致资源再也不能显示，比如我最喜欢的 Beyond 乐队的《长城》、《岁月无声》，三十多年前的摇滚乐了，国内外几亿人都喜欢的歌曲，因为被某些人的过度解读导致永远 404 。BEYOND 长城还有南京市民李先生的所有音乐，陪我走过很多次低谷的《你离开了南京，从此没有人和我说话》、《忽然》、《关于郑州的记忆》、《梵高先生》等等正常歌曲也都是不能光明正大的在各大音乐平台搜到（之前保存在云盘里的也被和谐了，还好电脑里有备份）。南京市民李先生的音乐文件数据无价，很多资料本身十分正常，但就是由于某些原因导致无法信任某些平台，像我自己写的 菜谱 虽然主要分享在小红书上，但我也并不信任小红书，不说它会不会在某一天关闭业务，哪怕只是简单到因为审核到不和谐的内容然后就把我号封了，我写的东西也就没了（已经收到过系统通知说出现不适合推送的内容，所以本条笔记不做曝光，但不会告诉我要怎么修改），所以我才自己同步了一份数据到我自己的 GitHub 和自己的数据库做多端备份。当然 NAS 除了做基础的存储，很多服务还可以自己配置用起来，比如现在各个平台都要会员，优酷开一个、爱奇艺开一个，网易云音乐开一个， QQ 音乐开一个，每个平台都有自己专属版权的资源，开多个平台的会员，这里也是很大的成本支出。所以需不需要 NAS ，最终还是看个人需求，对我自己来说，有一个用来备份重要数据的 NAS 还是很有用的。### 主要配件组 NAS 有很多种方案，最简单的是购买 NAS 厂商提供的成品，国内的像群晖、威联通、绿联、铁威马、极空间等等，优点就是直接购买成品，买回来也是开箱即用，缺点就是溢价太高，相比自己组装，随便一个基础型号都几千块钱，对于不是重度 NAS 用户来说，实在太贵了。所以我选择了自己组装硬件来做一个 NAS ，方案我是准备了三套，就是放在最后面介绍的 搭配方案 。当然有旧电脑也是可以用来装 NAS 系统当 NAS 设备用的。一般来说硬盘都是要单独选购，而其他的如 CPU 、主板、机箱等配件通常会放在一起选购，下面先介绍一下主要配件。#### CPU组装 NAS 和组装台式机的过程基本一样，都是优先考虑 CPU ，再去自己搭配主板等其他配件。NAS 主要还是服务于数据存储的需求，并且一般会 7x24 小时一直开机运行，以方便其他设备随时可以访问，所以更青睐于低功耗的 CPU ，毕竟不是每个人住的地方电费都是 6 毛钱（广州和深圳大部分人的电费都是 1.5 元一度，我也住过这种电费的公寓，动不动就多花不少钱，真的会心痛）。对我自己来说，我的 NAS 还是存储数据为主，一些视频也没有必要上 4K 之类的（普通的 1080P 也足够我看），所以选择一个低功耗的方案性价比会更高，像赛扬 J4125 / N5105 / N100 都是蛮不错的适合 NAS 的低功耗 CPU ，但对于视频转码有需求的玩家来说，还是得上高性能的 CPU 。具体有哪些合适的型号可以 Google 一下 NAS 低功耗 CPU ，很多研究的比较深的大佬每年都会分享当下的最佳方案，所以我就不班门弄斧啦！我自己买的时候是看上了赛扬的 J4125 / N5100 / N100 这几个型号，最后是选择了 J4125 ，用下来感觉确实很不错！#### 主板主板通常围绕已选好的 CPU 去挑选，常见的主板规格从大到小排序分为 ATX （标准型）、 M-ATX （紧凑型）、 MINI-ITX （迷你型），尺寸越大，可拓展性越高，因此大主板通常适合 DIY 高性能主机，而用于组 NAS 的一般都是用 MINI-ITX 迷你型或者是 M-ATX 紧凑型主板。三种主板的尺寸关系但是并非任意主板都可以和任意 CPU 配对，主板上面有 “芯片组” 来适配指定某些型号的 CPU ，芯片组是主板的核心，一块主板能提供什么样的功能、可以支持哪些处理器都是由芯片组所决定的，所以选错了会出现不兼容的情况。板 U 关系对新玩家来说可能比较复杂，所以我才建议先选好合适的 CPU ，然后选购主板时就可以用 CPU 的关键词去找，例如 “J4125 ITX 主板” 这样的关键词去搜符合需求的主板。确定好主板之后，其他配件也会跟着主板走，例如内存条、网卡、 USB 等插口都是和主板有关系，这也是为什么讲完 CPU 会先说主板，因为它们有一个搭配顺序。#### 内存条内存主要有四个注意点：标准、尺寸、大小、频率。传输标准传输标准指 Double Data Rate ，双倍数据速率，它的缩写我们比较熟悉，通常结合它是第几代标准，会被称为 DDR3 、 DDR4 、 DDR5 等等，它们之间的差异如下（ DDR2 以前太古老的就不放上来了）。指标DDR3DDR4DDR5预取（预加载）8-bit Prefetch8-bit Prefetch16-bit Prefetch资料速度（ MT/s ）1066 - 16002133 - 51003200 - 6400传输速度（ GB/s ）8.5 - 14.917 - 25.638.4 - 51.2电压（ V ）1.35 - 1.51.21.1对目前主流的处理器来说，内存基本都是使用 DDR4 标准，部分比较高性能的处理器可以支持到 DDR5 ，效能更高，但对应的价格也是贵了几个档次，目前来说组 NAS 都是用 DDR4 就足够。但这也不是说就无脑选 DDR4 完事，因为前面选主板时也说了，内存的插口和主板有关系，因为每一代标准的内存都会设计一个防呆槽，并且每一代的位置都不一样，因此不可以混用，买内存之前切记要看好主板可以插哪一代的内存条。以台式机内存条为例，不同的 DDR 标准对应的防呆槽位置除了防呆槽位置不同会引起无法正确插上外，内存还有尺寸也要关注，选错尺寸也会导致无法插到主板上。注： “防呆” 一词最初起源于日本围棋与将棋的术语，这是一种预防矫正的行为约束手段，运用避免产生错误的限制方法，让操作者不需要花费注意力、也不需要经验与专业知识即可直接无误地完成正确的操作。以前的防呆设计是不兼容的接口物理形状上永远插不进去，常见的 USB 口、网线口、显示器插口都是传统的防呆设计。而现代的防呆设计理念会有更好的用户体验，例如不需要区分正反面的 Type-C ，就是一个新式的防呆设计。内存尺寸内存条除了 DDR4 和 DDR5 这些不同的标准带来的防呆槽在不同位置之外，内存条的造型也有一定的区别，通常会分为台式机内存条和笔记本内存条，两者的形状、尺寸、接口、安装方式都不一样，选错了也是无法安装到主板上。内存条的规格有 DIMM （ Dual Inline Memory Module ，双列直插内存模块）和 SIMM （ Single In-line Memory Module ，单边接触内存模块）， SIMM 属于比较过去式的规格了，目前家用设备基本都是采用 DIMM 规格，并且根据不同的设备还有更多的子规格，常见的有以下两种：规格全称造型特点常用场景U-DIMMUnbuffered DIMM又瘦又长台式机SO-DIMMSmall Outline DIMM较短、较宽笔记本、路由器、 NAS具体的造型差距如下图：台式机内存条和笔记本内存条的尺寸对比在买内存条的时候可能会看到商品详情写着 DIMM 和 SO-DIMM ，一般 DIMM 默认为 U-DIMM 台式机内存条，而 SO-DIMM 可以默认为笔记本内存条。具体需要什么尺寸规格的内存，请一定要看好主板上面可以插哪一种再去购买。内存大小NAS 对内存的大小需求不高，最最入门级的存储型 NAS 选个 1-2G 内存就足够了（就真的拿来当存储用的，其他啥也不折腾），但如果要组 RAID ，或者跑 Docker 等虚拟化应用，就要视情况加内存了。不过现在内存的价格也不算太贵，自己如果有打算折腾点东西，那么可以考虑直接买条 8G 的内存，实在不够再加到 16G （加内存之前要看看主板是否可以插多条内存，像 ITX 主板通常最多可以插两条内存）。内存频率除了上面几个注意点之外，内存条还有一个参数需要留意，就是频率，单位是 MHz 兆赫，主频越高，内存的读写速度越快，性能越好。通常 ITX 主板和对应的低压 CPU 都是推荐使用 2400MHz 的内存，所以买的时候最少要买 2400MHz 的内存（具体留意商品详情页的说明）。如果购买多条内存但是同代不同频，或者是购买的是高于 CPU 支持的频率，那么会自动降频到最低的频率，例如同时使用 DDR4 2400MHz 和 DDR4 2666MHz ，实际使用会降低到 2400MHz 。#### 硬盘常用的硬盘主要有这两种（还有一种混合硬盘比较冷门就不提它了）；硬盘类型全称简称特点机械硬盘Hard Disk DriveHDD容量大，价格便宜，但读写速度一般固态硬盘Solid State DriveSSD读写速度快，但价格较高固态虽然看起来更好，但目前价格还下不去，因此通常在预算内选购回来的容量也比较小，这也是为什么大部分 Windows 主机都是用一个小容量的 SSD 做系统盘（一般是 C 盘），搭配大容量的 HDD 做存储盘（例如 D 盘、 E 盘）。组 NAS 一般都是优先考虑存储的，从性价比上来说，存储容量和价格还是推荐购买机械硬盘，另外从某些 “万一” 的情况来说，机械硬盘还可能恢复数据，固态硬盘基本都是直接没了。因为本次组装 NAS 的主角是机械硬盘，所以单独在 关于机械硬盘 部分详细展开说明，在这里只简单说一下 SSD 固态硬盘，固态硬盘的发展有这两个变化：接口：普遍从 SATA 换成了 NVMe 接口，从速度上来说 SATA 是比 NVMe 慢的造型：从 2.5 英寸的造型缩小到 M.2 规格的迷你外形很多主板的详情页会说支持 M.2 NVMe SSD ，指的就是 NVMe 接口的迷你固态。不过需要注意的是，接口和造型这两者并没有直接关系，事实上同时存在 NVMe M.2 SSD 和 SATA M.2 SSD ，并不是说 M.2 就一定指 NVMe SSD 。另外，实际上 SSD 还有其他类型的接口，例如 mSATA 、 U.2 等等，了解起来又是一匹布那么长，因为不在常用的 NAS 搭配范围内，所以有兴趣可自行了解。不同接口和造型的 SSD 对比#### 机箱机箱需要配合主板和硬盘位去考虑，像 ITX 主板通常就选购迷你机箱了，并且搜索关键词通常会搭配这两个配件一起搜，例如 “ITX 四盘位 机箱” 。这里以某个 NAS 机箱为例，可以看到商品详情会特地注明支持什么类型的主板，还有散热风扇的尺寸NAS 四盘位机箱结构图如果购买的是软路由一类的迷你主机来做 NAS （我这次就是选择了迷你主机，具体看后面推荐的方案一和二），那么不买机箱也可以，机械硬盘可以通过硬盘架或者硬盘笼来外置接入。迷你主机结构图#### 散热风扇选购了机箱后，可以看看机箱里面预留的空间选择合适的散热风扇，散热风扇的选择有以下几个方面要注意：1、尺寸：散热风扇的尺寸非常多，但其实并不太会有选择困难症的问题，因为风扇通常要求与主板的风扇接口大小相匹配，并且在机箱可安装的尺寸范围内，所以根据机箱要求的尺寸去购买即可2、转速：风扇的转速决定了散热效果和噪音水平，通常转速越高，散热效果越好，但噪音和耗电量也会越大，所以要根据需要选择合适的转速范围可以看到通常商品购买页面有非常多的尺寸可以选择散热风扇一般长这样，外观大同小异，主要区别还是在尺寸上：散热风扇造型参考总之，要选择适合自己的风扇，应该根据主机机箱的大小、需要散热的硬件组件类型和数量、以及对噪音等因素的要求来进行综合考虑。#### 电源通常电源是放在最后选购的，因为几乎每个配件都在耗电，所以电源需要满足全部配件的总功耗，并且尺寸需要符合机箱预留的电源位。常见的主机电源有 ATX 、 SFX 、 SFX-L 、 Flex 1U 电源，型号对应的体积也是从大到小排序的，自组 NAS 通常会选择 FLEX 小 1U 电源，或者根据主板要求使用 DC 供电（这里的 U 代表 Unit ，1U 等于 1.75 英寸，所以 1U 电源不全都是 FLEX 电源，小 1U 只是国内俗称）。这种是 Flex 小 1U 电源另外还有一些主板是使用 DC 供电（迷你主机就是），这种就不需要单独买一个电源了，只需要准备一个电源适配器，插到主机上就可以一直供电，这种供电方式在家庭里应该都不陌生，像我的贝斯 DI 盒就是用电源适配器供电的。这种是电源适配器#### 参考资料NAS 折腾笔记 篇三：选择合适的设备（主板、CPU、内存）芯片组和主板有啥关系？主板型号怎么看？CPU 选购基础知识 板 U 怎么搭配？NAS 机器的 CPU 跟内存大小对 NAS 机器运行影响有多大？SDRAM、DDR、DDR2、DDR3、DDR4 與 DDR5 之間的差異是什麼？NVMe vs. M.2 vs. SATA SSD: What’s the difference?为什么消费级的固态硬盘很少有 u.2 接口的?ATX/SFX/SFX-L/1U Flex 尺寸区别，电源规格尺寸 v1.0PC 电源也有中杯、大杯、特大杯，电源规格简单科普！顺便晒晒新入的海韵 SGX650### 关于机械硬盘在上面 硬盘 部分已经说过 NAS 优先考虑购买机械硬盘，但挑选机械硬盘也不是单纯的一句 “我要机械硬盘” 就完事，选购机械硬盘通常还会遇到这两类问题：磁记录方式上：分有 CMR （常规磁记录）和 SMR （叠瓦式磁记录）外观和尺寸上：分有 3.5 英寸（台式机）和 2.5 英寸（笔记本）另外还有接口和转速要怎么选的小问题。#### 磁记录区别常规磁记录（ Conventional Magnetic Recording ，简称 CMR ），俗称 “垂直盘” ，垂直盘的优点是在写入数据的时候不会出现其他多余的操作，写入速度快，硬盘寿命长；缺点是单碟容量略低。CMR 的磁道示例叠瓦式磁记录（ Shingled Magnetic Recording ，简称 SMR ），俗称 “叠瓦盘” ，叠瓦盘的优点是单碟容量更大，造价成本低所以价格也相对便宜（好像也区别不大）；缺点则是当存了太多数据后，即使微小的数据改动，也会反复迁移扇区内的数据，这将严重影响写入速度，并加速盘片和磁头的老化，数据丢失的风险也随之增加。SMR 的磁道示例对于 NAS 用户来说，通常会存储非常多的珍贵数据，在 “数据无价” 四个字面前，叠瓦盘带来的容量和价格优势，相比性能下降和数据丢失风险较高来说并不算值得考虑的点，所以可以看到很多人都说买盘别买叠瓦盘。所以如果用来做仓库盘，例如存放电影、音乐、文件备份这种平时放着不用、偶尔才选一些出来看，类似这些读写频率不高的场景，可以考虑 SMR 叠瓦盘，否则都应该优先考虑 CMR 垂直盘（如果看到标记了 PMR/CMR 也不用担心， PMR 是 CMR 技术的前身）。如果商品详情没有标记，也可以看缓存大小来简单判断，一般 64M 缓存或以下的都是 CMR ，而 256M 之类的大缓存硬盘基本上都是 SMR （非绝对，但是相对靠谱）。#### 尺寸区别机械硬盘分有 3.5 英寸和 2.5 英寸两种规格，对于 NAS 机箱来说，通常都是以 3.5 英寸来设计的，外置硬盘座或者硬盘笼也是一样，如果手里有 2.5 英寸的硬盘，需要注意是否可以兼容使用。两者的区别不过 2.5 英寸机械硬盘基本上都是 SMR 叠瓦盘，所以…… 我是冇得拣，只考虑 3.5 英寸的机械硬盘。#### 接口目前硬盘接口主流使用的是 SATA 、 mSATA 和 M.2 接口，另外还有一些是 PCIe 接口（较少）。M.2 接口目前主要运用给迷你固态硬盘（ NMVe SSD ）， mSATA 也是一种比较小的固态硬盘（我现在主机里就用了一个 mSATA 的 SSD 做系统盘），而 SATA 则是机械硬盘和普通的 2.5 英寸固态硬盘使用。SATA 现在又分为 SATA 2 （又称 SATA 3G ）和 SATA 3 （又称 SATA 6G ），主要区别在传输率， SATA 3 的传输速率可以达到 6 Gb/s ，而 SATA 2 接口的传输速率则为 3Gb/s ，理论上 SATA 3 接口是 SATA 2 的两倍。所以购买机械硬盘的时候优先考虑 SATA 3 。几种不同的接口参考但现在也有外置硬盘座，是可以使用 USB 3.0 来代替 SATA 口和主板连接，传输速度不会差太多，不过不适合所有人，最好确认自己家里是否会有外力因素去碰到它（例如你家的猫会不会上桌 - - ），或者是容易发生地震之类自然灾害的地区，硬盘座需要有很稳定的外界空间才可以考虑。#### 转速机械硬盘常见的转速一般有 5400 转、 5900 转、 7200 转，硬盘的转速越高，读写的速度就越快，但是相对的，噪音也更大一些，一般来说 NAS 选用 5400 转也够用。#### 硬盘容量这里就不说一共需要多少个 T 的问题了，只讨论是买几个盘。比如京东二手上面西数 500G 的二手盘才 39 块钱，而一样是西数的 2T 二手盘却要 ￥ 219 ，在有一个四盘位的机箱，并且需求是 2T 容量的情况下，是不是买 4 个 500G 的比买一个 2T 的划算？当然不是，因为每增加一个硬盘，耗电量就会增加，所以尽量每个盘都是越大越好，虽然只看硬盘的耗电不算太大，但是 NAS 通常都是 7x24h 持续运行，加上其他的配件消耗每一个都多一点的话，在广州和深圳地区，除了住小区可以享受 6 毛钱一度的电费，其他地方都是 1.5 元一度电，这么贵的电费长时间算下来，可能真的很不划算。#### 参考资料SMR 瓦楞式堆叠磁盘是什么东西，和传统磁盘有啥区别这些硬盘不要买！2023 那些不推荐的机械硬盘垂直盘和叠瓦盘区别？叠瓦盘为什么不推荐？2023 年机械硬盘购买推荐2023 年，HDD 机械硬盘推荐，尽量不选叠瓦盘为什么说「买盘别买叠瓦盘」？一文带你看懂 SMR、CMR 的区别一文看懂硬盘的主要接口和传输速度SATA、mSATA、M.2、M.2（NVMe）、PCIE 固态硬盘接口详解## 搭配方案价格暂时都是以淘宝和京东的价格作为参考，实际购买的时候可以去拼多多比价。尺寸的单位都是 “毫米” ，顺序是 “长 x 宽 x 高” 或者 “长 x 宽” 。注：这里的方案一二三都是调研阶段整理的，在这里就不改了，我自己实际的最终搭配见下方的 最终方案 。### 方案一：迷你 + 外置搭配说明：自选迷你主机 + 硬盘笼 + 若干个 3.5 英寸的机械硬盘主要优点：存储容量大（外挂机械硬盘），机箱迷你低功耗，搭配省事一些缺点：拖个硬盘笼或者硬盘支架，怎么看怎么丑适合对象：刚入门 NAS ，还懵懵懂懂，但有一定存储需求的玩家千元入门：先列一下需要的配件和价格：硬件链接价格尺寸主机见下方搭配--主板主机包了--电源通常购买主机有送--风扇主机可以不用，但硬盘笼要搭配一个--硬盘笼4 盘位 3.5 英寸机械硬盘笼 + 1 个风扇￥ 33.8185 x 110 x 180硬盘日立机械硬盘 3.5 英寸 / 4T / CRM / SATA3 / 7200 转 / 64M 缓存￥ 195 x 2-内存条英特尔专用 DDR4 8G 2666MHz （记得备注发三星颗粒）￥ 65-配件总价格：￥ 489 ，如果觉得配件的价格占比偏高，可以适当调整硬盘方案，例如改成 2 个 1T ，或者是小黄鱼或者京东二手买二手盘。目前选的日立虽然早已被西数收购变成 HGST 系列，据说现在卖的价格亲民的都是拆机盘，但查了一下好像质量还可以，故障率非常低，这个预算也不奢求太多，我感觉可以买来试试。如果选购热门牌子像西数、希捷等，一定要注意查好型号是 SMR 还是 CMR ，很多详情页都不会显式告知是不是 CMR ，那么大概率是 SMR 。再看看主机的选择和方案总价：主机尺寸功耗价格方案总价畅网 J4105 标准板 准系统112.3 x 100 x 36.56W￥ 568￥ 1057倍控 G40-J4125 准系统137 x 127 x 40-￥ 580￥ 1069畅网 J4125 标准板 准系统112.3 x 100 x 36.56W￥ 628￥ 1117倍控 G30B-N5105 准系统137 x 127 x 40-￥ 680￥ 1169零刻 EQ12 N100 准系统124 x 113 x 3925W￥ 795￥ 1284畅网 N5105-i226 V5 准系统178.3 x 135.6 x 5510W￥ 883￥ 1372畅网 N100 准系统145.6 x 145.4 x 53.615W￥ 968￥ 1457关于畅网和倍控，据说畅网贵一些的原因是畅网的机箱散热和电源会好一些，差价也基本都差在机箱和电源上。### 方案二：纯迷你主机搭配说明：自选迷你主机 + 1 个迷你固态主要优点：主打各种迷你，低功耗，搭配省事，颜值一般也高一些缺点：存储容量一般（仅用一个固态硬盘）适合对象：刚入门 NAS ，还懵懵懂懂，并且存储需求不大的玩家千元入门：在方案一的基础上，把机械硬盘换成 NVMe 的固态硬盘即可，整体的价格方面会相对方案一低一些。但这个方案因为走了 SSD 存储，所以可能需要关注一下本身硬盘速度是否有影响。### 方案三：自组全部搭配说明：自选主板 + 带硬盘笼的机箱 + 若干个 3.5 英寸的机械硬盘主要优点：存储容量大（大容量机械硬盘便宜），机箱通常比较帅（也可以自己选择 3D 打印）一些缺点：比较笨重（例如机箱重大 4.26kg ，加上其他的硬盘、风扇，可能高达 10 至 15 斤），成本也较高适合对象：有玩硬件的经验，虽然刚入门 NAS ，但搭配起来不费劲的老司机千元入门：暂无时间推荐，根据前面基础知识部分的内容去搜符合要求的配件。硬件链接价格尺寸机箱支持 ITX 主板的四盘位机箱--主板搜索 ITX 主板配合一个高性价比的 CPU--电源选购一个 FLEX 小 1U 电源--风扇根据 CPU 和硬盘需要搭配选购--硬盘通常两个或者四个 CMR 机械硬盘--内存条根据主板要求选条 DDR4 8G 内存--## 最终组装方案毕竟第一次玩 NAS ，并且要存储的数据也不是多到特别多，所以出于在预算范围内的一个控制，还是尽量控制在一千块钱不要超出太多，最终我自己的方案如下：硬件链接价格尺寸迷你主机倍控 J4125 四核迷你微型工控机￥ 489.99136 x 127 x 40硬盘座绿联 3.5 英寸 USB 3.0 硬盘盒底座￥ 159162 x 112 x 62固态硬盘金百达 240G mSATA 固态硬盘￥ 61.81-机械硬盘西数机械硬盘 3.5 英寸 / 2T / CRM / 5400 转 / 64M 缓存￥ 189 x 2-内存条昱炎笔记本全兼容 DDR4 8G 2666MHz （记得备注发三星颗粒）￥ 73-总价 ￥ 1161.8 ，在 618 前买的，部分配件还进行了保价退了点钱（京东的服务就是好）。 迷你主机不需要风扇降温，而且送了电源适配器，所以这些配件的钱都省了下来。里面之所以有多一个固态硬盘是因为迷你主机支持插一个 mSATA 的 SSD ，刚好现在 SSD 价格又不贵，内置一个 SSD 用来装系统，然后机械硬盘就可以完全当存储盘用了。关于为什么选择硬盘座，是因为我在广州，这边几乎不会有地震，我家三只猫也不会上桌（装监控 4 年了，没有被抓到），加上我有一个闲置的航空箱，我都放到航空箱里面了，安全和稳定性还是很高的，另外一方面是因为我对网口需求不大，有一些迷你主机是四五六个网口，只有两个 USB ，我这个是两个网口，有六个 USB ，用 USB 3.0 来接机械硬盘也不会很慢。伪装起来还是有模有样的：伪装起来还是有模有样的弟弟好像发现了里面有什么奇怪的东西：弟弟好像发现了里面有什么奇怪的东西弟弟一回头：“我的航空箱呢？”弟弟一回头：“我的航空箱呢？”再往前看：“果然是它”再往前看：“果然是它”有一说一，航空箱内部的散热还是很不错的，而且空间很大，周围又可以穿线，真的很舒服！航空箱内部的散热还是很不错的## 系统的安装我的迷你主机系统是选择了 PVE ，全称是 Proxmox Virtual Environment ，一个基于 Linux 的虚拟化管理系统，可以在上面用虚拟机跑其他的系统，我的 NAS 系统就是其中的一个虚拟机。之所以选择这个方案，是考虑到我后面还要搞一下 OpenWrt ，它也是一个 Linux 系统，用来做软路由或者旁路由的。以后还有需要可以再装些别的系统跑其他虚拟机，所以调研了一圈 PVE 还挺适合我的。类似的虚拟化技术的 Linux 系统还有 VMware ESXi ，或者可以看看 UnRaid ，都是比较流行的方案。如果觉得需求不大，也可以选择加多一个引导 U 盘去安装群晖之类的 NAS 系统，直接跑 NAS ，不玩虚拟机。这是最终做好的 PVE 后台界面：PVE 后台这是在 PVE 系统上运行的群晖 NAS 系统操作界面：群晖 NAS写到这里好累，周末两天就过去了， PVE 和 NAS 系统的安装等回头再单独写一篇好了，除了系统安装之外，还有 Docker 、 Clash 代理 、基于 FRP 和 Cloudflare Tunnel 的两套内网穿透方案部署等等，感觉也蛮多东西可以写，这一篇就单独用来归纳硬件方面的吧，下一篇再找个时间单独整理系统和软件的。\n"
  },
  {
    "slug": "the-story-of-the-book-learning-vue3",
    "title": "我写了一本书《前端工程化：基于 Vue.js 3.0 的设计与实践》 想分享一下它背后的故事",
    "desc": "大家好，我是程沛权，经过差不多一年时间的打磨和优化，我的第一本技术书籍《前端工程化：基于 Vue.js 3.0 的设计与实践》出版上市啦！这是一本以 Vue.js 的 3.0 版本为核心技术栈，围绕 “前端工程化” 和 TypeScript 的知识点展开讲解的前端入门书籍。",
    "cover": "https://cdn.chengpeiquan.com/img/2023/05/20230506220635.jpg?x-oss-process=image/interlace,1",
    "content": "大家好，我是程沛权，经过差不多一年时间的打磨和优化，我的第一本技术书籍《前端工程化：基于 Vue.js 3.0 的设计与实践》出版上市啦！\n\n前端工程化：基于 Vue.js 3.0 的设计与实践\n\n这是一本以 Vue.js 的 3.0 版本为核心技术栈，围绕 “前端工程化” 和 TypeScript 的知识点展开讲解的前端入门书籍，主要面向以下读者人群：\n\n掌握了基础的 HTML 页面编写知识，想学习一个主流前端框架的新手前端工程师\n\n已经学会了 Vue 2 ，面对 Vue 3 的大版本更新，想快速上手使用的前端工程师\n\n非职业前端开发，但涉及前端的工作，需要掌握一个主流前端框架的全栈工程师\n\n书里面的知识点是按照工程师做项目的顺序梳理的，比较循序渐进的一个过程，读者可以收获到这些知识：\n\n了解如何入门前端工程化开发，掌握 Node.js 和 npm 的使用\n\n掌握前端领域多年来趋势走高、带有类型支持的 TypeScript 语言\n\n上手主流前端框架 Vue.js 的全新版本，并且在遇到常见问题时知道如何解决\n\n看到这里，我估计有部分读者会觉得眼熟，有熟悉的感觉是对的！因为在它被正式出版之前，有另外一个名字是叫《Vue3 入门指南与实战案例》，最早是部署在我的博客网站上作为本书配套案例和代码资源的 开源版本 分享的。\n\n截止至 2023-05-03 五一假期的最后一天，开源版本已经累计了大约 220 万的阅读人次，受到了不少读者朋友的关注和支持，所以我相信很多人是看过它的在线版本，上面这段话其实就是前言里面的一部分。\n\n今天这篇文章更主要是想分享一下这本书的由来，还有一些关于我、关于写书这些事背后的一些故事，希望感兴趣的读者可以继续支持！\n\n## 目录详情和购买地址\n\n先放上纸质书的购买地址吧，关于书的目录和内容介绍可以在商品详情查看：\n\n☞ 访问 京东商城 购买\n\n☞ 访问 天猫商城 购买\n\n如果您对我的作品认可，建议购买纸质版，纸质书在电子书的基础上，经过机械工业出版社的编辑老师们的内容优化、校对勘误、排版美化，更成体系，在此特别感谢李晓波编辑对我将开源作品出版为纸质作品的支持，李老师全程帮忙跟进了无数的大事小事，也给我科普了很多出版方面的知识，十分尽职！\n\n## 这本书怎么样？\n\n在出版纸质书之前，电子版就开通了基于 GitHub Issue 的评论功能，收到了很多读者给我的反馈和交流，摘选了一部分如下（排名不分时间先后）：\n\nGitHub 上的读者评论\n\n也有来自宝岛的小姐姐热心安利（我就说某段时间突然有很多来自台湾的工程师关注，然后 Google 了一下发现了这个推，感谢我的热心网友们！\n\n来自宝岛的小姐姐热心安利\n\n因为之前有热心读者问我有没有赞赏渠道，所以我从去年 10 月份在文档上挂了一个赞赏码，可以给我家三只猫猫打赏点罐头，也收到了很多读者的捐赠，有好几笔是大额的赞赏，特别特别感谢！！！\n\n一些赞赏记录\n\n所以关于这本书的内容质量，我相信您看到这里时应该也有了一个大概的了解！\n\n放上我家三只猫，欢迎在线吸猫！\n\n我家的三只猫\n\n我家的三只猫\n\n## 这本书是怎么写出来的？\n\n作为写了一本大约 32 万字的成品书籍的作者，我一开始并没有很功利的想把它写成一本书，它最早最早的前身其实是我无数日夜在学习过程中的笔记碎片。\n\n刚开始关注和使用 Vue 3 的时候还是 2020 年，那段时间资料很少，相关的官网也只是基于 Vue 2 的内容向上适配了一下，并且只有英文版，其他的随手可得的资料，真的好少好少… 我那段时间也算处于一个比较早期的开荒阶段，遇到问题也只能 Google 和 StackOverflow ，还有在 GitHub 仓库的 Issue 区和源码挖挖看有没有解决方案。\n\n再后来发现还是不太够用，慢慢地又跑去 RFC 仓库 挖掘一些还没有正式公开，但其实已经实现的 “隐藏功能” ，期间也整理过一些文章分享出来过（例如： Vue3.0 最新动态：script-setup 定稿 部分实验性 API 将弃用 ， Evan 大佬还在评论区亲自帮忙解答大家的问题）。\n\n因为开荒的过程都是利用本就不多的休息时间，所以早期为了解决各种问题和先把项目做出来，也没有第一时间整理博客笔记，我通常的习惯都是先把找到的资料丢给我一个专门存档临时笔记的微信小号，作为一个可检索的 “便签” 。\n\n当时记录的一些临时笔记\n\n再后来发现实在太多了，这么零散的记录我自己回头也容易忘记，秉着对费曼学习法的多次实践（用输出来倒逼输入，真的特别有效！），逐步整理出了第一个版本，在 2020 年国庆节那会部署到了博客上面，刚上线的时候它还只是一本很纯粹的关于 Vue 3 的入门学习指南，内容比较单一，阅读门槛也比较高（需要本身已经熟悉了 Vue 2 才能看懂我在说什么）。\n\n很感谢第一波读者的鼓励，很热心地给了我评论反馈，还收到了很多邮件交流遇到的问题，经过不断地迭代，慢慢地补充了很多通俗易懂的例子，并且逐步增加了关于前端工程化和 TypeScript 的入门学习内容。\n\n期间还有很多读者自发帮我宣传（ e.g. PR #6075 ），让我写的内容逐步被更多的人看到，所以到了后面一共有三家出版社联系了我出版事宜，也才有了后面这些出版相关的事情（因为收到不同出版社的邀请在时间上跨度比较大，所以我也是选择了最早联系我的李晓波编辑和机械工业出版社，在这里也很感谢其他出版社的编辑对我的作品的认可！）。\n\n## 我是一个什么样的人？\n\n再来说说我自己，我并不是一个很纯粹的程序员。\n\n认识我久一点的朋友也知道我并不是从毕业就一直在做开发，虽然读书那会选了网络专业也勉强算是科班出身（哈哈哈哈我真的不太想提及这些往事，因为那个时候自己也还挺不懂事，老在挂科边缘徘徊，经常这边老师教完知识，过段时间我又还给老师了，反正就是成绩不怎么好的那一类人），相对于做开发或者运维等更重技术的岗位，我那个时候更喜欢打游戏、混各种论坛社区写一些挂机脚本、喜欢看人家怎么做产品设计等东西，所以毕业后跑去游戏行业做了产品运营（我在 UC 的那两年就是做产品运营）。\n\n一开始倒是觉得做运营挺有趣的，但后来发现我的运营 KPI 很大程度依赖于在重要节点的各种活动和宣传合作页面用于推广，但 “拿不到排期” 这个事情总是在阻碍着我达成 KPI ，后来我就跟技术部的同事发起了一个小小的请求：“一些简单的需求页面我自己写，你们有空的时候能不能稍微帮我审查下代码和安排部署？” ，然后我就开始在工作时间干起了写代码的活，我负责的运营业务的数据指标也因为需求能如期上线而基本能按预期跑满，从此就一发不可收拾。\n\n但那段时间我还不敢把自己定位为程序员去换工作，毕竟学的越多越觉得自己渺小，计算机的世界里有太多自己没有接触到的东西，所以 2015 年从 UC 跳槽去网易游戏的时候，我还是去面的运营岗位，进入了大话手游业务线，那段时间刚好面临大话手游即将上线，已经在计划中的需求 1234 是真的多，但又是喜闻乐见的 “没有排期了” ，所以入职后作为一个运营，安排给我的第一个任务是写一个答题器，我就……（此处是 Max 的问号脸.jpg ）\n\nMax 的问号脸.jpg\n\n其实是我当时的运营简历也写了我会写页面，在网易的面试过程中也聊到了我在 UC 自己做自己的需求的经历，所以当时的网易总监也知道我可以写… 经过 “一直需求顺利上线一直爽” 的阶段后，再后来就在部门内就成立了自己的技术组、产品组，开始有了自己的前端开发和产品策划等不同岗位，所以从 2016 年开始我就开始正式以写代码为生了，到 2023 年的今年，刚好 7 年。\n\n兜兜转转从技术专业跑去做产品运营，再从运营又杀回来做技术，经常有人问我那几年后不后悔，也有人很好奇我转回技术这段过程难不难。\n\n先说关于难不难，我只想说两个字：“热爱” ！当你对一件事情有了足够的热爱，真的没有什么难的。这里的 “热爱” 指的是可以长期保持数年的喜欢不变心，而不是三分钟热度的 “教练我要学” 盲目跟风。\n\n再说说关于后不后悔这件事，至少目前的 7 年里是没有后悔的，我本身从小就不是一个按部就班的人，总是跟着我的兴趣去做我喜欢的事情，青少年时期我的同学都喜欢看球、喜欢听流行歌曲、喜欢唱情歌，而我那个时候就已经是一个享受着孤独沉迷在自己世界里的听摇滚乐的人，从来不看球，从来不听情歌，至于在其他人眼里可能显得比较独来独往和特立独行，从小好像就不是特别在意。\n\n我家境很一般，在我工作之前，我爸爸妈妈每天忙碌养家也只是赚个温饱，所以我基本上是没有零用钱这种东西，虽然早在初中高中那会就想玩乐队，但吉他贝斯等乐器和学琴的费用在当时真的是完全消费不起，但也没有妨碍我对它们一直保持热爱，买不起我就自己做，自己画版型，自己锯木料，自己上油漆，给自己做了最喜欢的 BEYOND 乐队吉他手阿 Paul 在 1991 年演唱会上的那把斯坦伯格的无头吉他模型满足自己内心的 Rock'N Roll ，这可能是我最早期的自己的需求自己实现吧啊哈哈哈。\n\n自己做的吉他模型\n\n工作后身边的同龄人开始恋爱结婚生子学车考驾照，我是完全反着来，因为不喜欢坐车和极少出门，所以我到现在也没有想考驾照的念头，反而在爸妈眼里的 “你也老大不小了（后半句就是你该成家了… ）” 的年纪才开始自学弹琴、组乐队玩演出圆我当初的乐手梦，当年第一把琴还是借的，只想着过把瘾，结果发现真的放不下了，到了后面自己也走上了买自己喜欢的琴的不归路。\n\n左边是借的第一把贝斯，右边是自己的琴\n\n再后来有了一些志同道合的伙伴一起夹 Band ，有幸也登上了几次三千多人的舞台，在别人都是唱流行歌曲和谐氛围里，我们又玩起了相对小众的新金属，哪怕现在我同学孩子都已经很大了，我还每天沉迷在 “塞狗、发克鹰、馊兽” 这样的嘶吼音乐里（这是 Slipknot 活结乐队在 Psychosocial 这首歌的某次现场版开场，特别燥的一个 Live 版）…\n\n对于爱好和生活之间的平衡，这一点我特别佩服中山大学的何广平教授，白天衬衫教书，晚上甩头演出，双面人生太让我羡慕了！（可戳： 一边是量子物理，一边是极端金属，中大教授诠释科研与音乐的完美融合 了解何教授）。\n\n用了好久 “胸口碎大石” 这个乐队名\n\n头发也是从 2018 年初就再也没有去剪过，从光头到莫西干再到现在的长发及腰，我感觉我还可以继续留下去…\n\n“程小姐” 你好…\n\n最让我走上 “只过自己喜欢的生活” 的不归路就是下定决心去文身了，从不到 20 岁的时候就想要纹一条花臂，也是念念不忘了多年后终于开始了行动，第一个文身是我的琴，然后是我的猫，然后是音乐元素，还有一些逆境阶段的有意义的图，有一些是自己设计点草图，到了后面默契上来了就全部交给我的专属文身师 Johnny 了，从 2016 年文身到现在，还在继续加图案，每一个图案都在自己的人生阶段里有着不同的意义。\n\n我的花臂\n\n说了这些往事，主要还是想回到前面说的，只要保持足够的 “热爱” ，很多困难真的不是困难，而且因为热爱，也会自然而然的遇到一群志同道合的好朋友，很感谢这么多年一路陪我玩陪我成长以及在我转行过程中给到了很多帮助的同事好友！\n\n如果对我的更多往事感兴趣，可以扫码查看我之前整理的我在网易五年的工作和生活的记录。\n\n记录一下在网易五年来的工作与生活\n\n## 表达能力如何培养？\n\n最后分享一个可能会比较多程序员都比较关心的问题，如何锻炼自己的码字能力和表达能力。虽然我很宅，不爱社交，但很多读者在阅读了我的文字之后给我的反馈都是看完容易理解，性格和表达似乎出现了矛盾？其实不然。\n\n我之前写过一篇文章叫 Markdown 工程师的一周 ，分享过我曾经一周写了大约 25 个小时的 Markdown 文档，几乎一天有 5 个小时在码字。\n\n一周写了 24 多个小时的文档\n\n为什么我不觉得写文档是个很费劲的事情？因为我自己常常保持的习惯有主要两个：\n\n一个是保持每天写日记的习惯，把自己的喜怒哀乐都记录到日记里，开心的时候记录起来以后可以回顾，不开心的时候用文字把负面情绪输出走，这个方式可以很好的让自己不会把坏情绪带回家里或者带入到工作中，从几个字到两三千字我都写过，内容的多和少并不需要很刻意的去要求，重要的是这一天对你来说，过的有没有意义，我从 2019 年把写日记的习惯重新培养起来到现在也有 4 年了，已经连续写了 4 年日记，没有中断过。\n\n另外一个习惯是上面说的费曼学习法，把自己学到的东西输出成博客文章或者其他什么载体都可以（例如下面的两个 PPT ，是我之前在一些分享会上的演讲稿，已脱敏），一开始写分享内容时可能会觉得无从下手，但是如果能够长期保持习惯，久而久之自己所写的东西就会开始有了逻辑有了条理。\n\n六步写出有效的需求文档 从技术的角度分析：产品需求如何 “以德服人”\n\n前端技术复盘 面对停运项目重启复活时的思考与落地\n\n因为上面两个习惯，让我后来开始记录我平时做菜时的菜谱也蛮多人爱看。\n\n左边是我的小红书账号，右边是我曾经写了两千多字的日记\n\n## 写在最后\n\n能看到这里的朋友对我真的是真爱了，希望我的书也能给到您一些帮助，希望您在继续学习的路上，或者转行的路上，都可以实现自己想达到的目标！\n\n再次附上买书链接：\n\n☞ 访问 京东商城 购买\n\n☞ 访问 天猫商城 购买\n\n如果想问我接下来会做什么？我也是继续保持学习哈哈哈哈哈哈！我在今年三月份刚刚换了新工作，来到了一个很牛逼的团队，技术氛围特别好，队友们的能力也好强，未来也有很多我之前没有接触的东西，我也还在继续成长！\n\n之前跟朋友说的哈哈哈\n\n最后的最后，分享一下我保持学习的动力和精力的秘诀……\n\n一年多前觉得是这个原因\n\n现在还是觉得是这个原因\n\n谢谢您的支持！\n"
  },
  {
    "slug": "git-selective-merge",
    "title": "Git的选择性合并操作笔记：合并某个版本或某个提交",
    "desc": "今天帮朋友解决了一个代码合并的问题，他有两个项目， B 项目最初是基于 A 项目作为架构底子，根据业务进行了不同需求的开发，沉淀了不少新功能，而 A 项目本身也在继续维护，可以简单的理解为， A 项目是通过类似 create-preset 这样的脚手架拉取下来的一个项目模板，而 B 项目是一个业务项目，所以 A 项目通常只提供一些公共功能的维护升级，而 B 项目更注重业务功能开发。",
    "cover": "https://cdn.chengpeiquan.com/img/2023/02/20230202170739.jpg?x-oss-process=image/interlace,1",
    "content": "今天帮朋友解决了一个代码合并的问题，他有两个项目， B 项目最初是基于 A 项目作为架构底子，根据业务进行了不同需求的开发，沉淀了不少新功能，而 A 项目本身也在继续维护，可以简单的理解为， A 项目是通过类似 create-preset 这样的脚手架拉取下来的一个项目模板，而 B 项目是一个业务项目，所以 A 项目通常只提供一些公共功能的维护升级，而 B 项目更注重业务功能开发。项目作用A 项目基础模板，提供一些公共功能的维护升级B 项目业务项目，在 A 项目的基础上，围绕具体业务进行功能开发因此 B 项目想升级 A 项目的功能，并不是不可能，冲突也不一定会很多。不过因为不是每个版本都升级，所以如果手动合并代码，工作量又比较大。分享了几个方案给他尝试，当然这些操作对我来说也不怎么常用，所以记录起来，以后自己用到也不用重新踩坑。下面的演示都基于同一个 Git 仓库的不同分支，实际处理中，可以选择把 B 项目放到 A 项目的某个分支来实现合并，也可以通过  ，将两个项目关联到同一个 Git 远程仓库。## 合并某个版本先看看一个版本合并的操作，假设 B 项目不想完全升级到 A 项目的最新版本（可能因为最新版本是一个包含破坏性升级的 Major 版本，出现了很多不兼容的情况），那么可以选择其中一个 Minor 次要版本进行升级。### 处理思路由于并不是每个项目都有打 Tag ，所以可以选择指定某个 Commit Hash 作为临界点。在这个例子里，将 A 项目在某个 commit 记录之前的功能，都需要同步给 B 项目，这里使用  命令来实现。### 具体操作随便拉取了一个旧的版本，拉取深度为  （主要参数是  ，其他的  和  可以视情况指定，这里只是为了单纯拉取  分支的代码）。进入仓库文件夹，使用  命令查看本地仓库和远程仓库的  分支差异（这里使用了  参数简化了提交记录的展示）。看一下 Log ，确实是 10 条 Commit 差异：将本地的 Commit 记录重置到拉取时的那个 Commit ，如果不执行这一步，在 Merge 的时候会提示  的信息，无法合并。在 10 条 Commit 差异里，现在使用  命令合并第五条 Commit （它的 Hash 是  ），保留 5 条差异。合并成功反馈：再次查看本地  分支和远程  分支的差异：本地的 HEAD 已经在第五条了：为了避免覆盖，创建一个新分支来提交刚刚本地合并后的代码：再次检查一下新分支  分支和远程  分支的差异：确认没有问题（因为是从本地  分支创建的，所以代码是一样的，但在进行敏感操作之前，还是养成一个二次检查的习惯）。可以提交到远程的  分支了（也就是实际上 B 项目代码所在的分支）。main 分支的提交记录dev 分支的提交记录## 合并某个提交有时候仅仅想单独合并某一条或者某几条 Commit 的改动，不希望包含该 Commit 之前的其他 Commit ，可以选择这个方案来处理。### 处理思路与 合并某个版本 的操作不同，这种情况会产生新的 Commit Hash ，因此整个提交历史会被打乱，所以比较适合简单的代码合并，例如某个模块新增了功能，而其他的功能并不需要，只想要这个模板的新功能，那么选择这个方案会比较合适。这个方案就不再是使用  了，而是使用  命令来实现。### 具体操作继续在  分支上操作，也是先查看差异：由于前面 合并某个版本 的操作是合并第五个 Commit 以及之前的提交记录，因此还有 5 个未同步的记录。这里挑选未同步的记录里面的一个，只合并这个：合并成功反馈：现在重新查看本地  分支和远程  分支的差异，可以看到多出来一个新的提交了。## 其他补充在演示项目上操作通常还是很顺利的，但实际项目里可能会存在代码冲突，建议在操作时，按照小版本的提交去合并同步，减少冲突的解决成本。\n"
  },
  {
    "slug": "2022-year-end-summary",
    "title": "年终总结：2022年的一些回顾和2023年的一些小规划",
    "desc": "2022 对我算是比较特殊的一年，虽然因为疫情原因彻底宅了一年，但也没有闲着，换了工作换了城市，回到了阔别两年的第二故乡广州，工作之外的学习和生活对个人的成长也有一些值得复盘的地方。",
    "cover": "https://cdn.chengpeiquan.com/img/2023/01/20230101235604.jpg?x-oss-process=image/interlace,1",
    "content": "2022 对我算是比较特殊的一年，虽然因为疫情原因彻底宅了一年，但也没有闲着，换了工作换了城市，回到了阔别两年的第二故乡广州，工作之外的学习和生活对个人的成长也有一些值得复盘的地方。\n\n## 工作与生活\n\n2020 年疫情爆发那年发生了很多事情，最终也决定从服务了五年的网易公司离职（见 记录一下在网易五年来的工作与生活），随即和几个朋友跟着大佬去了深圳，因为大家都是扎根广州，所以都把深圳当成一个临时过渡的城市，所以今年时机成熟的时候就又一起回到了广州。\n\n回广州后也终于不用再苟在城中村里了，在依山傍水的山景房里，三只猫也迎来了久违的阳光，每天睡到自然醒，醒了有东西吃有玩具玩，还不用出门工作，过的比我还幸福。\n\n我从五月底回来后就一直很忙，因为广州这边也是刚成立的新公司，太多事情要忙，加上业余时间也有其他事情， 菜谱 也慢慢停更了，不过偶尔还是有在做饭，新的一年看看调整下生活节奏重新运营起来。\n\n虽然工作很忙碌，但在初创公司的日子里倒也是很有趣，因为人少（目前加上老板还不到十五个人），所以自己也有机会开始承担起一些前端工程师之外的开发工作，例如写 App ，写客户端，写服务端，写爬虫，写区块链，当然都是围绕着 Node.js 进行的全栈开发。\n\n写着写着就没有什么时间写页面了，所以今年也是把 Tailwind CSS 这一类原子框架大幅度的往工作项目里用，这样在需要写页面的时候可以不怎么写样式了，对 Flex 布局熟悉的前端工程师来说， Tailwind 风格的开发模式做东西真的非常快，很适合初创公司老板说 “啊啊啊这个东西很着急” 然后第二天就可以给到他。\n\n这一年是真的忙碌（见下文的 开源社区 部分），以至于几乎没有什么运动量，可能也因为运动太少，所以从九月份开始，从痛风发作到新冠病毒，陆陆续续当了一个季度的病号，不过有一点算是不幸中的万幸，就是因为一直宅着，所以年底新冠阳性的时候仅仅只是个弱阳，低烧了一个晚上就开始在恢复健康了，相对于在朋友圈看到一些朋友病得五颜六色，我还是挺幸运的。\n\n另外关于生活的话，就是头发达到了历史上的最新长度，往后甩的时候已经过了腰了，虽然发质一如既往的差，但我并不关心发质哈哈哈哈，长度才是王道。\n\n头发达到了新的长度\n\n## 开源社区\n\n今年在 GitHub 的活跃度比去年高了不少，而且很神奇的达到了全勤，因为疫情的原因，还有换城市和新工作等事情，今年也没有出远门或者回家待几天，每天都在有电脑的屋子里待着，所以每天都有在 GitHub 上操作（截图生成自 GitHub Contributions ），也归功于今年把很多有的没的代码都托管到 GitHub 上了，包括一些 to-do list 也会有个 Markdown 仓库作为临时笔记，很方便哈哈哈。\n\n这两年在 GitHub 的活跃情况\n\n虽然这么活跃，但开源项目其实没有参与多少，基本上都在维护去年的一些旧项目，其中投入最多的是之前写的那本关于 Vue 3 的书 Learning Vue3 。\n\n今年一月份的时候在知乎收到一条私信，是出版社的编辑发现了我写的东西，邀请我参与到书籍的出版工作中。当时由于临近过年比较忙，没有立即答复是否参加，后面四月份编辑老师又联系了我，在考虑了自己的时间和目前手里头比较有积累有篇幅的内容后，咨询了是否可以用现有的开源内容整理出版（还举了阮一峰老师的 ES6 入门教程 的例子），得到了肯定的答复之后，就开始安排时间调整 Learning Vue3 的内容。\n\n由于当时 Vue 3 已经成为 npm 安装时的默认版本，并且中文官网也建设起来了，考虑到继续单独讲述 Vue 3 的内容显得有点 “过时” （毕竟当时写这本书的背景是国内没有什么 Vue 3 的资料，并且还处于公测但未完全替代 Vue 2 的阶段），在出版社编辑老师的建议下，续写了关于前端工程化的内容，以降低本书的学习门槛，所以可以看到我从 四月底的更新记录 就慢慢不再局限于 Vue 了，而是一直在更新前端工程化的内容。\n\n再之后的几个月就一直在补充新内容，并且按照出版社的供稿规范调整了叙述风格，最终整个文档的风格就变得比较有 “专业性” ，不再是嘻嘻哈哈的逗逼语气，自己感觉有点像阮一峰老师，确实在阮老师的博客里受到了很大影响。\n\n很高兴续写的内容得到了线上读者的认可，不仅仓库从 100 Star 慢慢涨到了现在接近 500 Star ，还有很多读者给我留言，给了我很大的鼓励！\n\n仓库接近 500 Star 了\n\n在 GitHub 仓库里的评论\n\n在 GitHub 仓库里的评论\n\n在 GitHub 仓库里的评论\n\n在 GitHub 仓库里的评论\n\n在 GitHub 仓库里的评论\n\n调整后的叙述风格也被读者认可，在 2022 年底突然有一群台湾开发者关注了我的 GitHub 账号，搜索了一下才发现原来 被台湾一位技术大 V 推荐了 ，她很喜欢我的风格，我很开心哈哈哈，付出得到了回报，得到了认可！\n\n台湾网友的分享\n\n其他的开源项目大部分是一些 npm 包，总下载量也突破 35 万次了（数据来源 npm-stat ）。\n\n来自 npm-stat 网站的统计数据\n\n有个 Vite 插件被大佬的项目引入后带火了，现在每周大约保持在 7k 左右的下载量，也收到了其他开发者的 PR 贡献（ #16 ），期间认真的评审了代码和给予了意见点评，直到那天才感觉在认真参与开源项目协作，在此之前都是自己单打独斗，或者发起一些没有什么修改意见的翻译 PR ，很少这样在 PR 过程中讨论功能的取舍。\n\n在 PR 过程中讨论功能的取舍\n\n还有一个使用量比较多的插件是一年多前做的一个自用的小工具，很久没维护，结果一直有人用，前段时间还提了一些反馈，所以年底有空于是重新维护了起来，还用 Photoshop 鼠绘了个 Logo ，偶尔设计点东西还挺有意思的，虽然渣渣，但我觉得很贴合用途哈哈哈。\n\n新官网上挂着自己画的 Logo\n\n另外还有一点比较值得高兴的是，新开坑的开源仓库都已经全部使用英语了，包括代码里的注释，还有 issue 的交流，虽然语法和用词什么的不一定对，但在 Google 翻译校验了一下还是可以识别的，多读多写多练习，总有一天可以不太依赖翻译工具的。\n\n## 新年展望\n\n刚好很多事情都在 2022 年底弄完了，新的一年业余时间应该不会那么忙了，我要多运动，多爬山，明明现在住的地方对面就是一座山，我居然一次都没有爬过，真是浪费啊浪费可耻哈哈哈。\n\n底迪很喜欢在阳台看山景\n\n然后把三年没弹的贝斯重新弹起来，太久没有弹琴了，自从去了深圳，总感觉人在漂泊，以至于从 2020 年之后就没有再弹过琴，希望今年可以重新积累一些可以演奏的曲子。\n\n技术方面，长远的规划不好说，梳理了一下最近几个月的计划吧：\n\n重构博客（上一次是 2020 年 1 月，也有两年了），技术选型还是偏向于比较新的前端技术栈，找个时间调研一下\n\n认真学一下 React ，其实很久前就有想法，但因为缺乏可落地的个人项目，所以一直没动手，只是简单的写了几个 demo ，去年写 App 的时候因为主要技术栈还是 Vue ，所以选了 uni-app ，但感觉体验并不是太好，把 React 玩熟悉之后以后也可以切入 React Native 开发\n\n重构之前写的命令行工具 create-preset ，一个模板拉取工具，现在在用的 GitHub 镜像挂掉了一直没去修，打算把一些自己维护的模板处理成本地一起发包，不走 GitHub 下载了，其他人的社区模板就继续拉仓库，不过要考虑现有的 API 兼容，只能是无感知的重构，感觉要做的事情也不少\n\n其他的可能就是 Web 3 方面的开发继续深入吧，智能合约和 dApp ，也是未来的趋势，并且基本上都是以前端的技术栈为主，作为前端工程师，天生有前端优势的情况下，不玩下区块链多可惜！\n"
  },
  {
    "slug": "zhihu-collection-helper",
    "title": "知乎收藏夹助手：自动化将专栏的文章添加到收藏夹",
    "desc": "知乎收藏夹助手，可将专栏的文章添加到收藏夹中（因为专栏的内容通常比较垂直，不会太杂），适用于收藏夹在创建初期需要大量内容填充的情况。",
    "cover": "https://cdn.chengpeiquan.com/img/2022/10/20221021235753.jpg?x-oss-process=image/interlace,1",
    "content": "知乎收藏夹助手，可将专栏的文章添加到收藏夹中（因为专栏的内容通常比较垂直，不会太杂），适用于收藏夹在创建初期需要大量内容填充的情况。参考收藏夹：凶杀案·刑侦与法医## 使用方法这是一个 Node.js 项目，因此需要提前安装 Node.js 。不过程序正确运行的前提是需要先准备好一个 配置文件 。## 配置文件基于 dotenv 管理配置文件，创建一个名为  的文件保存到根目录（与 src 目录同级别）。注意所有的配置项的值都是字符串，也就是使用双引号括住。配置选项作用数据来源或设置说明COLLECTION_ID要添加数据的收藏夹 ID收藏夹的 URLDATA_SOURCE_COLLECTION_ID要爬取的收藏夹 ID收藏夹的 URLSTART_PAGE_NUMBER起始的爬取页数如果中间LIMIT分页条数限制上限 X_AB_PB请求的鉴权参数知乎 AJAX 请求的 X_XSRFTOKEN请求的鉴权参数知乎 AJAX 请求的 X_ZSE_93请求的鉴权参数知乎 AJAX 请求的 X_ZSE_96请求的鉴权参数知乎 AJAX 请求的 X_ZSE_81请求的鉴权参数知乎 AJAX 请求的 COOKIE请求的鉴权参数知乎 AJAX 请求的 ## 其他说明因为操作太快会导致行为限制（返回  ），所以每次请求之前都通过 sleep 方法进行一次随机秒数的睡眠，可在这里调整操作间隔。如果账号被限制了，等几个小时后再试就可以了。\n"
  },
  {
    "slug": "vite-vue3-prerender",
    "title": "用Vite更简单的解决Vue3项目的预渲染问题",
    "desc": "之前 Webpack 项目经常会用到预渲染，现在团队都开始用 Vite 了，所以弄一个基于 Vite 的 Vue 3 预渲染 demo 可以参考。",
    "cover": "https://cdn.chengpeiquan.com/img/2022/06/20220605213042.jpg?x-oss-process=image/interlace,1",
    "content": "之前 Webpack 项目经常会用到预渲染，现在团队都开始用 Vite 了，所以弄一个基于 Vite 的 Vue 3 预渲染 demo 可以参考。预渲染和静态生成器比较接近，也可以参考我的 SSG 博客 用 vite-ssg 和 vite-plugin-pages 来处理。不过 Vite 本身对预渲染也提供了原生的支持，简单的预渲染可以自己写写代码来改造实现。## HTML 部分项目根目录下  里需要追加至少两条资源注入位置的注释：注释语句作用是否必须预加载资源是页面内容是SEO 优化：写入标题否SEO 优化：写入描述否SEO 优化：写入关键词否并把入口文件改成  ，原来的  会作为客户端和服务端启动时的引用。完整代码如下（源码：index.html ）：其中除了两条必须的注释语句外，可选的部分见 SEO 优化 。## 入口文件普通项目是使用  作为入口文件，需要改造成两个入口：注释语句作用源码客户端入口查看源码服务端入口查看源码而原来的  只作为入口函数导出，详见源码： main.ts## 路由不再需要手动配置路由结构了，改造后直接读取  的路由组件来生成页面路由。详见源码： router## SEO 优化做预渲染为的就是做 SEO ，所以需要自己提前配置好 SEO 的 TKD 三大要素，这里我也是放在  目录下一起管理了。实现逻辑见 预渲染 部分的说明，这里是以最终每个页面的相对路径来判断要写入的 TKD 信息的。详见源码： seo## 预渲染 这个文件是执行预渲染行为，可以按照路由目录的结构渲染为静态 HTML 文件。运行  ，可以把  作为静态站点部署。当然我也封装了  一次性编译所有平台（ Client / Server / Static ）。详见： package.json 里的  部分。## 常见问题改造过程中遇到的几个问题：### 水合节点不匹配控制台报错：警告来自于 hydration.ts ，一般可以无视……当然也可以了解更多的知识点： understand-and-solve-hydration-errors-in-vue-js### 路由跳转控制台报错：需要使用  标签来包裹路由视图，详见 Suspense 。\n"
  },
  {
    "slug": "pinia",
    "title": "Pinia怎么用？Vue3全局状态的管理工具Pinia教程",
    "desc": "Vue 官方推出的全局状态管理工具目前有 Vuex 和 Pinia ，两者的作用和用法都比较相似，但 Pinia 的设计更贴近 Vue 3 组合式 API 的用法。Pinia 目前还没有被广泛的默认集成在各种脚手架里，官网也只有英文版，整理了教程便于提前学习。",
    "cover": "https://cdn.chengpeiquan.com/img/2022/04/20220405011839.jpg?x-oss-process=image/interlace,1",
    "content": "Vue 官方推出的全局状态管理工具目前有 Vuex 和 Pinia ，两者的作用和用法都比较相似，但 Pinia 的设计更贴近 Vue 3 组合式 API 的用法。\n\n## 教程地址\n\n点击访问：全局状态的管理 查看完整内容。\n\n## 为什么写这篇内容\n\n截止至 2022 年 4 月， Pinia 还没有被广泛的默认集成在各种脚手架里，官网也只有英文版，整理了教程便于提前学习。\n\n由于 Vuex 4.x 版本只是个过渡版，Vuex 4 对 TypeScript 和 Composition API 都不是很友好，虽然官方团队在 GitHub 已有讨论 Vuex 5 的开发提案，但从 2022-02-07 在 Vue 3 被设置为默认版本开始， Pinia 已正式被官方推荐作为全局状态管理的工具。\n\nPinia Logo\n\nPinia 支持 Vue 3 和 Vue 2 ，对 TypeScript 也有很完好的支持，延续了 Vue3入门指南与实战案例 的宗旨，在这里只介绍基于 Vue 3 和 TypeScript 的用法。\n\n## 欢迎 Star\n\n教程属于 Vue3入门指南与实战案例 的一部分，如果觉得对你有帮助，欢迎到仓库给个 Star 鼓励。\n"
  },
  {
    "slug": "cooking-cookbook",
    "title": "每天吃什么？上班带什么饭？程序员教你做菜啦！",
    "desc": "从 2021 年底陆续开始维护这个菜谱栏目，终于有一些像模像样的作品沉淀了，你可以在这里了解一些关于如何下厨烹饪的菜谱和教程，这是来自一名从小就学做饭的程序员的原创经验。",
    "cover": "https://cdn.chengpeiquan.com/img/2022/02/20220221130454.jpg?x-oss-process=image/interlace,1",
    "content": "大家好，我是小红书的美食博主 @底迪 ，哈哈哈哈哈哈哈哈哈哈哈哈没错，我是一个喜欢做饭的程序员。\n\n不过这不是重点，我建这个 只有一个文档的仓库 只是想把它置顶在我的 GitHub 主页，菜谱是托管在我的 个人博客仓库 上，因为不想搞太多域名不好管理维护，所以只是作为一个二级目录作为开放访问。\n\n从 2021 年底陆续开始维护这个菜谱栏目，终于有一些像模像样的作品沉淀了，你可以在这里了解一些关于如何下厨烹饪的菜谱和教程，这是来自一名从小就学做饭的程序员的原创经验。\n\n## 菜谱预览\n\n目前有三端可以查看到我发的菜谱。\n\n### 网页版\n\n托管在我博客上面，如果你用电脑访问，网页版更方便。\n\n点击查看： https\\://chengpeiquan.com/cookbook\n\n界面预览：\n\n菜谱网页版预览\n\n### 小程序版\n\n建议使用小程序，因为提供了很多网页版和 APP 版都不具备的功能，比如 “今天吃啥” 这样的一些小工具。\n\n可以扫码或者搜一搜 “底迪” ，欢迎添加到 “我的小程序” 里。\n\n搜一搜：底迪\n\n界面预览：\n\n小程序：底迪\n\n### APP 版\n\nAPP 我没自己开发，如果你有用小红书的话，关注 @底迪 即可，日常互动也是在小红书上为主！\n\n界面预览：\n\n小红书：底迪\n\n## 更新频率\n\n虽然每天都做饭，但并不会每天都更新，因为有时候会吃重复的菜，并不是每天都有新花样哈哈哈哈。\n\n不过每周还是能有一些不一样的菜品产出，所以目前的更新频率大约是 “周更” 。\n\n菜谱目前都是先更新在小红书上作为初版笔记，然后再重新排版到我博客上，两边的阅读体验有所不同，具体可以查看：小程序使用帮助。\n\n## 问题反馈\n\n如果你对菜谱有什么不理解的地方，有这些方式可以跟我联系：\n\n可以在小红书上 @底迪 给我私信，我的美食博主身份本身就主要活跃在小红书上，那是最直接的联系方式哈哈\n\n可以在知乎上私信 @BASS ，这也是我的活跃账号\n\n给我发邮件 chengpeiquan\\@chengpeiquan.com\n\n到我的 博客仓库 提 issue ，毕竟我的菜谱都托管在博客上面，网页版也是博客的一部分\n\n## 接受 PR 吗？\n\n菜谱都是我自己亲自尝试并且认为好吃值得分享的作品，暂时不接受多人协作写菜谱噢！毕竟互联网已经有了 “下厨房” 、 “美食杰” 这类更加出名的 UGC 产出的平台，我想做一个自己产出的 PGC 产品。\n\n如果你有好吃的推荐，欢迎通过 问题反馈 的方式与我联系，哈哈哈哈我会亲自尝试后撰写一份体验心得并致谢！\n"
  },
  {
    "slug": "flutter",
    "title": "从前端开发者身份入门Flutter和Dart的学习笔记",
    "desc": "最近有空，接触一下 Flutter 和 Dart 的开发，虽然说前端入门 Flutter 比较友好，但个人觉得最最最开始其实不怎么友好，当然写了几个小时 Dart 之后感觉确实都是熟悉的身影，但真的刚入门的那一两个小时真的特别困，所以还是要不定期记录一些遇到的问题。",
    "cover": "https://cdn.chengpeiquan.com/img/2021/11/20220127161927.jpg?x-oss-process=image/interlace,1",
    "content": "最近有空，接触一下 Flutter 和 Dart 的开发，虽然说前端入门 Flutter 比较友好，但个人觉得最最最开始其实不怎么友好，当然写了几个小时 Dart 之后感觉确实都是熟悉的身影，但真的刚入门的那一两个小时真的特别困，所以还是要不定期记录一些遇到的问题。本文主要面向平时写 Vue + TypeScript 的开发者，主要通过一些常用知识点的对比，来加快对 Flutter 的入门学习，因为很多道理是相同的，区别只在于怎么用。## 在线文档国内很多中文文档都十分陈旧，主要原因跟 Flutter 的版本更新比较频繁有关系，如果看国内那些老文档，你连 Hello World 都跑不起来… 建议直接阅读官方的英文文档。点击阅读：Flutter 官方英文文档不过也有本不错的开源书一直在更新维护，也值得一看！点击阅读：Flutter 实战·第二版Dart 语言上手倒是没有太大的难度，主要了解一下语法结构就好，大部分在敲 DEMO 代码的实践过程中就能理解和记住了，在 Flutter 实战这本书有一章是总结了一些 Dart 的速记，可以看看。点击阅读：Dart 语言简介另外对于编程风格，建议有空先看一波 Flutter 官方提供的风格指南。点击阅读：Style Guide For Flutter Repo## 项目起步建议先阅读一遍 万字长文轻松彻底入门 Flutter，秒变大前端，有个大概的了解再自己折腾。看完了，就开始折腾了，作为一个前端，相对于 Android Studio ，当然是更愿意用 VSCode 啦！用 VSCode 的好处是自动热重载， 用 Terminal 需要自己手动在命令行敲  才能刷新，就很 emmm…### VSCode 支持VSCode 的 Flutter 和 Dart 支持特别友好，安装对应的插件就行。Flutter - VS Code MarketDart - VS Code Market### 启动调试调试有两种方式，一个是直接在 Chrome 上预览网页版，一个是在模拟器上预览（我是 Windows 开发所以也只能体验一下安卓模拟器）。#### Chrome 模拟器调试的话可以通过 VSCode 的 lunch.json 配置一个 Flutter 启动。或者在 Windows Terminal 等终端里  进项目目录，跑  运行。会唤起 Chrome 浏览器，支持热重载。#### 安卓模拟器我按照这个教程配置了一波，运行成功了。\\[Flutter] 调用VS Code 模拟器(虚拟机), 不借助Genymotion### 项目入口 文件夹是  为应用程序的入口文件，  是 Flutter 应用的入口。其他的文件可以参照平时的开发习惯，分文件编写后 import 进来。阿里有个 Star 很多的项目 Flutter GO，可以参考下项目结构### 路由管理Flutter 和 Vue 一样，也是有路由的概念，通过定义路由文件和关联路由表，即可实现一套 APP 的路由。一般情况下（我个人觉得的）最好是用命名路由并通过路由名称跳转。比如，如果单纯的从首页  到列表页面，地址栏不会更新，依旧是首页的地址，热重载刷新后依然是回到首页去，开发调试过程中非常麻烦。但是如果通过  来跳转到注册的路由，则可以得到一条专用的地址（地址格式和 Vue Router 的  模式一毛一样…），这样热重载后依然可以停留在列表页。点击阅读：路由管理 这一章。## 设计风格对比在 Flutter 有两类主流的设计风格： Material 和 Cupertino 。Material widgets 实现了 iOS，Android 和 web 三端的 Material 设计风格。Cupertino widgets 基于 Apple Human Interface Guidelines 实现了当前的 iOS 设计风格。一般情况下都是默认采用 Android 的 Material 风格， DEMO 也是这样，不知道实际开发的时候会不会用 Cupertino 还是其他，有待实践。有一篇文章做了一些选择方面的介绍： Material 還是 Cupertino？## 部件速记对比都说写前端的人比较容易上手 Dart 和 Flutter ，感觉虽然确实没有那么难入门，不过一开始也会觉得一头雾水，这里放一些标签对比，在实现功能的时候可以快速找到应该用什么部件：HTML TagFlutter WidgetdivContainerspanTextimgImage更多的部件可以查看官网的 API 文档：API Docs - Flutter还有两个比较重要的部件类型需要记住：类型用途说明StatelessWidget无状态变更，UI静态固化的Widget， 页面渲染性能更高。StatefulWidget因状态变更可以导致UI变更的的Widget，涉及到数据渲染场景，都使用StatefulWidget。## 运算符虽然 Dart 的运算符和 TypeScript / JavaScript 大同小异，但还是有些不太一样，比如…建议看一遍：Dart 运算符、流程控制## 常见问题建议先阅读一波 Flutter 实战 那本书，起步流程什么的，在上面都有，这里只记录一些踩坑到比较蛋疼的问题。### Android SDK 报错Flutter 开发需要有 Android Studio 环境，但是安装了 Android SDK 后会报  ，在 StackOverflow 找到了解决方案：打开 点击  ，选择 测试 参考链接 Unable to access Android SDK add-on list### 安卓模拟器报错暂时无解，折腾了 2 个上午都没搞明白怎么弄，可能公司电脑的问题，等回家再试试。报错界面### GlobalKey 报错在调整路由结构的时候，遇到一个 GlobalKey 的报错如下：一开始是把所有路由都挂到了命令路由里去了，包括  ，所以首页就崩溃了。然后把首页配置回来才可以，看来首页还是要独立抽离一个配置。### 打印 LOG类似于  ， Dart 使用  来打印 LOG ，如果是在 Chrome 模拟器预览的话，按 F12 打开 Console 面板就可以看到 LOG 了。不过有个问题就是 VSCode 一直报一个很烦人的提示，查了一下原来是新版本的 Flutter 要求用  代替  了。点击查看：Avoid  calls in production code. (Documentation)### 自定义 Widget在 Flutter ，  类似于前端项目的  ，在实现的时候目前探索是有两种方式可以写出来：一种是前端常用的函数式编程，通过函数直接  一个  。一种是面向对象编程，通过  去定义一个  。在 StackOverflow 上有关于这个问题的讨论：What is the difference between functions and classes to create reusable widgets?还有一个官方在 YouTube 上的视频教程说明这一点： Flutter解析：小部件与辅助方法（Helper Method）大佬总结了一些对比就是：#### Classes 的优点允许性能优化（ const 构造函数，更细粒度的重建）\n确保在两个不同布局之间切换正确处理资源（函数可能会重用某些先前的状态）\n确保热重载正常工作（使用函数可能会破坏 showDialogs 之类的热重载）\n已集成到小部件检查器中。\n我们 ClassWidget 在 devtool 显示的小部件树中看到，这有助于理解屏幕上的内容\n我们可以重写 debugFillProperties 以打印传递给小部件的参数是什么\n更好的错误消息\n如果发生异常（如 ProviderNotFound ），框架将为您提供当前构建的小部件的名称。如果您仅在函数 + 中拆分小部件树 Builder ，则您的错误将没有有用的名称\n可以定义 Keys\n可以使用上下文 API#### Functions 的优点代码更少（可以使用代码生成功能小部件来解决）所以记住最好是通过类去定义一个 widget ，而不是函数。### 无效的 Material Color这个情况是出现在准备给 darkTheme 设置黑色的 AppBar ，选择了  结果报了这个错误。原因是部分颜色不属于  类型，如果要使用，需要自己创建：点击查看：Flutter更改主题颜色报错:type ‘Color‘ is not a subtype of type ‘MaterialColor‘### 缺少参数传入如果你定义了一个部件：但是调用  的时候会报这样的错误：我明明不需要传 key 啊！！！为什么？？？Dart 和 TypeScript 不一样的地方在于， TS 通过  直接可以定义参数可选，但是 Dart 的可选参数需要用花括号  括起来，在类型后面加上问号  仅仅只是用来声明为可空，所以这样定义实际上还是表示必须传  。所以要改成这样（注意 Foo 后面的  变成了  ）：### 图片部件Flutter 的图片部件效果和 HTML 的  整体还是比较相似，不过用法上有些差距，但很好记，稍微写一下就能记住了。#### 写法的区别一开始比较迷惑  和  有啥区别，看了一下还真是有区别…Difference in NetworkImage and Image.network?#### 适应效果和 CSS 的  一样， Flutter 的图片也支持配置 fit 效果，支持的样式效果和 CSS 大同小异。关于图片的更多说明可以戳：图片及ICON### 设置圆角这个一定要点名！笑死，一个设置圆角的问题被浏览了 20 多万次…209k 的浏览量…具体戳：Add border to a Container with borderRadius in Flutter### 静态资源Flutter 也有类似于 Vue 的 public 文件夹，存放一些静态资源，但是这里的路径有个坑，反复查了很多遍 Adding assets and images 文档都没有说引入的时候文件是要放在哪里，从哪里引入（ Vue 就有明确的说明 public 下的资源是从根目录读取），所以花了很多时间在调试路径的问题。不过还好机智的打印了一波路径和看请求，最终还是跑通了。首先需要去项目根目录下的  文件里配置  字段的数据：这里的路径注意了！  代表着我把  文件夹放在了项目根目录下的  文件夹里，为什么不是别的地方？因为经过不断打印错误的路径，发现 Flutter 的静态资源真的是从  开始的，不是根目录，也不是基于当前文件去写相对地址。注释里的  真的就是要跟他一样从 assets 开始配置，而不是 YAML 语法格式相同就好…也就是我这里的 JSON 文件的路径是类似：这样在 Dart 文件里就可以直接省略掉 assets 开头：否则放别的地方你还要一直  之类的去写更复杂的相对路径。### 解析 JSON因为要 Mock 一些数据，所以写了几个 JSON 文件作为静态资产去导入，有几个需要注意的：然后才可以使用  或者  去解析 JSON 内容。参考资料：How to decode JSON in Flutter?### 构建异步部件APP 肯定离不开网络请求，包括 Mock 的 JSON 数据，都是请求回来的，在这里折腾了很长时间才解决，倒不是文档看不懂，而是因为 VSCode 的 Dart 代码补全和类型补全帮我搞了几个麻烦的问题… 所以在没有绝对把握之前，还是先看文档，再去各种补全代码才是王道。直接贴上相关的文章吧。点击阅读：Dart 的异步支持点击阅读：Flutter 异步 UI 更新点击阅读：How to Build Widgets with an Async Method Call\n"
  },
  {
    "slug": "yidi-guonian",
    "title": "异地过年指南",
    "desc": "最近刷到好多小伙伴在说今年要留深圳/广州回不去，外卖到时又很贵，很纠结过年怎么办。我原本想着要不今年回去吧，我去年没回，结果前几天疫情每天都在+1，我妈倒是挺直接的叫我别回了，哈哈哈哈（正合我意呢），所以今年又在外面自己过年。",
    "cover": "https://cdn.chengpeiquan.com/img/2022/01/20220123233134.jpg?x-oss-process=image/interlace,1",
    "content": "最近刷到好多小伙伴在说今年要留深圳 / 广州回不去，外卖到时又很贵，很纠结过年怎么办。我原本想着要不今年回去吧，我去年没回，结果前几天疫情每天都在+1，我妈倒是挺直接的叫我别回了，哈哈哈哈（正合我意呢），所以今年又在外面自己过年。\n\n刚好说一下一个人在外过年都需要注意些什么吧，还有一个星期的时间，该准备的可以提前准备一下。\n\n## 基础材料\n\n这部分是基础，优先检查准备。\n\n大米\n\n食用油\n\n鸡蛋、面条、米粉、面粉\n\n各种调味料看下是否快用完了（盐、糖、酱油、鱼露、沙茶酱之类）\n\n常用的干货配料也检查一下（花生、香菇、虾米、干辣椒什么的）\n\n方便面也可以买一箱备着（潮汕人喜欢的蟹皇面是个好选择）\n\n可以让家里人提前寄一点特产，像我妈咪就给我寄了潮州米粉、粿汁皮给我\n\n## 蔬菜方面\n\n蔬菜看冰箱大小，搭配着吃。\n\n冰箱大就多买几把芥兰、菜心、生菜之类的水叶菜，不太耐放，不过放冰箱还是可以吃三四天\n\n适当买些玉米、土豆、蜜薯、南瓜等粗粮，平时交叉吃点粗粮感觉也很不错，而且大部分可以不用放冰箱（不过土豆注意室内温度，太暖导致发芽就不能吃了）\n\n姜葱蒜可以先洗净切好，用保鲜袋装好放速冻层，要用的时候洗一下就解冻了，很快\n\n## 肉类方面\n\n无肉不欢，这个也是重点，不过比较好准备。\n\n可以适当买点冷冻的鸡翅根、鸡腿，我平时做菜也是猫超买的冷冻品，还便宜\n\n刚放假那几天就吃新鲜点，买点猪手啊乌鸡啊，可以煲汤、或者做红烧猪手之类的硬菜，过年嘛，猪肉也可以冷冻起来，冷藏的话不太耐放\n\n牛肉丸牛筋丸也可以提前买点冻起来\n\n巴沙鱼、鳗鱼之类的走冷链的都是可以选择，像草鱼都是买现杀的，我不知道冻起来好不好吃\n\n## 做菜方面\n\n菜式方面选自己拿手的就好。\n\n硬菜和汤可以围绕：猪手、鱼虾、牛肉、排骨、烤鸡、乌鸡汤、牛肉丸汤这几个方面去选\n\n小吃可以围绕：饺子、云吞、芋粿、菜头粿这种比较有家乡特色氛围的小吃\n\n下面是我平时做的菜，上面有提到的，可以参考下过年吃啥。\n\n金汤酸菜鱼\n\n花生猪手汤\n\n潮汕卤水\n\n可以做做蛋糕\n\n潮州炒香饭\n\n鳗鱼饭\n\n牛肉丸汤\n\n蒸笋饺\n\n炸韭菜饺子\n\n红烧猪手\n\n招财猪手\n\n## 水果方面\n\n主推一下耐放的吧，比如哈密瓜、番石榴、香蕉，这些在切开之前都不用放冰箱，这个季节也有卖，可以买点备着。\n\n## 其他方面\n\n杂物部分，缺少了也比较麻烦，也检查一下。\n\n纸巾、垃圾袋、保鲜袋之类的消耗品也检查一下家里的库存\n\n准备一些常用药品，比如行军散、整肠丸、风油精什么的\n\n一些打扫卫生的东西也可以买点，住的地方大扫除一下呗（像擦玻璃的清洁剂，能包条毛巾伸上去擦墙壁的地刮）\n\n门口贴个福字，家里摆两盆花，气氛就上来了\n\n可以给屋里装个摄像头，有什么事情也可以记录下来（我平时是用来看猫）\n\n## 宠物方面\n\n养宠物必须关心的一个问题：\n\n猫砂、猫粮、猫罐头，检查下家里的库存看下是不是需要补货。\n\n可以自己给它们洗个澡，外面洗这个时间点好贵（平时也挺贵…），我都是自己给三只猫洗澡，害怕吹风筒（戴森也怕），所以是先毛巾吸水擦干之后，再开用暖风机给他们烘干，养了六年猫了，这个烘干办法很可行。\n\n## 娱乐方面\n\n除了睡觉，我比较宅，一些大致的安排是这样，也可以参考一下：\n\n我不太爱运动哈哈哈，不过倒是喜欢爬山散心，过年也可以去爬爬山，一个人听歌安安静静的走走散散心，思考人生很不错\n\n有时间可以看点工作技能方面的书，平时可能也没太有空安静下来一直阅读，放假了有空也可以看看\n\n有乐器的话就玩一下琴，我都好久没弹贝斯了，过年刚好可以拿出来玩一下，可能很多谱都忘了\n\n其他的玩游戏，搞开源什么的就看平时的喜好了，大家肯定都有自己独处的娱乐方式\n\n大概就这些吧，其实还是很好安排的，一个人过年也没有很可怕，不要慌哈哈哈\n"
  },
  {
    "slug": "a-week-time-of-a-markdown-engineer",
    "title": "Markdown工程师的一周",
    "desc": "马上就快过年了，最近才比较有时间把之前很多想搞一直没时间搞的东西弄一下，比如说最近一周在干的事情就是，补各种文档。我是没想到我一周能敲差不多 25 个小时的 Markdown … 几乎一天有 5 个小时在码字，天了噜…",
    "cover": "https://cdn.chengpeiquan.com/img/2022/01/20220121232301.jpg?x-oss-process=image/interlace,1",
    "content": "马上就快过年了，最近才比较有时间把之前很多想搞一直没时间搞的东西弄一下，比如说最近一周在干的事情就是，补各种文档。\n\n最近一周的常用语言\n\n我是没想到我一周能敲差不多 25 个小时的 Markdown … 几乎一天有 5 个小时在码字，天了噜…\n\n## 都干了些啥\n\n完善了公司的内部 Wiki ，之前很多东西想沉淀，结果一直忙，码字也挺费时间的说\n\n完善了一些内部项目的主 README 和 子 README ，这部分占比很小，因为一般在开坑之前就会把它们都写好，最近只是根据项目的近况做了一些修改\n\n写了一个 73 页的项目复盘 PPT ，哈哈哈说是 PPT ，其实也是在敲 Markdown ，这部分占比比较大 （可以戳下面的 关于复盘 部分）\n\n元旦开了个开源的坑，申请了个 js.org 的免费域名，把官网文档给做了，用的是 VitePress ，所以码字时间也挺多\n\n在年底的时候，博客终于把 2021 年立的 Flag 给摘了，菜谱专栏 上线了，在陆陆续续抽时间填我之前写的菜谱，所以写菜谱的时间也占了不少\n\n大概就这些吧，我每天还有写日记的习惯，不过日记用的是手机 APP ，所以就不包含在 Markdown 里了，下面挑几个聊一聊吧！\n\n## 关于菜谱\n\n2021 年在重构自己博客的时候更新了一下 About ，里面提到了我打算把自己做的菜都整理一下做法，保守应该有 600 多道不一样的菜式吧！\n\n自己做的菜\n\n不过因为工作忙，一直拖着，终于拖到了年底搞出来了，目前还在填内容，有兴趣的话可以先收藏起来，菜品方面大多是广东甚至于潮汕地区为主，毕竟我是广东潮汕人。\n\n点击直达：菜谱专栏\n\n目前已发出来的菜谱\n\n博客的专栏填充会比较慢，不过我从 8 月份开始就在小红书上更新菜谱笔记了，一般也会先发在上面，你也可以关注我的小红书号来获取最新的做菜信息，有啥不清楚的也可以直接私信问我。\n\n欢迎关注\n\n## 关于开源官网\n\n基于自己很长时间以来的一个需求点吧，就是常用的一些项目模板或者配置，缺少一个比较好用的管理工具。\n\n虽然有 Git 仓库，但多了也不好找，所以元旦有空就开了个坑，虽然还在搞，不过基本的一些功能还是可以用的，特别是本地的配置管理。\n\n点击访问：项目文档 了解更多用法。\n\ncreate-preset\n\n目前还处于初期自己摸索阶段，很多功能还在想怎么完善，如果有这方面的需要可以先用本地管理去体验。\n\n点击查看：管理本地配置\n\n有 BUG 就先提 issue 吧，因为今天才用 TypeScript 重写了一版，还没怎么测试。\n\n原本是用 JavaScript 直接写的，不过还是决定用 Vite 重新构建为 Library 的形式，至于重写的原因可以看 使用感受 。\n\n## 关于项目复盘\n\n这部分是我觉得这周写的最有意义的一个东西了，虽然从 2021 年出就一直在团队里逐步升级用  3.0 和  ，不过很长时间只有我亲自开坑的项目才会有这种待遇，团队其他人开的坑都还是比较保守，一方面是不熟悉，一方面可能是懒的学？\n\n最近带着几个小兄弟把一个以前的老项目重写了，从  2.0 +  +  更换到了  3.0 +  +  ，整个开发过程大家都很愉快！\n\n虽然说就是一个后台而已，但我觉得它的意义并不止于一个后台，而是作为一个小跳板或者噱头，让团队的人都比较有亲身体验的去感受这些新技术栈的优点，并且对于一些规范的东西也有更多的感受，所以我花了几天时间写了个复盘 PPT ，在复盘的过程中，大家也都能了解到我的一些想法，不仅仅是因为我说用什么就用什么。\n\n发现复盘之后大家很多东西都有了更多的理解和认可，我感觉很棒！分享不涉及业务的一部分吧，如果你的团队也在纠结要不要用新技术栈，可以参考一下看怎么推进。\n\nBtw: PPT 我用的是 slidev ，一个基于 Vite 和 Vue 3.0 的幻灯片工具，上手很方便，功能很强大！\n\n这个是复盘的大纲，主要围绕这些维度去对这次项目进行回顾。\n\n这个是复盘的大纲\n\n这是重构和重写之间的思考，避免有人觉得我只是单纯不喜欢老项目太多外包团队写的代码，所以决定重写，其实不是的哈哈哈哈，中间分析了很多东西，细节部分这里就不贴出来了\n\n思考过程\n\n决定重写没问题，但是最重要的一点就是，保证如期上线！\n\n话说这里安利一下我的开源书 Vue3.0学习教程与实战案例 ，虽然 Vue 3.0 的新官网快出来了，变化很大，不过在出来之前还是可以看看，这次我们组的同学都是一边干活一边看我这本书，很容易就上手 Vue 3 了。\n\n如何保证也要提前想好\n\n这是这次更换的几个核心技术栈\n\n变化了这些\n\n一些技术选型的理由分析\n\nVue 2 和 3 的对比\n\nOptions API 和 Composition API 的对比\n\nJS 和 TS 的对比\n\nTS 的一个流行程度也是作为理由\n\n这是分析 Webpack 和 Vite 的区别\n\n这次是选择了 Vite\n\nUI 框架也做了一次更换\n\n然后回顾了一些亮点，主要是和旧项目做对比，不复盘的话只会觉得不就是做了个后台吗，复盘了发现其实团队的很多东西变化很大，积累的东西也比之前好了很多（小团队轻喷）\n\n一些亮点\n\n这次也引入了很多开源社区比较好的规范机制，有 ESLint 啊，Commit 规范啊等等（小团队轻喷，之前确实没有太严格这方面的东西）\n\n大佬们做榜样\n\n大概就这几个吧！其他的都是内部的东西就不多说了哈。\n\n回到本文的主题，做 Markdown 工程师的感觉怎么样？其实还挺不错的哈哈哈哈。\n"
  },
  {
    "slug": "tsc-compiles-dts",
    "title": "TSC编译时指定生成d.ts的目录 并解决无法导入package.json和alias别名的问题",
    "desc": "虽然之前在构建 JS Library 的时候，也是有生成 `d.ts` 文件在输出目录，但总归比较凌乱，意思就是构建出来的 JS Library 和 DTS 文件都在同一级文件夹里。不是说不能用吧，总归看起来有点 low ，如果是单个 DTS 文件还好，但有时候构建出来会有好几个 DTS 这种情况下都放在一起总觉得有点别扭，所以今天想看一下能不能更优雅一点，存档在 types 文件夹里。",
    "cover": "https://cdn.chengpeiquan.com/img/2021/11/20220121141631.jpg?x-oss-process=image/interlace,1",
    "content": "虽然之前在构建 JS Library 的时候，也是有生成  文件在输出目录，但总归比较凌乱，意思就是构建出来的 JS Library 和 DTS 文件都在同一级文件夹里。\n\n如果是单个 DTS 文件还好，但有时候构建出来会有好几个 DTS ，这种情况下都放在一起总觉得有点别扭，所以今天想看一下能不能更优雅一点，存档在 types 文件夹里，或者是合并成一个文件。\n\n## 开始尝试\n\n根据官网的 tsconfig 说明，很快就搞好了目标配置（这里省略了其他选项，只展示与生成 DTS 相关的部分）：\n\n执行 build 命令，很完美的，生成的  文件都会放在我们指定的  文件夹下。\n\n不过好像有哪里不对，原来是它还根据源码的目录格式，生成多了一级  ，变成了  ，强迫症不能忍啊！\n\n多了一级 src 目录\n\n## 修改 rootDir\n\n再次阅读了 TypeScript 官网的说明，把 rootDir 指向源码目录：\n\n此时编译后，已经可以看到 DTS 文件成功的生成到  文件夹下了！不再带有那一层  文件夹。\n\n但是！但是程序的正常编译居然报错了！源码里有一部分数据是导入了  的字段作为值，比如版本号，包名等等，所以这里出现了一个报错。\n\n修改 rootDir 之后报错了\n\n## 解决方案\n\n既然是 JSON 导入出错，那么问题很明显是跟 JSON 配置有关，尝试关闭  里的  选项：\n\n然后打开你源码根目录下的 DTS 文件，声明一个 module 用于识别 JSON 文件：\n\n再次执行 build ，完美达成预期！\n\n完美达到预期\n\n来到这里第一个小目标是已经达成了！接下来看看怎么合并成单个文件。\n\n## 合并文件\n\n查了好久资料，确认单纯通过 TSC 编译出来的 DTS 文件无法做到只有单个，如果你确实觉得这种跟源码目录一样的 DTS 文件还是过于累赘，那么需要借助外部插件来实现文件合并了。\n\ne.g. dts-generator\n\n这样构建出来的 DTS 文件只有一个，比如  。\n\n## 处理别名\n\n到目前，如果你只是简单的项目结构，都是通过  的相对路径来引入的话，没有什么问题。\n\n但如果你跟我一样用了  别名，会发现生成的 DTS 文件并不支持  （比如源码里通过  来代替  或者  ）。\n\n这个也是要借助外部插件来实现转换，这里测试了几款外部工具，最有效的是 tscpaths 。\n\n需要明确的是，它本身不支持编译生成 DTS 文件，而是在 TSC 编译时，根据  的  配置，将 TypeScript 编译出来的 DTS 文件里的绝对路径替换为相对路径。\n\n然后在你的  的  命令里面，将它补充在 tsc 命令后面，比如：\n\n这样 DTS 里的路径就不再是  了，而是根据目录层级自动转换成  这样的相对路径。\n\n## 参考资料\n\n'package.json' is not under 'rootDir' - StackOverflow\n\nExport single .d.ts from several typescript files + entrypoint - StackOverflow\n\ntsc - doesn't compile alias paths - StackOverflow\n"
  },
  {
    "slug": "javascript-with-typescript-type-checking",
    "title": "让你在编写 JavaScript 的时候也能享受 TypeScript 的类型检查",
    "desc": "现在前端没有几个不写 TypeScript 了吧，但是有时候还是不得不写 JS ，比如我最近写脚手架的时候，代码是直接跑在 Node Runtime 里，没有编译环节，所以用的依然还是 JavaScript 。然而，发现离开了类型限制之后，感觉要写很多注释才能保证一个项目的完整性，就很烦…",
    "cover": "https://cdn.chengpeiquan.com/img/2021/11/20220119155350.jpg?x-oss-process=image/interlace,1",
    "content": "现在前端没有几个不写 TypeScript 了吧，但是有时候还是不得不写 JS ，比如我最近写脚手架的时候，代码是直接跑在 Node Runtime 里，没有编译环节，所以用的依然还是 JavaScript 。\n\n然而，发现离开了类型限制之后，感觉要写很多注释才能保证一个项目的完整性，就很烦…\n\n于是，翻了一下 TypeScript 官网，找到了一篇文章： JS Projects Utilizing TypeScript\n\n大致意思就是在 VSCode 里，配合 ESLint 和 JSDoc 风格的注释，可以实现在 JavaScript 里享受 TypeScript 的类型检查机制，试了一下，还不错，虽然没有写 TS 那么爽，但确实比直接用 JS 写项目要爽。\n\n配合类型系统，可以节约大量注释的编写，并且一些相同参数格式的地方，导入对应的类型，无需一直重复说明。\n\n这篇文章我会默认你开启了 ESLint\n\n## 准备工作\n\n需要安装这个依赖，用来检查 JSDoc 语法。\n\n## 配置 ESLint\n\n打开你的 ESLint 配置文件，比如我的是  ，配置 JSDoc 规则支持，这里省略了其他的选项，根据你的项目配置其他的。\n\n## 开启检查\n\n要在 JavaScript 文件中开启检查，需要在 JS 文件最前面打上一句注释，这样就会以 TS 的标准来检查你的 JS 代码。\n\n虽然就一句注释，但非常关键，如果缺少，后面的检查都不会生效。\n\n## 忽略检查\n\n如果有一些地方确实可以忽略检查的，可以通过  注释语句来跳过检查。\n\n## 检查配置\n\n采用这种方式的检查机制，你可以参考  的配置，在你的项目根目录下创建一个  去管理的检查配置。\n\n可以在 TS 官网查看如何配置：What is a tsconfig.json 。\n\n## 定义类型\n\n简单的类型定义可以通过普通注释实现：\n\n你在调用这个函数的时候，就可以通过 VSCode 的提示轻松了解它的入参、返回都是些什么格式要求。\n\nVSCode 提示\n\n如果你不按照要求传入对应的数据类型， ESLint 会给你提示报错，太爽了！！！\n\n哈哈哈哈报错了！\n\n联合类型也是可以写在里面，还有像数组、对象的格式也支持。\n\n对象的注释也可以清晰提示\n\n关于如何编写注释来定义类型可以参考 TS 官网的这篇文章：Type Checking JavaScript Files 。\n\n## 类型文件\n\n当然上面是最简单的用法，实际上需要涉及到很多高级类型的用法，可以通过  文件来管理。\n\n首先梳理一下自己的目录，建立一个  文件夹和  文件。\n\n目录结构\n\n里面的类型都需要导出：\n\n然后在 JS 文件里，通过  和  关键词来导入这个类型。\n\n关于如何在 JSDoc 里写接口可以参考这一篇文章的说明：How to Write TypeScript Interfaces in JSDoc Comments\n\n## 相关阅读\n\n更多的 JSDoc 语法可以查看 TS 官网的这一篇：JSDoc Reference\n\n## 使用感受\n\n如果是小型项目，并且只跑在 Node 环境，这个方式还是很方便的。\n\n不过最近脚手架越写越有想法，打算做大，所以我打算重构成纯 TypeScript 了哈哈哈，多了一步打包环节，但是相对于维护代码，还是可以忍受的。\n\n所以如果稍微大型点的项目，还是老老实实写 TS 吧，这个只是用在一些简单的项目里，作为一个可选的参考方案。\n"
  },
  {
    "slug": "git-commit-analytics",
    "title": "git-commit-analytics 分析Git Commit记录生成工作日报",
    "desc": "一个可以分析你的 Git 仓库 commit 记录的工具。它可以帮你生成一份工作日报 / 周报，或者你需要的更长时间范围的工作报告。",
    "cover": "https://cdn.chengpeiquan.com/img/2022/01/20220103234230.jpg?x-oss-process=image/interlace,1",
    "content": "一个可以分析你的 Git 仓库 commit 记录的工具。它可以帮你生成一份工作日报 / 周报，或者你需要的更长时间范围的工作报告。git-commit-analytics## 客户端下载这是一个客户端工具，所以你需要下载程序去使用它，点击 最新版本 去下载客户端。## 更新记录你可以查看 更新记录 去了解每个版本的更新内容。## 使用说明创建并填写你的配置文件，然后运行程序，即可获得你的工作报告。## 配置文件你需要在与程序相同的文件夹下，创建一个名为  的文件，并写入以下格式的内容。配置项说明如下：keytypedescriptionlangstring设置软件的默认语言，支持  （英语）和  （简体中文）。authorsstring[]筛选 commit 的作者名称，支持多个作者名称，用于你在不同的仓库可能有不同的名字。dateRange[string, string]填写 [开始日期， 结束日期] ， 支持合法的时间格式，会从开始日期的  统计到截止日期的  。reposstring[]你电脑里的 Git 仓库文件夹，需要提前切换到你要统计的分支。format{ [key: string]: string }格式化你的文件夹名称为项目名。includesstring[]要纳入统计的 commit message 前缀。excludesstring[]在统计出来的结果里，排除掉包含了这些关键词的 commit message 。Among them,  /  /  will be created as regular expressions to match data.其中， /  /  会创建为正则表达式去匹配数据。## 工作报告The report file will be generated in  syntax (probably the most common format for developer?) and saved as a file in  format (probably the most compatible format?).报告文件会以  语法生成（可能是对程序员最通用的格式？），并以  格式的文件保存（可能是兼容性最好的格式？）。The project name will be classified as the second-level title, and 7 types of commit prefixes will be classified as the third-level title:会以项目名称作为二级标题归类，以 7 个类型的 commit 前缀作为三级标题归类：typedescriptionfeat功能开发fixBUG修复docs完善文档style优化样式refactor代码重构test测试用例chore其他优化你可以点击 Commit message 和 Change log 编写指南 学习如何规范化提交 Git Commit 。\n"
  },
  {
    "slug": "2021-year-end-summary",
    "title": "年终总结：2021年的一些回顾和2022年的一些小规划",
    "desc": "可真快啊又是一年年底了，虽然这一年博客没发几篇文章，不过整体的活跃情况其实是提升了，个人的变化也还是蛮大的，今年记忆比较深刻的事情有几件，让我梳理回顾一下。",
    "cover": "https://cdn.chengpeiquan.com/img/2022/01/20220103234636.jpg?x-oss-process=image/interlace,1",
    "content": "可真快啊又是一年年底了，虽然这一年博客没发几篇文章，不过整体的活跃情况其实是提升了，个人的变化也还是蛮大的，今年记忆比较深刻的事情有几件，让我梳理回顾一下。\n\n## 开源社区\n\n其实我入坑的比较晚（其实是很晚…）， 2020 年底才算开始活跃给开源做贡献，然后 2021 年算是开始放飞自我，真正的活动了起来，哈哈哈哈先记录一下活跃度吧，今年的打卡日期还是铺的比较满的，毕竟今年基本上宅了一年，除了回家的那几天，基本上都是在电脑前呆着（截图生成自 GitHub Contributions ）。\n\n这两年在 GitHub 的活跃情况\n\n### 主要的工作\n\n写了一本 Learning Vue3 ，原本只是我的一些零散笔记，后来太多了，就打算写一些系列博文，结果发现又好像太多了，算了，弄本书吧，于是就有了这本面向 Vue 3.0 入门开发者的电子书。这也是我第一个持续 “维护” 了一年多的项目（哈哈哈更新内容也算维护工作吧），在冬至这天，刚好收获了第 100 个 Star ，也是我第一个达到 100 Star 的个人项目（现在已经超过了耶）。\n\n春节的时候重构了我的博客，并做了一次详细的记录 重构于Vite，当时纯粹就是那么顺手一发知乎，还只发了一半懒得全部搬运，然后被尤大发现了，给了我一个大大的赞！用了这么久的 Vue ，写的东西被 Vue 作者点赞，太开心了！（当然那个时候他肯定是以 Vite 作者的身份去点赞的哈哈哈）\n\n尤雨溪给我点赞啦\n\n当时还因为自己要用，但没有现成的轮子，刚好顺便学习一下 Vite 插件的开发，写了个 vite-plugin-banner ，没想到成为我第一个下载量直逼 5k 的 NPM 包（后续也稳定在每周大约 1k ）\n\n使用量最多的那一天截图\n\n三月份在 Vue 3.2 正式上线前夕，翻译整理了一份定稿文章 Vue3.0最新动态：script-setup定稿 部分实验性API将弃用 ，在知乎得到了挺多的互动，今年最热闹的一篇博文了，尤大还参与到了里面的一些讨论，太惊喜了！\n\n尤雨溪在文章下讨论\n\n之后几个月公司事情太多，慢慢有点淡化开源的投入，不过也还是有参与吧，像一些技术在查文档的时候，发现缺少中文翻译，所以干完活就顺手帮人家翻译了一下，比如 HTMLInputElement.webkitdirectory - MDN，所以也断断续续的贡献了一些翻译文档，我的这些知名组织的贡献就是这么来的…\n\n我参与的 Organizations\n\n### 主要的收获\n\n认真参与到开源输出之后，虽然也没有什么惊艳的作品，不过对我个人来说收获还是很大的，首先是技术上的广度提升了不少，了解了很多优秀的开源作品，学习到了很多开发思路。\n\n另外在一些代码规范上也学习了很多，包括 eslint 今年也认真的用了起来了，已经成为自己的项目标配，当年好害怕这个哈哈哈，不过用起来之后也就最开始问题多点，后面几乎很少被拦截，说明什么，说明自己代码越写越规范了！真的很有用！\n\n还有 Git 的操作和 Git Commit 规范，也是学习了不少，并且公司在 Q4 开始执行了日报制度，别的开发都一片唏嘘，觉得好难写，只有我一个人觉得这有啥？因为我每做的一件事情都非常规范（相对以前来说），所以我每天的工作日报都可以很稳定的通过程序去生成，元旦我也把它开源了，有需要的话可以戳 git-commit-analytics 去了解。\n\n## 年初的 Flag\n\n年初在重构博客之后，也对新的一年做了一点简单的期待，主要有三个方面吧，补一下服务端实践的短板，补一下英语的短板，然后把自己擅长的下厨能力也沉淀一些菜谱出来，这三个也没有变成空头支票，多多少少有落实到位了。\n\n### 关于服务端\n\n纯前端做久了，服务端的知识确实会遗忘不少，今年也重新捡了起来，并申请了几个公司内网项目当起了全栈工程师，UI 设计、前端、后端、数据库啥都自己搞，效果嘛，就是保证了顺利上线，不过内网级别的应用，也就是上个线，后续也没有什么维护工作，所以还是有很多成长空间。\n\n### 关于英语\n\n英语这块落实的比较好了， 2020 年的时候在师妹的影响下其实是坚持背完了整整一本书的单词，词汇量相比 2019 年是增加了不少，不过在表达方面还是很弱。2020 年通过开源文档的英文写作，以及参与到翻译工作中，让自己的写作能力提升很快，这部分的落实还是很满意的。\n\n不过目前的短板还是比较大问题，就是很多细节，比如说语法，谓语啥的用的还不是很好，其实当年的成绩也没那么差啊，真的是太多年没用，完全还给老师了…练起来练起来！今年除了中文博客部分，其他能用英语的就都用起来吧，希望再过一年之后，会变得更好！\n\n新一年的规划\n\n### 关于做菜\n\n年初说要在博客开一个专栏，沉淀我的菜谱，让广大宅男能够宅出不一样的精彩，博客倒是一直没时间搞，不过发现了一个随时可以记录的好去处，那就是小红书。\n\n好像是 9 月份入驻的吧，因为白切鸡一战成名，然后这几个月下来慢慢的居然 3k 多的粉丝了，也得到很多认可，很开心！\n\n我的小红书，美食博主了哈哈哈\n\n这部分的落实也算 OK 吧，菜谱 专栏已经上线，慢慢把内容重新填上去。\n\n为什么不选爬虫来把小红书的内容搬回来呢？因为小红书的排版其实有点反人类，而且图片有水印，害，反正，重新处理一下也不麻烦，原图我都留着呢哈哈哈。\n\n## 参与扶贫\n\n今年也是第一次参与到了扶贫工作，虽然自己也没有什么钱，但听 BEYOND 的歌长大的我，从小也受家驹的影响，有能力的情况下，多关心一些还在贫困线上挣扎的人，一直以来也是想着要尝试资助贫困学生或者一些扶贫项目，不过也是迟迟没有行动。\n\n今年刷到了一条关于贫困儿童的微信广告（难得啊，看到公益的微信广告），点进去了，然后看到一些比较合适的项目，参与了进去，目前是参与到了一个给孩子们加餐的月捐项目里，每月钱不多，自己也没太当回事，结果年底还收到了短信跟我说，会给我寄过来证书和福字，突然就觉得心里酸酸，有点想哭，可能对自己来说很小很小的一点点钱，但是对于那边的孩子来说，非常珍贵！\n\n没想到居然还有证书，好期待！\n\n## 新年展望\n\n2021 年的总结，大概就是这些吧， 2022 年，暂时先把去年还没完成的大目标都继续完成下去（去年也就是完成了小目标罢了，想要说完全做好，还要好长的时间去坚持）。\n"
  },
  {
    "slug": "truffle",
    "title": "Truffle初探和踩坑笔记",
    "desc": "能找到的教程都好老，记录一版踩坑笔记，后面遇到类似的问题可以快速处理。",
    "cover": "https://cdn.chengpeiquan.com/img/2021/10/20211012094643.jpg?x-oss-process=image/interlace,1",
    "content": "一个刚入门的 Truffle DEMO 和学习笔记，能找到的教程都好老，记录一版踩坑笔记，后面遇到类似的问题可以快速处理，啃的 Truffle 的英文文档，国内的翻译文档都太老了，都快速找到的停留在 2019 年之前，实在没法看。官方文档：Truffle Document模板库：Truffle BoxesTruffle 的模板库有点类似于 GitHub 仓库的 template 功能，你可以根据你的技术选型，在初始化 Truffle 项目的时候，选择合适的模板创建项目，比如基于 React / Vue / Vyper 等等，再去做调整。## 了解概念开始搞事情之前，先了解几个新概念，我估计大部分人应该还是跟我一样，刚接触的时候都是一脸懵逼。Truffle 是一个开发智能合约的工具，也可以用来做 DAPP ，这两个概念，引用别的地方的说明大概了解一下：智能合约 —— 可以简单理解为脚本，用来处理各种业务逻辑DAPP —— 包含完整的智能合约 + 用户UI交互界面，载体可以是 Android APP/ iOS APP/ WEB APP ，只要主要逻辑和数据在区块链上就可以至于怎么把数据和界面连接起来，后面了解了再补充，先记录一下前期的一些学习体验问题。目前最知名的区块链游戏体验：Axie Infinity## 安装问题需要全局安装，但理论上第一次安装会得到好几屏幕的报错信息…因为在 Node 基础上还需要 Python 和 C++ 编译器…不过其实我之前都有装过，看了报错都是 gyp 相关的，更新了 gyp 就可以了。依赖环境下载地址C++Visual StudioPythonnode-gyp然后再次全局安装 Truffle 就可以了，如果可以正确查询到版本号，说明安装成功了。## VS Code 配置点击安装 solidity 语言高亮和语法补全功能支持。## 项目初始化直接执行初始化命令  只得到了一个空项目，前期建议先按照官方文档 Quick Start 里面的建议，先用官方推荐的 MetaCoin 项目模板来学习：初始化后的项目结构：## 配置文件和其他前端项目一样，都有一个统一的项目配置文件  ，这个看文档按需要的配就可以了。选项文档## 常用命令命令作用truffle compile编译成 JSON 文件truffle test运行 JavaScript 和 Solidity 测试truffle develop调试个人区块链（命令行）truffle console调试个人区块链（GUI）truffle publish将包发布到以太坊包注册表完整命令参见：Commands## 使用 GUI 调试develop 命令默认基于命令行，可以下载 Ganache 通过 GUI 来调试。下载和安装后，需要修改项目的  文件：然后启动 Ganache ，点击 \"Quick Start\" ，就可以运行个人区块链了。Ganache UI在命令行运行  可以进入 GUI 情况下的调试命令状态（等价于命令行情况的 ）。## 解决单元测试异常在实际体验中发现，如果你在刚刚的 使用 GUI 调试 环节直接配置了 networks 之后，会发现无法再执行  了（当然，执行  是没问题的，因为它等价于使用 Ganache）…控制台会出现如下报错：然后你把  里的  注释掉，会发现其实又可以了，就很迷……### 解决方法一在 GitHub 的 Issue 区查了也有人遇到一样的情况，所以很快有了这个解决方法：重新启动 Ganache ，点击 \"New Workspace\" ，进入配置：配置 Ganache 的工作区点击 “Add Project” ，进入到你的 truffle 项目文件夹，把项目的  添加到工作区，然后点击右上角的 “Start” 或者 “Restart” 启动运行。在启动 Ganache 的时候，运行  就不会出现网络问题了（下次启动 GUI 的时候，选择工作区的配置启动连接，就可以对应的给你的项目开启测试支持了）。后续选择工作区来启动### 解决方法二由于方法一要基于 GUI 才能解决这个问题，那如果以后跑在服务器上面，没有 GUI 可以用咋办？观察了一下控制台，在没有配置  选项的时候，执行测试命令时，使用的网络是不一样的：配置 networks 前：配置 networks 后：为什么会出现这个情况？官方文档也没有说明，得去看一下仓库相关的代码了，看看有没有门路…按照一般的大型开源项目的习惯，在 GitHub 仓库里找到了 commands 相关的文件，其中 test 命令是位于 truffle/packages/core/lib/commands/test/index.js ，这里可以看到测试命令的运行规则是：有配置了  就优先按这个配置启动测试工作如果没有的话，会创建一个  的选项，并先通过  启动连接开发环境再启动测试工作所以我们另外一个解决方式就是：先开启 develop 环境然后在 develop 环境下运行测试命令（此时不需要再补 truffle 前缀了），就可以正常运行了## 项目构建虽然直接执行  可以完成一个最基本的构建行为。## 其他常见问题一些刚上手可能遇到的问题和解决方案。由于官方 DEMO 的上次实际更新是 1 年前（最新更新只是无关痛痒的注释修改），所以为了可持续发展，Solidity 的语言版本始终选择较新的 0.8+ ，而不是默认的 0.5+ ，默认版本可落后太多了。### 版本号报错初始化后，打开  文件时， VS Code 会报下面这样的问题：因为模板项目的版本可能比较老，跟不上当前的编译器版本，所以根据提示的版本号，手动更新到对应版本就可以了，也可以在 Solidity 的 GitHub 仓库查看最新版本号。或者是下面这种（个人比较推荐）：这个是 Solidity 语言的强制要求，为了避免智能合约在编译过程中出现兼容问题，在 soliditylang 的官方文档有说明 version-pragma具体的版本管理方式，比如  也可以用  符号代替版本兼容范围，和 Node 的  的版本管理是一样的。### 构造函数的可见性被忽略这个报错是在上面那个版本号报错问题，解决了之后出现的：这个是 Solidity 语言在 v0.7.0 的更新（CHANGLOG）由于模板原本是  ，使用的是低于 0.7 版本，所以没有出现这个报错，我们改成了  ，所以出现了这个问题。只需要移除掉  的可见性就可以了：### 缺少构造函数可见性接上一个问题，移除了  的可见性，又会报缺少可见性的问题（韩红听了都想打人.jpg?x-oss-process=image/interlace,1）：这是因为编译器使用的默认版本比较低（0.5.16），而我们用的是 0.8+ 了，版本之间不兼容，所以导致编译出错。可以在  里统一修改，指定编译版本范围和我们的文件里保持一致。### 导入依赖报错比如在测试文件里，会导入 Truffle 自身的依赖：此时执行测试命令是成功的，但是在 VS Code 会报诸如下面的错误：因为出现的问题只存在于 VS Code ，所以可以确认是语法插件的问题，后面在插件仓库的 Issue #193 找到了原因。不过好像当前无法解决，所以目前只能是人肉忽视，强迫症也没办法…功能不影响测试和编译，不是大问题。\n"
  },
  {
    "slug": "vue3-script-setup-finalization",
    "title": "Vue3.0最新动态：script-setup定稿 部分实验性API将弃用",
    "desc": "从尤大的Twitter上获取到了最新的开发进展，期待已久的script-setup组件模式终于定稿，不再是实验性功能了，当然对比之前的实验性阶段也有一些新的变化，包括一些API被弃用，同时也有新的API补充进来代替原有的功能。",
    "cover": "https://cdn.chengpeiquan.com/img/2021/07/20210705181949.jpg?x-oss-process=image/interlace,1",
    "content": "今天一早收到一条 issue #107 ，有开发者在咨询我 Vue 3.0 script setup 的新 API 怎么用。最近一段时间挺忙，加上官方的开发动态也不是很多新东西，所以关注的比较少，看了一下 release 记录，发现最新的 2 个小版本对这个新特性改动还算蛮大的，之前的用法都调整了不少。今天距离上一次发文讨论 script-setup 新特性已经有 4 个多月了（回顾上一篇），虽然截止至 7 月 2 日的  版本，script-setup 还是处于实验性阶段，但在同一天，尤大在 twitter 上发布了一条推文，预告了它将会在  版本脱离实验状态，正式进入 Vue 3.0 的队伍。先简单梳理一下本次定稿下来的一些调整：## useContext API 被弃用在原先，可以通过该 API 来获取组件的上下文信息，包含了 attrs 、slots 、emit、expose 等父子组件通信数据和方法。该 API 将在 3.2 版本之后删除，context 里面的数据，会用新的 useSlots 和 useAttrs API 来代替。## 新增 useSlots API 和 useAttrs API在 useContext API 被删除后，原先的上下文数据，将由这两个新 API 获取到。### useAttrs顾名思义， useAttrs 可以是用来获取 attrs 数据的（也就是非 props 的属性值）。如果当前组件里没有将某个属性指定为 props，那么父组件绑定下来的属性值，都会进入到 attrs 里，通过这个新 API 来拿到。### useSlots同样，通过 API 的命名也能了解它是用来获取插槽数据的。但这个 API 对大部分同学来说应该用的比较少，因为大部分 Vue 开发者应该都是用的 SFC 模式（单组件），插槽可以直接在 template 里使用  标签渲染。所以，我个人觉得这个 API 的目标用户是面向 JSX / TSX 的开发者，简单的用法参考如下：父组件，可以传入默认插槽和命名插槽：那么在 JSX / TSX 的子组件，通过 useSlots 来获取父组件传进来的 slots 数据进行渲染：## 新增 defineExpose API在标准组件写法里，子组件的数据都是默认隐式暴露给父组件的，但在 script-setup 模式下，所有数据只是默认 return 给 template 使用，不会暴露到组件外，所以父组件是无法直接通过挂载 ref 变量获取子组件的数据。如果要调用子组件的数据，需要先在子组件显示的暴露出来，才能够正确的拿到，这个操作，就是由 expose 来完成。expose 也是 context 的一个组件成员，原来的用法，是从 useContext 里导出：由于 useContext 会在未来版本里移除，所以新增了 defineExpose API 来实现 expose 的功能。新的 API 用法：父组件就可以通过 ref API 去拿到子组件暴露出来的  数据了。## 改名 defineEmits API使用 defineEmits 取待原来的 defineEmit API ，也就是改名了。好吧，我之前的文章还特地强调了 defineProps 是复数结尾，带有 s，而 defineEmit 没有，如今，都统一了，都是复数形式。从尤大的更新说明里看，大约只是一个 typo 更新，对比原来的 defineEmit ，目的是使用新的 defineEmits 与标准组件的 emits 命名上更为接近，和 defineProps 也更统一。╮(╯▽╰)╭ 所以用法方面和原来是没什么区别的：## 新增 withDefaults API说完 emits，经常与之同时出现的 props 也有一些变化，本次是带来了一个全新的 withDefaults API，用于辅助 defineProps 来指定 prop 的默认值。在以前的文章我有提及到，当你用 TypeScript 编程时，defineProps 有两种类型指定方式：通过构造函数进行检查（传统方法）第一种方式是使用 JavaScript 原生构造函数进行类型规定，使用这种方法时，如果你要限制 props 的类型和默认值，需要通过一个 “对象” 入参来传递给 defineProps，比如：使用类型注解进行检查（TS 专属）第二种方式是按照 TS 的书写习惯来定义数据类型，这种情况下需要遵循 TypeScript 的类型规范，比如字符串是 string，而不是 String。在此之前，使用第二种方法，是无法指定默认值的（在当时的 RFC 的文档里也有说明无法指定）。如今，这个新的 withDefaults API 可以让你在使用 TS 类型系统时，也可以指定 props 的默认值。它接收两个入参：参数类型含义propsobject通过 defineProps 传入的 propsdefaultValuesobject根据 props 的 key 传入默认值可能缺乏一些官方描述，还是看参考用法可能更直观：## 顶级 await 的支持不必再配合 async 就可以直接使用 await 了，这种情况下，组件的 setup 会自动变成 async setup 。它转换成标准组件的写法就是：## 参考资料以上所有的资料都来自于尤大在 PR 227 的评论通告……传送门：\\<script setup> Finalization好隐蔽的说，而且原来的 RFC 仓库的文档也删除了，换了新的文档也是找了好久才翻到新的，本文先根据尤大的通告做一波简单的说明，后续将会详细更新到 Vue3.0学习教程与实战案例 里。\n"
  },
  {
    "slug": "requirement-design",
    "title": "简单的六个步骤 让你写出技术爱看的需求文档",
    "desc": "提需求”应该是每个同学在工作中最不可避免的三个字，有句很流行的话叫“人人都是产品经理”（源自一本产品书籍的书名），为什么这句话会流行起来？因为只要我们把这句话换个方式表达，本质上就是“人人都是需求方”，是不是瞬间感觉“对对对”！",
    "cover": "https://cdn.chengpeiquan.com/img/2023/01/20230107234550.jpg?x-oss-process=image/interlace,1",
    "content": "演讲稿的在线 PPT 版本可以戳 这里 。五一啊五一，虽然很想去迷笛音乐节，但经不住太懒，加上最近太忙，实在想休息，所以还是宅家吹空调，三只猫陪着码字写东西也很舒服。也幸亏没出门，广深大暴雨，朋友圈还看着各种大塞车，还是过段日子再用年假来错峰出行吧哈哈哈哈。这一篇其实大概在三月份的时候就说想写了，四月份清明假期因为赶项目，结果也没写出来，五一终于可以好好码一码字，终于不用再拖到儿童节了。拖稿狂魔说的就是我了之前在 UC 工作，后来又到网易搬砖，来来往往的接触过一些的阿里和网易的产品需求，从校招新人到产品大佬，不同级别的需求看的多了，也算是总结到一些需求设计方面的技巧。由于时不时还是会接到一些比较随意的文档（很多人觉得原型不就是画几个框？），加上身边的一些朋友也想了解，所以总结了此文，主要面向新手产品同学，以及偶尔可能会提需求的运营同学等等对于需求梳理还不是特别熟悉的对象阅读。好了，下面回归正文！！！## 前言在互联网的工作日常中，“提需求” 应该是大部分同学在工作中最不可避免的三个字，不论你在哪个岗位，总会涉及到五花八门的业务需求，哪怕小到 A 同学找你导个报表、B 同学找你出个文案，这些也是 “需求” 。虽然大部分情况下，各个业务线都配备有产品经理这个岗位来梳理需求，但并不是所有需求都是来自于产品经理本身。提出需求的，可能是运营同学，可能是商务同学、营销同学，有些时候也可能是技术与技术之间的需求，或者是来自产品用户的反馈，以及你的老板传达下来的想法等等。前些年，在互联网圈子里有句话很流行，叫 “人人都是产品经理” （源自一本产品书籍的书名），为什么这句话会流行起来？因为只要我们把这句话换个方式表达，本质上就是 “人人都是需求方” 。作为一个前端工程师，这几年对接过的需求里，有的文档清晰、逻辑合理、交互人性化，有的看半天不知所云，而接触过的这些需求，又代表了大部分常见的界面化需求，其实提需求啊，还真是一门学问。这篇文章会围绕工作中 “提需求” 这个常见的业务场景，聊一聊那些容易出现的问题，以及解决这些问题的窍门。## 为什么要讲这个话题相信大部分提过需求的同学都会遇到一个问题就是：为什么我提的需求，最后技术那边做出来的效果，总是和我心里想要的不一样？不止是你们，包括我自己在刚工作的时候，也经历过这种纳闷，为什么呢？别急，先上一个段子：产品经理：我想要这边右划可以出菜单，然后还需要一个闪烁的动画，这边这个 Tab 可以拉下来，你听懂了吧？\n设计师：别废话了，把你要抄的那个产品拿给我看一下。这个段子应该大家都有看过，有时候段子它不仅仅就是个段子，还真的是工作生活的体现。回到刚刚这个问题，很长时间没有告诉我为什么，后来工作久了，慢慢发现，很多情况下，实现效果与需求想法不一致，并不是因为实现不出来，而是因为人和人交流之间最常见的两个情况导致的。也就是所谓的 —— **“表达不清” 与 “理解偏差”**。形象一点表达就是：\n需求方想的： ████████████████████ - 100%\n文档表达的： ████████████████░░░░ - 80%\n技术理解的： ████████████░░░░░░░░ - 60%这个情况在生活中其实很常见，经常看很多梗或者搞笑视频，那种传话越传越离谱，其实也是类似这个情况，表达的过程中，信息是会有偏差和遗漏的。所以，上面那个问题，在大部分情况下，都应该转换为：为什么我提的需求， >最后技术那边做出来的效果 心里想要的效果，\n总是 和我心里想要的 和我表达出来的不一样？那么作为一个需求方，我们应该怎么去表达，让我们的需求先变得更靠谱呢？## 常用的六步法则一个靠谱的需求，通常来说需要经历六个步骤：需求分析功能梳理流程设计绘制框架完善细节复读文档所谓的 “原型就是画几个框” ，其实只是设计过程中的一个小环节而已。需求写得完善，双方才能有统一的理解；需求完成时，也有统一的验收标准。我们来看看每个步骤里面，都有哪些注意事项和处理技巧。## 一、需求分析很多时候我们手里的需求，不一定都是由自己发起的，可能是来自老板的需求，可能是来自合作伙伴的需求，最终再由自己去统一对接设计 / 技术或者其他岗位，面对形形色色的需求，我们需要先进行一波需求分析。需求分析，其实就是拆解需求目的：常见的拆解方向：\n—— 原始需求是什么？\n—— 需求来源是否可靠？\n—— 参考数据是否有权威性？\n—— 需求的价值点在哪里？\n—— 需求的成本？\n—— 其他…比如我们来看看下面几个需求案例，他们都存在哪些问题？你做了个投稿活动，玩家反馈投稿编辑器不好用，希望优化。老板让你五一做个活动提升一下 APP 的数据。产品要求你的活动页面要兼容 IE 8 才能上线。4 月 20 号了才想到忘记策划五一活动页面，赶紧提个需求。好家伙，一个个的看起来有模有样，马上出解决方案！但是，千万不要急！拿到类似的反馈之后，我们还是需要先做一波分析，才能知道这些是不是真正的需求，有没有实现的价值：需求场景需求分析问题所在你做了个投稿活动，玩家反馈投稿编辑器不好用，希望优化。不好用是指什么功能不好用？是不支持 Markdown 语法，还是不支持插入视频？“不好用” 这个需求点缺少明确的达成目标，不是原始需求老板让你五一做个活动提升一下 APP 的数据。老板的期待目标是指什么数据？日活？内容发布量？用户互动量？缺少核心价值点，容易费力不讨好产品要求你的活动页面要兼容 IE 8 才能上线。2021 年了有多少 IE 8 用户？自家的 IE 用户占比有没有 5% ？缺乏有权威性的数据支撑，也是容易费力不讨好4 月 20 号了才想到忘记策划五一活动页面，赶紧提个需求。这么点时间，不用设计？不用走测试？一趟流程走下来直接凉凉了突发情况，需要考虑是否有备用方案，能否使用现成的接口 / 后台 / 模板，节约开发资源，避免影响上线计划，所谓的有备无患。如果没有需求分析，很多时候要浪费很多时间，多走很多弯路。## 二、功能梳理功能梳理是为了让各个页面、各个模块的作用不被遗漏，也尽量减少功能重合。这个步骤应该很多同学都知道要做，但是在我日常对接的过程中，也发现很多同学只是单纯的列功能，一个一个的列出来，这样其实是很容易遗漏掉需要的功能点。建议使用 “金字塔分析法” 来梳理我们的功能，最后生成一个产品的架构图。金字塔分析法如上图，金字塔分析法其实很简单：先归类你的用户群体，比如一个玩家故事征集活动，那么用户群体就有投稿者（内容生产者）以及读者（内容消费者）。再针对不同的用户群体，去划分他们涉及到的大模块，比如投稿者，那他需要涉及的就有 “发布模块（编辑器）、推荐曝光、互动” 等等。最后再围绕每个模块，拆分里面需要用到的功能点，并根据实际情况做取舍，比如投稿者的发布模块，是否需要支持音频上传、视频上传、草稿箱等功能。最终可以输出如下的一个需求架构图（我这里就直接 Markdown 编辑了，你可以用更专业的软件去画）：## 三、流程设计流程设计也就是所谓的画流程图，是为了避免在开发的时候才发现产品需求的逻辑不对，或者有什么被遗漏的流程。在这里面，又分为 “正常流程” 和 “异常流程” 。### 正常流程正常流程是指：用户在没有遇到任何阻碍的情况下，顺利的完成某个功能的使用，比如登录：“输入账号” ✔ ——> “输入密码” ✔ ——> “点登录” ✔ ——> “登录成功” ✔这是一个正常流程，每个环节的正常流程只有一个，一步一步走下去，直到目标达成。### 异常流程异常流程是指：用户在使用功能的过程中，遇到某些意外情况，导致正常流程被中断，还是拿登录环节举例：“输入账号” ✔ ——> “输入密码” ✔ ——> “点登录” ✔ ——> “密码错误” ❌这就是登录环节里面的一个异常流程，但在实际业务场景里，每个环节的异常流程经常会有很多个，需要尽量多的去考虑到异常流程和对应的解决方案，避免打断用户的行为而导致用户离开。### 设计技巧我们在设计流程的时候，第一步需要先把完全通畅的正常流程画出来，确保在无任何意外的情况下，你设计的流程能够跑通；再处理可能出现的异常流程，在某个环节不符合要求的时候，做什么处理。针对异常流程，我们需要在每个可能出现意外的环节，设计对应的处理方案，来给用户最好的体验，**及时引导他们回到正常流程中。**知乎提问的时候就考虑了多个异常流程，并进行了正确引导## 四、绘制框架框架是为了让你的想法可以具象化的表达出来，减少在沟通过程中的理解偏差。比如本文最开始的段子，与其形容半天还不知所云，不如简单明了的出示你画好的框架。把冗长的文字转化为简明的图形表达框架不是设计稿，不需要做的非常精美，你可以像小时候搭积木一样，用各种点、线、方块拼到一起，把你心中想要的效果，用图形界面表达出来就可以。目前市面上主流的网站、APP 设计，都可以采用积木大法来绘制你的框架。积木大法能应付常见的布局排版画框架的工具有很多种，推荐使用专门做原型的 Axure，也可以用你擅长的 Excel 、PPT 来画，工具只是辅助，关键是你的表达要 OK 。## 五、完善细节光有框架没有说明也是不行的，图文搭配，才是最佳的表达。这里的细节，主要分为三类：### 需求的基本信息通常拿到需求都是先通过基本信息来了解这个需求是干嘛的，这里我列了一些常用到的项，可以参考取舍。信息项用途需求目的告知团队为什么要做这个需求，开评审会的时候经常要了解需求价值，所谓的排期优先级，往往是这个决定的合作流程如果设计、前端、服务端不是同一个团队的，像跨部门合作的，特别需要把合作流程写清楚跟进人需求负责人必写，各个环节有问题方便找负责人确认，其他岗位的负责人如果已确定（如由谁主导设计、由谁主导开发），也可以更新上来迭代记录大项目，需要进行不断迭代的，迭代记录一定要做好架构图就是 功能梳理 这部分提到的产品架构图，方便各岗位更直观的了解流程图就是 流程设计 这部分提到的流程图，简单项目可以直接列出来，如果是复杂项目，可以分摊到各个模块里去写在实际的文档梳理过程中，你可以像这样列个表格来清晰的展示每一项信息的内容。### 模块的具体信息上面说的是整个需求的一些全局信息，这一部分说的是具体到某个模块的功能信息，这个环节你可以充分考虑他们在可见范围外的一些细节，什么是可见范围外？我举几个例子。前后条件考虑比如，一个内容发布按钮，如果你只是完成一个内容发布，那其实不必单独标记说明 “这个按钮点了可以发布” ，这个就没有意义，因为本来就是执行发布行为，那么需要说明的是哪些东西呢？是可能会产生意见分歧的地方。从按下发布按钮开始，到成功发布出去，在这个过程之间，需不需要对内容进行审核？也就是很常见的先审后发，还是先发后审，还是免审核？然后完成发布后，从编辑器离开，是跳转到首页，还是作品列表页，还是作品详情页？像这些就是需要考虑的前后条件了，有很多种选择，每个人都有每个人的想法，如果你有比较明确的方案，就需要把这个细节写清楚。登录有效期几时要让 Token 失效，登录失效后是切换登录页面让用户重新登录，还是可以对活跃用户提供 Token 刷新机制，自动延长有效期等等…是否需要做黑白名单限制比如：IP 封禁、账号封禁等一些违规处罚，敏感操作的模板只能在公司 IP 登录类似以上都是有意义的标注，除了功能信息标注外，还可以是一些交互方式的说明（参考 XXX 应用的一些交互行为），也可以是一些数据来源的标注（比如投票功能旁边，就可以标注每天的投票资格如何获取）。### 其他的辅助信息辅助信息通常是脱离于需求功能之外的，但又不能被遗漏的一些补充，比如：数据埋点目前国内主流都是用的百度统计、CNZZ 统计等统计平台，可以记录网站、APP 用户的使用情况和行为分析，一般需求方不主动提及的话，开发是不会主动帮你埋点的，因为不知道你需要什么数据，你要的东西，你要主动写出来。异常报警一些敏感操作、宕机之类的异常情况，是否需要通过 Email 、短信之类的报警通知。适配程度比如网页的浏览器适配范围，APP 像安卓兼容到哪个版本之类的，有特殊需求也可以做出说明（通常对于非主流的低版本有要求才需要说）。诸如以上，请根据自己的业务情况评估是否需要添加辅助信息说明。## 六、复读文档就像开发做完需求也不会直接上线，需要走几轮测试流程，复读文档就相当于自己对自己的需求文档的一个“测试”，主要的作用体现在两个方面：“查漏补缺” 和 “精益求精” 。### 查漏补缺复读文档的作用，一个是查漏补缺，减少理解偏差。查漏补缺，把遗漏的细节补充起来有些地方，同样的功能，命名不一致，或者功能描述不清晰等等，都会导致在对接的过程中理解产生偏差，通常可以考虑这几个方面的检查。检查关键词是否清晰一致比如一个内容聚合列表，是叫 “话题” ，还是叫 “频道” ，还是叫 “标签” ，收藏功能是叫 “我的收藏” 还是 “我的喜欢”，像这些问题在进行二次改版的产品需求里尤为常见，一些功能被重命名后，叫法开始变得不统一。请切记，在产品里面，同一个事物，它的叫法应该是保持清晰一致的。是用代词还是专业名词就像 “会员” 一词，可以用在所有付费相关的功能上，但是如果你还要进一步划分会员等级，那么有些功能就必须明确到 “白银会员” 、“黄金会员” 这样更细粒度的专业名词，而不能用比较含糊的 “会员” 代词。逻辑、流程是否有误检查是否有冲突、有遗漏的情况，比如去年我在做一款 APP 内嵌需求的时候，点击页面上的关闭按钮，可以调用 APP 的内置命令来唤起一个原生的二次确认界面，确认后才能够退出，避免用户误操作，但测试的时候才无意中发现，通过 APP 的右划后退，其实是可以绕过这个判断，直接就退出去了，这就是一个被遗漏的情况。描述上会不会太臃肿描述臃肿是新人比较常犯的一个问题，担心讲不清楚，所以说了一大堆，但可能又因为写的太啰里啰唆导致更看不懂，更可能导致因为每次都一大段一大段描述，最后被习惯性忽略导致一些细节反而没有被注意。就像一个 “短信 + 验证码” 登录的功能，没有必要把 “用户先输入手机号，校验手机号格式是否正确，然后点击下发验证码的按钮，接收验证码后，把验证码输入到验证码框里，点登录，校验验证码是否合法，合法的话注册成功” 之类的完成操作都写进去，因为这些都是常识性的。你只需要关注 “发送验证码后，需要把获取验证码的按钮置灰，并显示 60s 倒计时” ，“验证码校验失败时，清除倒计时” 这样的一些特殊描述上。是否会偏离需求目的这个倒不是说自己的设计目的偏离了，更多是投产后，用户的行为，是否会与自己的需求目的偏离。比如你做一个晒年味短视频的活动页面，主要目的是提升短视频的发布量，活跃 APP 的内容氛围，那么你在设计需求页面的时候，就应该多考虑一些降低参与门槛的问题，甚至可能把新手教程也考虑作为需求的一部分考虑进去，否则投产后，可能因为要求太复杂，参与门槛太高，最后没什么人参与。### 精益求精复读文档另外一个作用是精益求精，很多时候最佳实践不是一次性就能想到，那么就可以在复读文档的时候，检查是否可以再作优化。精益求精，不断完善你的需求，增强体验同样的，可以在这几个维度进行精益求精：参考成熟成功案例虽然很容易陷入 “你又抄了什么功能” 这样的圈子里，但不得不说，大型产品很多方案和决定都是经得起大量用户考验的，多了解下同类型产品的选择，再加以优化，是个比较稳妥的方法（毕竟你要为 KPI 负责啊）。参考竞品的优点版权相关的红线，你就不要去碰了，但是一些可以提升用户体验，只是你之前没有考虑到的，是不是就可以加进去。学会做减法小孩子才做选择，大人全都要，没毛病，但是落实到产品需求上，与之对应的有时间和成本要考虑，学会做减法也是一项很必备的技能。减法不一定就是直接砍掉不做，而是可能 v1.0 先不做，只做主要、核心的功能，等 v1.1 、v1.2 等小版本再慢慢做迭代进去。考虑复用性，可持续发展诸如一些活动页面，很多时候换个皮肤就可以复用（像抽奖转盘、投票页面等等），偶尔考虑几个可以复用的需求，可以作为特殊节点的应急需求上线。做好备选方案，以防万一最常见的情况就是，你想的天花乱坠，最后开发说做不了，或者需要比较长的时间来完成，而你的时间不充足，这种情况下，你是否可以立即给到一个备选的方案，避免影响上线计划。## 总结再回顾一下，完成一个靠谱的需求所经历的六个步骤：需求分析 > 功能梳理 > 流程设计 > 绘制框架 > 完善细节 > 复读文档。当然，实际情况中，不是每个需求都一定要每个步骤都经历，比如一些数据类的需求，那就没有绘制框架这种环节了，可以根据实际情况处理，其实本文主要的目的，是希望大家有这么一个思维，去对待你所跟进的每一个需求。## 后记第一次让我有意识的去了解产品设计的大佬，应该就是在 UC 的时候，前 PP 助手产品总监田哥，至今还记得当初借《人人都是产品经理》那本书给我看的时候跟我说，多了解点专业之外的知识，最终还是可以运用到自己的专业上，这么多年过来，确实非常正确。后来几年一直到现在，又跟唯品会的 UX 婷姐，网易的 UI 猪猪，又从交互体验和设计体验方面学到了不少跨界知识，感恩！！！\n"
  },
  {
    "slug": "search-children-in-404-page",
    "title": "Node爬取宝贝回家最新走失儿童信息 生成接口API在404页面调用",
    "desc": "很久没采购成箱的东西了，大部分情况下都是零零散散的京东散件或者天猫半日达，一个购物袋就给我装了送过来，周末刚好在天猫超市买了箱东西，开箱一看，发现箱子里面印刷上了走失儿童的信息，感动！突然想起很久没有关注到这方面的信息。",
    "cover": "https://cdn.chengpeiquan.com/img/2021/04/20210411154503.jpg?x-oss-process=image/interlace,1",
    "content": "在 404 页面投放走失儿童信息，这不是什么新鲜事了，到现在起码有近 10 年的历史，本来腾讯公益也有提供一个公共的 JS 文件可以直接调用，但是发现，数据竟然不更新了…… 2021 年都过去了快一半，JS 提供的数据源竟然还停留在一年前甚至更久，甚至我搜了一下里面的一些孩子信息，在腾讯 404 的 “最新” 数据源里，竟然有一个小宝宝已经成为了天使……\n\n相关新闻：河南走失自闭症女孩确认死亡，被找到时仅剩上衣\n\n这样的数据源对需要帮助的孩子，以及对已经找回 / 遇难的孩子来说，都是另外的一种 “伤害” ，为了让最新的求助信息能够得到曝光，所以昨晚在搜索最新数据源接口无果的情况下，简单折腾了一个小爬虫从宝贝回家的官网上直接抓取最新的数据。\n\n考虑到 404 页面的触发量不高，所以才采取了爬数据的方式，如果宝贝回家官网的工作人员觉得这个方式不妥当，请发邮件联系我处理掉。\n\n我的邮箱 chengpeiquan\\@chengpeiquan.com\n\n也希望有认识当前负责 腾讯公益 404 页面 的朋友们，帮忙告知一下数据源停更了的问题。\n\n## 为什么突然关注这事\n\n很久没采购成箱的东西了，大部分情况下都是零零散散的京东散件或者天猫半日达，一个购物袋就给我装了送过来（低成本换来的高效率，连个箱子都木有……）\n\n周末刚好在天猫超市买了箱东西，开箱一看，发现箱子里面印刷上了走失儿童的信息，感动！突然想起很久没有关注到这方面的信息了。\n\n天猫超市在箱子里的公益信息\n\n自从各种 APP 横行和移动端浏览之后，对于各类网页版的新闻网站，都看的比较少了，所以也很久没有看到这个走失儿童的 404 信息。\n\n想想其实自己的博客也可以挂一个，能帮助多少是多少，对于走失的孩子们来说，这也是黑夜里的一点亮光和希望。\n\n## 需求分析\n\n天猫超市这个是基于支付宝的团圆小程序的数据，但是我找不到官网，而且它也不是展示寻人信息的平台，更多的是作为一个报警平台使用，所以我也没有想去抓包看请求，因为也没有自己需要的数据。\n\n那么还是得看一下 腾讯公益 404 页面 ，来到这里本来我觉得挺好的一个现成数据源，拿来用就是了，但当接入完，发现竟然，？？？，就如本文开头所说，都很老的数据，虽然上面有些孩子可能依然还在被寻找中，但这样会导致更多需要帮助的孩子失去了曝光机会。\n\n因为数据都是来自于 宝贝回家寻子网，去官网看了一下，发现官网和官方论坛上的信息是非常的新，在衡量了论坛数据源和官网数据源的优劣势之后（论坛格式不统一，图片排序不规则也导致不知道哪一张是被寻人的照片），所以决定抓取官网的数据过来。\n\n宝贝回家官网的最新寻人模块\n\n## 如何实现\n\n由于官网的模块只有被寻人的列表，所以需要经历两个环节的数据爬取：\n\n**一、先爬取模块里的链接，拿到详情页 URL 的数据源列表**\n\n这里我借助了 jsdom 来分析页面结构，提取每个人的详情页链接，另外考虑到曝光率的问题，一个列表 35 个人，全部展示不现实，但如果一直按列表顺序截取前 X 个人，又太少（官网的更新频率也不是非常的高），尽量保持第一页的人都有足够的曝光机会，所以这里通过一个 洗牌算法 打乱了排序，再截取前 3 个被寻人的信息去抓取详情。\n\n**二、抓取详情页的内容，返回每个被寻人的信息**\n\n第一步拿到的是一个 a 标签的 DOM 合集，在这里做了一层循环，由于需要等待详情页的爬取完毕后再统一返回，所以这里没有使用 forEach 等方法，只用了传统的 for 去等待每个请求（所以这也是每次只取 3 个被寻人的原因，虽然是公益，但也不希望对官网造成有过多的不良影响）。\n\n爬取详情页的时候也是通过 jsdom 去分析页面结构，拿到节点上的文本信息作为 JSON 的值来返回。\n\n最终是得到了一个 JSON Array 返回给接口，因为我的服务端程序是用的 Express ，所以在 Express 的路由文件里，读取刚才写好的方法，拿到数据后作为接口的数据返回即可。\n\n相关的代码都托管在仓库里了，需要的同学可以参考，部署到自己的服务端生成 API 就可以调用。\n\n传送门：search-children-api-example\n\n## 最终效果\n\n最终 404 页面上，走失儿童的效果预览如下图，考虑到博客里目前用户的访问占比，以及宝贝回家官网本身的适配程度（官网没有手机版和英文版），所以目前只投放在博客中文版的桌面端。\n\n可以戳: 404 或者随便打一个不存在的路径查看效果（因为需要走多次请求才能拿回数据，所以倒计时我改成 10s 了）。\n\n404页面的效果预览\n\n当然以上是作为一个技术男力所能及的一点小公益贡献，生活里时不时还是有机会可以帮助到更多的人，比如之前在知乎就看到一个新闻： 以偶像之名——百站联合公益计划 以爱心共筑校园 ，追星的同时做公益，也是一个特别好的方式，希望有能力有影响力的人，能够多带头多响应，让世界更好！\n\n以上。\n"
  },
  {
    "slug": "reclassify-articles",
    "title": "对文章又重新做了一次分类",
    "desc": "时隔两年，改版的时候去掉了分类，想了想，还是加回来吧，又把所有内容重新分了个类。",
    "cover": "https://cdn.chengpeiquan.com/img/2021/03/20210316221139.jpg?x-oss-process=image/interlace,1",
    "content": "上一次做文章分类还是在 2019 年（见：对博客的文章重新做了一下归类和整理），那次的分类都是针对技术侧的内容梳理，春节对博客改版的时候觉得似乎没什么必要继续保留，连我自己都不怎么点进去筛选的分类，不见得其他人会想看，所以第一版上线并没有考虑做分类。\n\n但最近发现其实有时候还是想写一写一些与技术无关的东西，比如产品设计、做饭？或者一些音乐相关的东西，或者养猫的一些心得？\n\n啊哈哈哈最近好多朋友都找我问养猫的一些技巧，新手猫奴多了不少，大家都知道我养了好几年猫，还养了三只，之前也是时不时会有咨询一些怎么照顾猫之类的问题…\n\n最近每天都有朋友来问怎么养猫\n\n大概就是这些七七八八的原因吧，老是在微信上一问一答也挺累的，都可以公开的东西，不如找时间整理整理。\n\n所以这次干脆重新把分类加了回来，粒度就没有弄那么细了，只是简单分了 “技术” 和 “随笔” ，随笔这边应该是想写什么就写什么了。\n\n以上。\n"
  },
  {
    "slug": "attending-a-wedding-alone",
    "title": "一个人参加婚礼，周围都不认识是什么感受？",
    "desc": "那天第一次参加户外婚礼，而且之前在接到邀请时已经得知全场只有新娘新娘是直接认识而且很熟悉的，出于社恐的本能我内心是打退堂鼓的，但出于友谊和对新娘的信任（相信她的安排），我觉得我必须去，然后那天就来了！",
    "cover": "https://cdn.chengpeiquan.com/img/2024/10/202410210113934.jpg?x-oss-process=image/interlace,1",
    "content": "这是我在知乎问题 一个人参加婚礼，周围都不认识是什么感受？ 下的回答。\n\n去年底的时候我也经历了一次一个人参加婚礼，周围也都不认识的情况，去之前在知乎的问题下面取了取经，发现大家的经历真是……非常一致的不好，然后我就很忐忑……\n\n不过在经历了实际体验之后，完全改变了我对参加婚礼的看法，这次的体验特别好！！！本来那天就想回头在这里分享下经历，结果一忙起来就没边…\n\n直到这周新娘从工作地过来出差，找我吃了个饭，我才想起我一直忘记把这个话题写一下。\n\n## 那一天的日记\n\n还好平时有写日记的习惯，那一天的经历，在睡觉前就完整的记录在了日记里了，模糊掉主角的一些信息，我把那天的经过都写一下，让其他小伙伴在面对一个人参加婚礼的时候，能多一点参考，这个世界对社恐并没有那么的不友好。\n\n我那天的日记\n\n日记里写的称呼都是我朋友的名字，这里我就都用新郎、新娘和拼音缩写代替吧！\n\n## 去之前的忐忑\n\n那天第一次参加户外婚礼，而且之前在接到邀请时已经得知全场只有新娘新娘是直接认识而且很熟悉的，出于社恐的本能我内心是打退堂鼓的，但出于友谊和对新娘的信任（相信她的安排），我觉得我必须去，然后那天就来了！\n\n那一天凌晨在睡觉前，还特别忐忑的跟我师妹说，我该咋办鸭，去到那里一个人会不会很尴尬……哈哈哈哈哈哈给你们看看我那天和师妹的聊天记录。\n\n真正的好朋友会给你出谋划策\n\n养了三只猫的我\n\n一通主意下来，突然意识到我自己的爱好其实蛮广泛的\n\n在师妹帮忙出注意和鼓励下，我睡了个好觉！\n\n## 刚到婚礼现场\n\n那天是户外婚礼，比较卡白天有阳光的时间，所以得从下午就开始，下午4点到场的时候，没看到熟人，我一个人有点不知所措，不过因为两年前见过新郎一面，最近也见过新郎的照片记下来了印象，所以过去跟新郎打了个招呼，顺便问了新娘在哪里，说在换衣服，估计一时半会也没好。\n\n虽然现场有座椅也有空位，但我看在座的都是长者，不知道有没有什么讲究，不敢贸然过去坐。\n\n刚到现场的时候，婚礼还没开始\n\n然后我就站在比较边的几个人旁边玩手机缓解尴尬（都是女生，前面零散几个，后面五六个一起好像姐妹团，但又没有统一服装，最终前后都距离大概一米），想着等下看看旁边这几个人等下怎么行动就跟着。\n\n和师妹说我超忐忑\n\n得到了师妹的鼓励啊哈哈哈\n\n哈哈哈哈哈哈还被师妹识破了我，表面超淡定，实际上慌的一笔hhhhhh\n\n开始的时间到了，司仪说即将开始，希望大家把前面的位置坐满，所以我才去最后一排右下角坐了下去。\n\n这个时候我还是比较弱小可怜无助的，我不认识大家，大家也不认识我，比较莫名其妙的感觉…然后很快座位都坐满了，我旁边也坐了个似乎一个人来的女生（就是上图聊天记录里，照片里的绿色衣服的小姐姐），不过没问她，凭直觉应该也是女方亲友。\n\n这场婚礼分了两部分，户外和室内的，所以我下面做个小标题区分不同阶段吧！\n\n## 户外婚礼阶段\n\n这个司仪的主持风格感觉很舒服，也没有很多恶搞人的风格，素质比较高，氛围带动得很棒，中间的各种介绍新人的故事也都表达的很舒服，司仪的style让我缓解了不少的尴尬，之前担心各种尴尬的主持环节完全没有发生，在这里给司仪点赞！！！！！\n\n我跟新郎有一面之缘是因为，18年我去澳洲的时候把我家两只猫寄养在新娘家（当时还没养第三只），我在天河区，离芳村比较远，回来的时候是他开车帮我带过来的，没有让我再赶一趟路过去，那次对他的印象就特别好，很斯文很好相处的那种感觉，这次再次接触到真人感觉确实也是一个很好相处的人。\n\n后面抛捧花环节，都是新娘的小姐妹上去接，最后是绿色衣服的小姐姐接到了，就特别巧，就坐我旁边的这位。\n\n和师妹分享喜悦\n\n于是那天第一次有人说话就是这次接绣球了，她回座位的时候恭喜她，然后就有人说说话也没那么紧张了，然后才知道她是新娘同学，竟然是特地从澳洲飞回来参加新娘婚礼的，受疫情期间的要求，在酒店隔离了14天，那天第15天才刚好能过来！！！\n\n这里是第一次缓解了我的紧张！\n\n## 室内用餐阶段\n\n昨晚在知乎有查过户外婚礼的基本模式，所以也知道跟着众人走去宴会厅（司仪也有说哈哈哈，不过我不知道都在哪里，跟着走准没错！）\n\n在准备上楼之前，我遇到了一个面熟的人，去年我搬家的时候，刚好在新娘家的小区附近，然后新娘和她妈咪来看我家猫的时候（有一只是她们家生的，送给我养，所以离的近了就过来看看她们家的崽崽），还有一个新娘发小也一起来，这个人就是那次一起来的发小，跟她打了个招呼，她也还记得我哈哈哈\n\n在3楼的宴会厅门口站了会，假装有人找我在回微信，实际上是在观察大家怎么进去，因为我事先也不知道是哪一桌…\n\n然后看到门口有兄弟团的小哥在帮宾客确认座位，所以我也签到后问了问他（负责客人签到的小姐姐还夸我头发很酷，这里是第二次缓解了我的紧张）\n\n越来越镇定的我\n\n落座后看了一下桌上的同桌宾客卡片，发现刚刚那个绿衣小姐姐（抛捧花的时候得知了她的名字）又是和我一桌，后面她来的比较晚，指引的兄弟团小哥不在门口，看到她也比较尴尬的不知道哪一桌，我就过去跟她说了在我这边，于是变成了我像主场人在带紧张的小伙伴一样，第三次缓解了我的紧张…\n\nBtw，那天晚上的菜好好吃！！！！！\n\n到这里我其实也没啥好紧张了，毕竟有了一个可以说话的人（绿衣小姐姐就坐一起了），而且我也去过澳洲，凯恩斯、悉尼、墨尔本玩，和这个小姐姐都是共同待过的地方，所以土澳那边的一些话题也能交流，然后从她这得知这一桌除了另外两个男的是两个女生的老公之外，剩下的全是女生，而且也都是新娘在澳洲的同学，好吧，感情我去澳洲玩了两周也算澳洲系了哈哈哈哈哈哈哈哈哈哈，把我安排在同一桌（所以新娘的安排其实是很花心思的！！！！！）。\n\n## 父母祝福阶段\n\n我们是8号桌，但其实是最后一桌，今晚新娘他们只邀请了特别好的亲友过来，规模不大，但整个过程下来真的感觉诚意满满！\n\n前面父母讲话的时候，才知道双方父母都是高学历大佬，都是研究生，几十年前那个年代的研究生噢…膜拜！！！！！果然讲的话也特别有水平，特别是新娘爸爸在给新人祝福的时候，没有像普通人一样祝福早生孩子之类的，而是说到他俩目前创业的事情，希望他们能够多用心做好产品体验，多为社会做贡献！\n\n听到这里其实挺触动的，因为上个月我自己也开始尝试接触一些开源项目，借助框架的大版本更新开荒撰写一些系列教程文档，莫名的切中了我的泪点，其实敲代码能让我感到快乐，最主要的一个原因就是不需要通过直接的交流，就能够默默的借助自己的绵薄之力去帮助社会上的其他人，很适合社恐，方式也简单，博客，开源，都是渠道，渺小的普通人也能努力发光。\n\n## 新人敬酒阶段\n\n敬酒是按顺序一桌一桌过来的，我看前面也是拼桌，但没有和平时婚礼一样走过场完事，而是一桌这三五个一起的，先给其他人介绍他们，然后敬酒，再跟另外三五个一起的，给其他人介绍这几个，再敬酒，这样一桌人其实就不会因为不认识而尴尬了！！！这样的安排真的很照顾人！！！\n\n来到我们这一桌的时候，因为我坐的比较靠里，新娘是先跟她的同学的，所以我站着也是傻笑，然后突然新娘爸爸过来跟我敬酒，我受宠若惊！没想到的是，他爸爸竟然知道我！！！！！！\n\n他问我说，问我是小黄的爸爸吧！他一直在留意手上有纹身的人，终于看到了（哈哈哈哈竟然！！！btw: 小黄是她们家猫生的猫崽，17年的时候送给我养，因为是返祖色美短，偏黄色，所以在他们家当时是叫小黄，在我家我是叫它弟弟，这里我就用小黄来称呼它吧\n\n因为新娘爸爸也是很爱猫，新娘平时也会把我发她的猫照片发她家群里，所以她爸爸也知道我把小黄养的很好，看到我了就过来跟我先聊聊。\n\n然后新娘妈妈也先过来了，她妈咪也是特别好，当时小黄来我家的时候，还是她妈妈开车给我带过来的！然后我那次搬家后，因为离他们家不远，也来我家看过小黄，因为小黄的原因，虽然我又纹身又长发，但她妈咪对我印象很好，老夸我爱猫！\n\n然后她爸妈又跟亲家父母介绍我，都说这是小黄的爸爸，音乐才子（因为知道我之前玩乐队还跑演出，其实我是渣渣），还是程序员，一顿夸…这一下子从小透明就变成了大佬的感觉，这个时候已经完全没有之前的紧张了！！！！！\n\n然后新娘和新郎也过来了，跟旁边的小姐妹们也介绍这是他们家猫的爸爸，于是我感觉我有一种全场最佳的感觉…毕竟其他人都是朋友或同学，而我，在此之上还是猫的家属！对养猫的人来说真的是非常的有荣誉了！\n\n后面跟新人合照，新娘还叫我把手伸明显点，还跟台下的人说我手上的猫纹身是她家的小黄（这个是事实），这一下子新娘的亲戚们也都认识我了…\n\n放张最有爱的老照片吧哈哈哈，当时手上图案还比较少，小黄抱着我的手睡觉，感觉它很幸福，我也很幸福！\n\n小黄抱着我的手午睡\n\n现在它长大了，还是喜欢抱着我的手睡觉！\n\n## 最后完全放松\n\n虽然那天从下午4点待到晚上10点，整整6个小时，但对比平时走形式的俩小时婚宴，那天却是我感觉最舒适的一次婚礼！\n\n主角对婚礼的节奏安排很合理，请的司仪也很靠谱，然后感觉很真诚的一点就是没有为了婚礼而请一堆人，就真的邀请的是特别好的朋友过来，每个人都能看出跟新人很有话题可以聊，而且中间的各种环节也让同桌和附近的人能够简单的互相认识，缓解陌生人同桌吃饭的尴尬，真的情商好高！！！\n\n新娘的爸爸妈妈也是人特别好，在新娘忙于接待其他人的时候，能够主动过来找我说话，避免我在一旁尴尬，真的特别感动！！！！！\n\n然后还有一个特别原因就是这个猫家属的特别身份，其实我知道新娘家的猫还有另外一个小姐姐也领去养了，也就是小黄的妹妹，之前看过照片，大概记得样子，不过今晚没有看到，所以全场只有我有这个特殊介绍！！！\n\n从紧张忐忑到完全放松了！\n\n那天特别开心，感受到满满的真诚，真的就是朋友聚会的感觉，不是单纯的为了参加婚礼而参加婚礼！！！！！\n"
  },
  {
    "slug": "vue3-script-setup",
    "title": "聊一聊Vue3.0的script-setup 以及全新的props/emits专属API",
    "desc": "今天想聊一聊 Vue 3.0 的 script-setup，以及目前三个很少被提及到的 API —— defineProps 、 defineEmit 和 useContext。截止到我撰写本文，它们在 Vue 3.0 的官网都还没有相关的用法说明，因为目前还属于实验性的新特性，什么时候会并入正式轨道，时间上还不清楚，但事实上在项目里已经可以使用起来了，自己体验了一段时间，真的爽！！！",
    "cover": "https://cdn.chengpeiquan.com/img/2021/02/20210305211036.jpg?x-oss-process=image/interlace,1",
    "content": "2021-07-05：由于版本更新，本文部分内容已有过期，最新的相关内容请阅读：Vue3.0最新动态：script-setup定稿 部分实验性API将弃用2021-03-21：本文已同步到 高效开发 - Vue3.0 学习教程与实战案例 一章，可直接看专题文档了解更多。今天想聊一聊 Vue 3.0 的 script-setup，以及目前三个很少被提及到的 API —— defineProps 、 defineEmit 和 useContext。截止到我撰写本文，它们在 Vue 3.0 的官网都还没有相关的用法说明，**因为目前还属于实验性的新特性**，什么时候会并入正式轨道，时间上还不清楚，但事实上在项目里已经可以使用起来了，自己体验了一段时间，真的爽！！！目前在社区讨论方面，script-setup 的知名度还是可以的，但是对应的另外 3 个专属 API 还是比较默默无名，这说明什么？看热闹的人多，实际体验的人少。很多人应该还只是处于单纯知道 script-setup 对于原来的 setup 起到什么样的便利性，但一旦哪天真的想用起来，会发现不知道 props 怎么用，不知道 emit 怎么用，用法完全变了，还一时半会搜不到文档，关键时刻被卡住（这一点在 stackoverflow 上的问题咨询体现的比较明显），这也是我想写一写这篇文章的目的，提前科普这几个新特性。在阅读这篇文章之前，需要对 Vue 3.0 的 setup 函数有一定的了解，如果还处于完全没有接触过的阶段，请先抽点时间阅读 单组件的编写 - Vue3.0 学习教程与实战案例 。 >另外，根据 vue-next 的 changelog ，记得先把 vue 和 @vue/compiler-sfc 这两个依赖都升级到 v3.0.4 版本或以上（这两个依赖必须保持同样的版本号，我自己是在目前最新的 v3.0.7 版本下跑通了所有 API，版本太低会报错，因为旧版本还没有包含更新的内容）本文会划分为四个部分：讲一讲 script-setup回顾一下 props 和 emits讲一讲 defineProps 和 defineEmit讲一讲 useContext通过这几个维度来讲一讲这个便捷版 setup 的用法和需要注意的问题。## 什么是 script-setup在 Vue 3.0 的 .vue 组件里，标准的 setup 用法，默认的 SFC 规范里（注：SFC，即 Single-File Component， 单组件）要求，在 setup 里面定义的数据如果需要在 template 使用，都需要 return 出来，如果你使用的是 TypeScript ，还需要借助 defineComponent 来帮助你对类型的自动推导。关于 setup 和 defineComponent 的说明和用法，可以查阅我以前写的 全新的 setup 函数 。而 script-setup 的推出是为了让熟悉 3.0 的用户可以更高效率的开发组件，减少一些心智负担，只需要给 script 标签添加一个 setup 属性，那么整个 script 就直接会变成 setup 函数，所有顶级变量、函数，均会自动暴露给模板使用（无需再一个个 return 了）。Vue 会通过单组件编译器，在编译的时候将其处理回标准组件，所以目前这个方案只适合用  文件写的工程化项目。对，就是这样，代码量瞬间大幅度减少……而组件的挂载，在原来的写法是需要 import 后再放到 components 里才能够启用：在 script-setup 模式下，只需要导入组件即可，编译器会自动识别并启用。其他的变量、函数，以及 onMounted 等生命周期，还有像 watch 、 computed 等监听/计算功能，都跟原来一样定义就可以了，没有太大的区别。区别比较大的还是 props / emits 的定义和调用，由于在 export 组件的时候没有了对象式选项，setup 也没有了函数入参，标准组件的用法无法直接迁移到 script-setup ，因此针对该模式， Vue 3.0 单独推出了三个专属的 API：defineProps 、 defineEmit 和 useContext 。在了解它俩之前，想先给大家回顾下什么是 props 和 emits ，已经了解熟悉它们的同学可以直接跳去本文 什么是 defineProps 和 defineEmit 部分。## 什么是 props 和 emits通常我们为了避免一个页面（父组件）写的又长又臭，会根据布局/功能模块，把页面切割为不同的小模块（子组件），最后再像搭积木一样把它搭回来，完成我们的作品，我画了一个示例图，就是下面这样子：每一个“积木”都是一个组件比如上面是一个 home.vue , 它包含了 Header.vue / Footer.vue / Content.vue / Sidebar.vue 等子组件，如果此时页面上有一个公共的数据，有多个子组件都需要用到的话，就没有必要在诸如 Content / Sidebar 里分别获取或者定义了，而是在父组件 home 里面处理好后，传递给子组件使用。props 就是在这种情况下用于父组件向子组件传递数据，而 emits 则是让子组件可以向父组件发起通信。在 home.vue 定义了一个数据和方法之后，传递给子组件 Content.vue ：子组件通过 prop 来接收 name 数据，通过 emit 来接收和提交名字的变更方法 changeName ：当然，这里不是想说 props 和 emits 怎么用，关于 props 和 emits 的定义和具体用法，在 props / emits 一节已有详细的总结和案例，这篇文章里就不再展开更多说明啦！## 什么是 defineProps 和 defineEmit回来说这两个 API ，顾名思义， defineProps 一看就知道是用来定义 props 的，而 defineEmit 则是用来定义 emits 的，那么它俩跟上面提到的 props / emits 有什么区别？在你的项目  里，有一段针对该 API 的注释（不要问我怎么找到这里的，我只能跟你说我用的 VSCode …）：很清晰的解释了它们的使用限制，只能用于 script-setup 。那么我们来看下用便捷版 setup 写法之后，父组件长什么样：有没有瞬间清爽百倍的感觉！！！在 script-setup 的写法里，所有数据都是默认  的，子组件也无需通过  选项进行挂载了，默认导入即生效，在编码过程中，可以大大的提高开发效率。所以疑问就来了，父组件是爽了，那么子组件呢？整个 script 都变成了一个大的 setup function ，没有了组件选项，也没有了 setup 入参，如何获取父组件传下来的 props 和 emits 呢？所以，这两个新的 API ，就是在 script-setup 里帮助子组件拿到父级传过来的 props 和 emits 。注：以下所有的 JS / TS 部分，如果没有特别说明，都是指写在  里## definePropsdefineProps 是一个方法，内部返回一个对象，也就是挂载到这个组件上的所有 props ，它和普通的 props 用法一样，如果不指定为 prop， 则传下来的属性会被放到 attrs 那边去。### 基础用法所以，如果只是单纯在 template 里使用，那么其实就这么简单定义就可以了：使用  数组作为入参，把 prop 的名称作为数组的 item 传给 defineProps 就可以了。记得从 vue 导入 defineProps 噢，下面的代码就不重复 import 啦！！！如果 script 里的方法要拿到 props 的值，你也可以使用字面量定义：但在作为一个 Vue 老玩家，都清楚不显性的指定 prop 类型的话，很容易在协作中引起程序报错，那么应该如何对每个 prop 进行类型检查呢？有两种方式来处理类型定义。### 通过构造函数进行检查这是第一种方式：使用 JavaScript 原生构造函数进行类型规定。也就是跟我们平时定义 prop 类型时一样， Vue 会通过 instanceof 来进行 类型检查 。使用这种方法，需要通过一个 “对象” 入参来传递给 defineProps，比如：所有原来 props 具备的校验机制，都可以适用，比如你除了要限制类型外，还想指定 name 是可选，并且带有一个默认值：更多的 props 校验机制，可以点击 带有类型限制的 props 和 可选以及带有默认值的 props 了解更多。### 使用类型注解进行检查这是第二种方式：使用 TypeScript 的类型注解。和 ref 等 API 的用法一样，defineProps 也是可以使用尖括号 <> 来包裹类型定义，紧跟在 API 后面，另外，由于 defineProps 返回的是一个对象（因为 props 本身是一个对象），所以尖括号里面的类型还要用大括号包裹，通过  的键值对形式表示，如：注意到了吗？这里使用的类型，和第一种方法提到的指定类型时是不一样的，在这里，不再使用构造函数校验，而是需要遵循使用 TypeScript 的类型，比如字符串是 string，而不是 String。如果有多个 prop ，就跟写 interface 一样：其中，举例里的 userInfo 是一个对象，你可以简单的指定为 object，也可以先定义好它对应的类型，再进行指定：如果你想对某个数据设置为可选，也是遵循 TS 规范，通过英文问号  来允许可选：如果你想设置可选参数的默认值，这个暂时不支持，不能跟 TS 一样指定默认值，在 RFC 的文档里也有说明目前无法指定。Unresolved questions: Providing props default values when using type-only props declaration.不过如果你确实需要默认指定，并且无需保留响应式的话，我自己测试是可以按照 ES6 的参数默认值方法指定：这样如果传入了 name 则按传入的数据，否则就按默认值，但是，有个但是，就是这样 name 就会失去响应性（因为响应式数据被解构后会变回普通数据），请注意这一点！需要强调的一点是：这两种校验方式只能二选一，否则会引起程序报错## defineEmitdefineEmit 也是一个方法，它接受的入参格式和标准组件的要求是一致的。注意：defineProps 是复数结尾，带有 s，defineEmit 没有！由于 emit 并非提供给模板直接读取，所以需要通过字面量来定义 emits，最基础的用法也是传递一个 string\\[] 数组进来，把每个 emit 的名称作为数组的 item 。由于 defineEmit 的用法和原来的 emits 选项差别不大，这里也不重复说明更多的诸如校验之类的用法了，可以查看 接收 emits 一节了解更多。## useContext在标准组件写法里，setup 函数默认支持两个入参：参数类型含义propsobject由父组件传递下来的数据contextobject组件的执行上下文这里的第二个参数 context，在 script-setup 写法里，就需要通过 useContext 来获取，一样的，记得先导入依赖：你也可以对它进行解构，直接获取到内部的数据：对于 context 的使用和注意事项，如果不了解的话，可以在 setup 的参数使用 了解更多。## 参考资料以上所有的资料都来自于 Vue 的 rfcs 仓库，原文传送门：script-setup - vuejs/rfcs 。除了看英文说明适当做了翻译之外，大部分坑点都是自己在 DEMO 里运行出来总结的，后面如果有什么变动的话，建议以官网文档的正式版为准，我也会留意他们正式发布后的变化进行内容更新。## 结语目前在运行项目的时候，控制台会有提醒：告知 script setup 当前仍然是个实验性的新特性，还没有作为正式特性发布，后面会不会有变化还不好说，本文仅作为目前有用到这个新特性的同学参考。更多关于 Vue 3.0 的起步教程，可以在 Vue3.0 学习教程与实战案例 了解，稍后有时间我也会把这部分内容一起合并进去。\n"
  },
  {
    "slug": "vite-plugin-banner",
    "title": "vite-plugin-banner：让Vite在打包的时候添加版权注释",
    "desc": "基于Vite，实现一个和webpack banner plugin一样功能的版权注释插件，可以为每个 chunk 文件头部添加 banner 注释。",
    "cover": "https://cdn.chengpeiquan.com/img/2021/01/20210224102526.jpg?x-oss-process=image/interlace,1",
    "content": "我很久前有一篇博客是介绍了一个 WebPack 插件，可以在打包后给 JS / CSS 文件添加一个版权注释，可以表明项目归属，用于声明版权信息或者如果出了什么问题知道可以联系谁。传送门：基于 Vue-CLI 3.0 让 WebPack 在打包的时候添加版权注释最近开始玩 Vite 的一些东西，虽然文档说可以继承 Rollup 的配置选项，以及一些 Rollup 的插件支持，但测试了一下，banner 功能并没有生效，所以昨晚有空就了解了一下 Vite 插件怎么开发，并参照 Webpack banner plugin 的功能自己写了一个，下面是插件的功能说明，同步了 npm 上的 README。## 功能为每个 chunk 文件头部添加 banner 注释。## 安装从 npm (或者 yarn 或者 pnpm) 安装：## 选项插件选项类型作用描述使用例子string横幅注释的内容基础用法BannerPluginOptions请参阅下方的类型声明可选参数格式· Type Declarations:## 用法在大多数情况下，只需使用  格式作为插件选项。在一些特殊情况下，比如在 VitePress 中，可能需要使用  格式来传递插件选项，详见 可选参数格式 。### 基础用法在  添加：当你在你的项目上运行  打包的时候，在  文件夹（或者你在  配置的其他 build.outDir ），除了  文件外，所有的  和  文件都会添加一个 banner 注释在文件顶部。例如，在生成的  里:### 高级用法当然，最理想的 banner 注释是和你的项目信息相关联。首先，你需要更新你的  文件，像这样，包含类似的字段内容：然后，在你的  导入 ，像这样更新 banner 插件的内容：运行  打包, 你可以看到生成出来的 banner 注释更详细：例如，在生成的  里:### 趣味用法如果你想制作一些个性化的 banner 注释，像什么表白啊、佛系啊、招聘信息啊什么的，可以通过一些在线生成器去制作有趣的内容。比如在这些网站上可以直接生成:http\\://www\\.network-science.de/ascii/https\\://www\\.bootschool.net/ascii执行  打包, 还是在  ，现在变成了：### 可选参数格式我不确定除了 VitePress 还有哪些场景需要用到这种方式来传入选项，所以我用 VitePress 来举例，希望能给到你参考。为什么要这么做？因为在 VitePress 里，通过 viteConfig.build.outDir 拿到的永远是一个  的临时目录，不是最终的输出目录，所以你需要手动指定输出目录来告知插件。当然，随着 Vitepress 的版本更新，不一定需要这么做，只是当你需要的时候，可以选择这么处理。\n"
  },
  {
    "slug": "rewrite-in-vite",
    "title": "重构于Vite",
    "desc": "从 2021 年元旦 Vite 发布 2.0 Beta 版就一直在关注 Vite 的动态，借着春节放假有时间，而且 Vue 3.0 和 Vite 2.0 都才大版本更新上线不久，预感后面会火，先开荒尝试一波，也当给以后工作上的业务先提前踩踩坑，对博客做了第三次重构，这一次把客户端和服务端都重新写了，由 PHP 的 LNMP 全家桶全部换成了前端侧的技术栈。",
    "cover": "https://cdn.chengpeiquan.com/img/2021/02/20210219234631.jpg?x-oss-process=image/interlace,1",
    "content": "从 2021 年元旦 Vite 发布 2.0 Beta 版就一直在关注 Vite 的动态，借着春节放假有时间，而且 Vue 3.0 和 Vite 2.0 都才大版本更新上线不久，预感后面会火，先开荒尝试一波，也当给以后工作上的业务先提前踩踩坑，对博客做了第三次重构，这一次把客户端和服务端都重新写了，由 PHP 的 LNMP 全家桶全部换成了前端侧的技术栈。\n\n在经历了春节假期每天大概花 2 \\~ 3 小时的投入，终于如期上线，第一个版本是发布于 2 月 14 日情人节 ，算是给自己的情人节礼物，当时是先部署在我闲置的香港服务器做了一波测试服调试，期间做了一些体验上的优化，然后 2 月 18 日 在休假的最后一天，部署到我正式服务器上了。\n\n而且特别巧的是，这一天也是 Vite 2.0 正式版发布的日子：Vite 2.0 发布了 - 尤雨溪，同一天上线，就感觉特别美好，值得纪念。\n\nLightHouse的打分\n\n## 运作流程\n\n本次重构后，从开发到部署更新的运作流程图如下，日常只需要维护 GitHub 仓库的代码，其他的都是自动化完成。\n\n博客运作流程\n\n## 重构的价值\n\n这次重构，并非是因为放假有空就找点事情做，而是带着几个目的来的：\n\n提前开荒 Vite 2.0 ，为公司后续的业务提前踩坑，可以为团队进行技术选型提供帮助，因为之前我在做 JSSDK、Vue Plugin 的时候，已经开始脱离 Webpack，用 Rollup 作为构建工具，而 Vite 正是基于 Rollup ，不仅构建速度非常快，而且也像 Webpack 一样提供了热更新，对于一线开发来说，体验上是非常好的，而且它还是 Vue 团队大力推广的新工具，这让我很有兴趣去研究它。\n\n了解一下当前的一些新生的前端工具，比如 UI 框架方面之前一直停留在适合 B 端产品的 Ant-Design、 Vuetify 、 饿了么等等，说实话我做 B 端产品的时候才会用，面向 C 端因为有设计稿，我基本上都是手写样式，听闻新一代的 UI 框架 Tailwind CSS 已经有一段时间了，虽然很奇怪为什么还会回到十年前一样用原子类的 class，“开倒车” 竟然还有 3 万多的 Star，让我非常的好奇到底为什么，结果一用，真香！没错，这次博客的样式，就是用的 Tailwind 。 还有像 CSS 预处理器之前也一直停留在 Sass / Less / Stylus 三驾马车，这一次我抛弃了他们，用上了 PostCSS Language + CSS Variable，也是真香！\n\n借此机会多了解一下生产环境的服务端开发，公司业务几乎没有机会让自己实操服务端，所以大部分情况下都是在跑本机的 Server，很多场景是开发环境下遇不到的，要想进步，还是要多在生产环境磨练。\n\n接触更多优秀的开源作品，比如代码语法高亮之前一直只知道 highlight.js （因为 WordPress 的高亮插件就是用这个……），这一次我是用了 prism ，更小巧，颗粒度更细，虽然目前还没有太多时间去定制代码高亮的配色，不过后面有时间想要处理，prism 会更加方便。\n\n享受从 0 到 1 搭建脚手架的一个过程，目前这个版本算是实现一个简易版的 VuePress ，但是如果一直使用开箱即用的 VuePress ，很多时候并没有想去了解那些功能是怎么实现的，或者用哪些工具可以实现想要的功能（Btw: 我自从用了 Vue-CLI 之后就很久没自己配置 Webpack 了，直到 Rollup 的时候才算重新玩转了一次，这一次的 Vite 又是新的体验）\n\n更多的更多，尽在未来，这肯定不是最后的一个版本，还有非常大的优化空间。\n\n## 重构前的目标\n\n其实去年就有想法要对博客做一波改版，但有几个原因导致一拖再拖，一个是因为业务比较忙（这个没办法，工作为重），一个是懒（主要是懒得去思考怎么设计，当然期间有在考虑一些不同的落地方案），还有一个主要的原因是当时 Vue 3.0 刚发布，我当时主要的精力放在踩坑体验 3.0，那段时间，大部分的时间和精力都放在撰写 Vue3.0 学习教程与实战案例 上面去了，休息时间有限，能够闲下来的时间也只有下班回来和周末，除掉一些自己的事情外，留下来捣鼓新东西的时间并不算很多，只能先押后了。\n\n相比 2018 年那次改版，当时只是单纯想重新弄一个干净的博客写东西，这一次的目标是比较明确了，就是从基于 PHP 的 WordPress，用前端的技术栈全部重构一遍，做一个纯前端的博客出来，当然还要保留 SEO ，就要求还要上 SSR（Server Side Render） 或者 SSG（Server Side Generation） 。\n\n## 技术栈的选择\n\n由于开工前已经是 2021 年了，因为有前面几个月玩 Vue 3.0 的基础打底，非常想用 3.0 来重构博客，加上元旦期间 Vite 2.0 Beta 版刚好发布（就很突然），注意力完全放在了 Vue3 和 Vite2 上面，非常想跑一下两者结合有多爽。\n\n由于重构的最终目标还是要保持网站的 SEO 能力，所以肯定不能使用默认的 SPA 应用模式，要走服务端渲染，所以技术栈方面只需要考虑两条线：\n\n### 基于 SSR\n\n虽然在此之前考虑过几个方案，最开始是优先考虑做 SSR ，考虑过 Nuxt 、Vapper 等一些比较流行的开箱即用的 SSR 框架，但这些框架目前都还在弄 Vue 2.0，甚至部分框架看起来有点 “弃坑” 的趋势（背靠字节大厂的 Vapper 居然一年多没更新了 emm…… ）。\n\n加上搞 SSR 的话，服务器成本比较高，我的低配 ECS 可能 Hold 不住，好好玩一玩的话还要投点钱，想了想先算了，那么退而求次就是上 SSG 。\n\n### 基于 SSG\n\n玩转 SSG 也是有考虑过一些开箱即用的 SSG 框架，比如用的人最多的 Hexo，但我本身一直对 Hexo 不太感兴趣，而且似乎满大街随便找一个独立博客都是基于 Hexo 的，模板也千篇一律，缺乏个人特色。\n\n好友小毅 @chawyehsu 安利的 Saber，跑了个 demo 玩了一下，觉得真的蛮不错的，原本打算就直接用 Saber 的，不过目前 Saber 还是以 Vue 2.0 为主（听说下个版本会支持 3.0 ，不过也不知道什么时候会发布），由于内心实在是非常想用 Vue3 ，所以这个方案最终作为备选。\n\n好吧，对 3.0 的执念，还让我想起两个 Vue 官方的作品：VuePress 和它的弟弟 VitePress，他们的新版本都是基于 Vue 3.0，而且已经可以用了，但一直以来我觉得它们都更适合用来写项目文档……\n\n### 最终敲定\n\n期间，Vite 官网在 2.0 Beta 版发布后，也新增了一 Part Server-Side Rendering | Vite 指导如何实现 Vite SSR，我觉得可行。\n\n加上有两个开源项目让我非常感兴趣，一个是 vite-ssr，一个是 vite-ssg，我也分别对他们跑了 demo ，很给力，So，最后决定基于这两个开源项目之一，选择自己搭脚手架……\n\n最终用到的核心技术是：\n\nVite 2.0 —— 超快的构建工具\nVue 3.0 —— 更强大更灵活的 Vue\nSSG —— 服务端渲染方案，利于 SEO 进行内容收录\nPWA —— 构建离线应用\n\n当然还要考虑的事情很多，每个环节还要用到不同的技术栈，具体我在下面逐个环节说明。\n\n## 重构过程分析\n\n下面来说说决定重构之后，整个思考的过程顺序，以及对每一个技术模块的技术栈选型原因分析吧，希望对有计划重构项目的朋友带来一些帮助。\n\n### 构建工具\n\n其实 Vue-CLI 对 Vue 3.0 的支持已经非常好了，我的 Vue 3.0 教程 也是基于 Vue-CLI 写的。\n\n之所以选择 Vite，一方面是它的构建速度真的比 Webpack 要快好多，另一方面是，自从 Vue 3.0 推出以来， Vue 官方团队就一直在投入精力优化和宣传 Vite，尽管 1.0 版本的功能和生态不如人意，但超快的构建速度已经体现了出来。\n\n加上在我准备动手重构的时候官方刚好发布了 2.0 大更新，对比了 1.0 简直是质的飞跃，让我非常感兴趣，而且按照目前官方团队的态度，我觉得后面 Vite 会逐步代替 Vue-CLI ，提前了解，提前踩坑，对以后的工作也有帮助。\n\n而且在生态方面，Vite 2.0 的各种支持都算很完善了，不得不说整个春节期间，Vue 团队的人都在忙着给 Vite 2.0 干活，我在春节提的 Issue，基本上 2 \\~ 3 小时就能给我回应，解决问题速度非常快（大过年的耶！），重构过程感觉自己拥有一个强大的技术支持团队一样!\n\n开荒虽然辛苦，但也有另一番乐趣！\n\n### 服务端渲染\n\n这是在选择合适的构建工具之后，应该考虑的第二件事。\n\n个人博客之前一直选择用 WordPress ，一方面除了有 LNMP 一键部署等快速搭建方案，和各种各样的模板之外，主要也是归功于 WP 对 SEO 的支持也是非常好，我这个博客的日常访问都是来自于搜索引擎。\n\n单纯选择用 Vue 3.0 重新开发 SPA 应用肯定会丢失 SEO，所以才有了前面的 技术栈的选择，本次是通过 SSG 方案来落地服务端渲染。\n\n### 项目架构规划\n\n在开始动手之前，还要对网站架构做一波规划，盲目动手只能给自己挖坑，自己的博客虽然说内容不多，但也有一些东西要考虑：\n\n对外展示的网站结构要保持不变，也就是原来的页面地址要尽量一样，避免用户访问不到原来的内容\n\n对实在不能保持原样的 URL ，或者要废弃的页面，需要做 301 重定向\n\n降低后续更新的构建和部署成本，尽量自动化，减少人工操作\n\n数据需要无缝迁移，不能有丢失\n\n减少服务器压力，把大部分资源消耗放在开源平台上（诸如 Github、jsdelivr CDN 等等）\n\n当然其他的如移动端适配啥的也要看情况顾及，之前博客还有一个小程序版本，不过因为没人看（害，真的整整一年过去了，完全没人看小程序版本…），所以小程序的依赖保留没有在这次的重构兼容考虑范围里，重构完毕后我就直接把原来的服务停了，回头有空了再重新写一版接口给小程序用。\n\n### 模板开发\n\n基于 Vue 3.0 的项目，主要的模板肯定还是 Vue 文件，站点的主要结构、页面的布局、美化等等都是基于  文件，只需要按照原来的习惯，路由页面放在你的  文件夹下，组件模板放置于  下，就可以自动生成路由访问。\n\n同时也加入了  文件的支持，用于书写 Markdown 格式的内容，日常记录博客会更方便，并且像 VuePress 那样，同时支持在 Markdown 里嵌套 Vue，让博客的定制更加灵活。\n\n整个项目的路由页面、组件结构，跟你平时开发 Vue 项目是完全一样的，无缝切换。\n\n在这里推荐几个非常方便的 Vite 插件：\n\nvite-plugin-pages ： 能够自动读取指定目录下的 Vue / Md 文件生成 Vue 路由，只需要管理好 views 文件夹的层级关系，无需再单独维护路由配置 >vite-plugin-md ： 一个能让 Markdown 文件像 Vue 组件一样导入使用的插件，它也基于 markdown-it，支持进行一系列 md 生态扩展 >vite-plugin-components：可以像 VuePress 一样，无需 import，会自动根据组件的标签名去 components 目录下寻找组件\n\n基本上你只需要按照开发 Vue 项目的习惯去开发就可以了，如果有一些思路被卡住不知道怎么下手，可以参考我仓库源码。\n\n### 样式处理器\n\n有设计稿的时候我更喜欢借助 CSS 预处理器（目前常用 Stylus），借助他们的变量 、 嵌套书写，以及 Mixin 、 Extend 等功能，避免写原生 CSS 带来的烦恼。\n\n没有设计稿的时候，会用上 Ant Design 等 UI 框架来帮我减少页面设计上的一些时间浪费，但这些框架通常更适合用在 B 端产品。\n\n去年底在知乎刷到过一篇 如何评价 CSS 框架 TailwindCSS？ ，了解到一款全新的 CSS 框架 Tailwind CSS，乍一看很像是在开历史的倒车，回归原子类 className ，评价也是褒贬不一，自己光看文档的时候也是想着这啥玩意…\n\n但是考虑到如果真的是开倒车，凭什么可以拿到 3 万的 Star，抱着试一下的心态在这次重构里面引入尝试，确实真香！\n\n目前感受到的好处就是：\n\n延续 CSS 的属性命名，你需要什么属性自己放，也就是自己必须有一定的 CSS 基础，特别是在多端适配方面，不用担心框架用久了自己不会写 CSS 的问题\n\n比如，你要实现一个容器内完全居中，手写 CSS 是：\n\n用 Tailwind CSS 的写法是：\n\n写法跟你在 VSCode 里自动补全代码时，敲入的命令非常接近，不像传统的 UI 框架一样，你写个标签就自动生成按钮，都不知道它是怎么写出来的（这也是我比较少想用 UI 框架的原因，我怕久了自己都不会写了），实际上，使用 Tailwind 之后，你还是在自己写 CSS， 只不过更方便了！\n\n支持 CSS tree-shaking ，构建后的文件非常迷你\n\n传统的 Atom CSS ，引入了就得整包引入，而 Tailwind 可以借助 PostCSS ，可以在最终项目构建的时候，抽离出我们用到的样式，用不到的会被直接扔掉。\n\n我自己体验了一下，核心样式文件在配置 Purge 之前构建出来大概有 6M 多，Purge 之后只有 24K ！\n\n可以组合使用，类似于 CSS 预处理器的 Extend\n\n比如，我要写一个通用的图片样式，让图片具备自适配不变型的效果，我只需要借助 @apply 像这样子：\n\n编译出来就是我想要的效果：\n\n支持目前主流的暗黑模式，通过  的前缀就可以轻松定制两款皮肤\n\n点一下切换皮肤：\n\n用了 Tailwind 之后，你几乎可以不用写 Sass / Stylus 了，那么问题来了：如何弥补 CSS 预处理器提供的一些功能？\n\n借助 PostCSS Language 和 CSS Variable，可以轻松的书写像 CSS 预处理一样的嵌套和变量。\n\n独立的文件使用  或者  作为文件后缀，在 Vue 组件里则使用  来指定 PostCSS Language 。\n\n当然，说的再多也不如亲手写一写，我之前在知乎也是看了好久始终不能决定用不用，之前赶业务也没时间，这一次也终于动手体验了一把，后悔，特别后悔，后悔怎么没有早点用！！！\n\n### SEO 优化\n\n虽然前面的 服务端渲染 帮我们解决了空 HTML 文档的问题，但要更好的进行 SEO 优化，还需要落实到具体的页面上去。\n\n比如页面的  、  、  等等，这里我是用到了以下两个工具来帮我实现每个页面的 TKD 定制。\n\ngray-matter：支持对  文件的 TKD 优化，你可以在 Markdown 文件的最前面加入这样的代码，即可实现对页面展示对应的 TKD 信息。\n\n@vueuse/head：可以让你在  文件里实现优化，在 Vue 组件里的  部分，写入以下的代码，就可以实现 TKD 信息的配置。\n\n你还可以扩展更多的信息上去，具体都在各自对应的 Github 仓库的 README 里有详细的说明。\n\n当然，SEO 优化远远不止这一点，包括 robots 、 链接语义化 、减少死链 、 旧地址重定向等等，后面也会有说明。\n\n### 静态资源处理\n\n静态资源指 js 、 css 、 img 这些资源，放自己服务器也不是不好，我之前就是放自己服务器上，没有去改，虽然 WordPress 虽然有配置 CDN 的插件，但是 CDN 平台诸如七牛、又拍云，免费额度只针对 http , 都是需要付费才可以使用 https，总的来说还是要多出一笔钱来处理这块服务，反正自己的博客访问量不大，而且技术博客很少多媒体资源，日常使用的带宽消耗很少，我三年前在阿里云充的 50 块钱，三年过去了到现在还有 45.91 …\n\n不过这次改版就不一样了，后续我可能还会开辟一些图片模块，加上改版后是把项目托管到了 Github ，先天优势存在，那么就要多考虑一下利用 Github 提供的免费服务了！\n\n开发过 NPM 包的同学，或者日常使用 NPM 插件比较细心的同学，应该能够发现发布在 NPM 上的包都自动部署到了 CDN 平台，诸如 jsdelivr 、 unpkg 、cdnjs 等等，那么 Github 和这些 CDN 能关联吗？在此之前其实我也没去关注能不能，但这一次我查了一下，确实可以，而且其中对国内访问速度最友好的 jsdelivr ，支持度最高！超棒的！\n\n关于 jsdelivr 的速度可以参考：国内有哪些靠谱的 Javascript 库 CDN 可用？，也可以测试下我的博客，我自己对测试结果还是挺满意的。\n\n测试我自己网站的速度\n\n所以最后我是把所有静态资源都指向了 jsdelivr CDN ，它无需你自己再做任何部署工作，只需要把代码文件更新到你的 GitHub 仓库里，就会自动同步到 jsdelivr 。\n\n访问格式为在 jsdelivr CDN 官网 有案例说明，更多用法可以查看官网的文档 Features - jsdelivr，为了避免项目源码过大，你可以像我一样单独创建一个类似 assets-storage 这样的仓库用来存储这些静态资源，在仓库的 README 也有简单介绍下如何引用 CDN 地址和清除 CDN 缓存。\n\n回到项目里，只需要在 vite.config.ts 里修改  的路径即可。\n\n详细可以看官网的文档 Configuring Vite | Vite。\n\n当然这种方式如果你用平时的命令行或者老乌龟界面工具来提交文件，始终还是比较麻烦，这里推荐一个现成的图床工具 PicGo ，支持多个平台的 CDN 服务，其中就有 Github 。\n\nPicGo 图床界面\n\n你可以在 Github 仓库上的 Releases 下载最新的客户端版本，只是使用的话，可以单独下载对应系统的安装文件，不需要克隆整个仓库下来自己构建。\n\n### 资源导出\n\n本次的资源导出主要是指原来的那些图片，前面有提到，我之前没有启动 CDN 服务，所以图片资源都还在自己的服务器上。\n\nWordPress 的上传资源都存放在  目录下，阿里云非常方便的就是，你可以连 SFTP 上去把这些文件直接拖下来就可以了。\n\n重新传到 Github 上又非常简单，克隆你的仓库下来后，放到指定的文件夹里，重新提交就可以了。\n\n等未来某一次你不想继续用 Github 托管了，只需要把仓库拉下来，所有文件又都在了，都是非常方便和灵活。\n\n### 爬虫编写\n\n这一部分主要针对原来的文章，虽然我之前的 WordPress 就开启了 Markdown 编辑器支持，但如 SEO 优化 里提到的，缺少很多 TKD 信息配置，而且里面的图片地址也都要更换为 CDN 的路径，所以就算用现成工具去处理 HTML / XML 转 Markdown，都还要去补充这些信息，也比较繁琐。\n\n所以是借助了 Node 编写了个静态爬虫，在爬取过程中对一些内容进行追加、转换。\n\n具体的实现可以参考我之前写的 网站改版迁移经验记录：基于 node 的爬虫编写 ，这里就不重复赘述了。\n\n### 数据统计\n\n既然是 Vue 项目，那么当然支持 Vue 系的统计插件，之前写的两个统计平台插件，都是可以开箱即用的，均已支持 Vue 3.0 的使用。你可以在 main.ts 里了解如何开启流量的统计上报功能，如果你需要记录埋点，也都有 API 可以轻松触发数据的上报。\n\n百度统计：vue-baidu-analytics\n\n友盟统计：vue-cnzz-analytics\n\n### 服务端开发\n\n服务端之前是 WordPress 所依赖的 Nginx + PHP + MySQL ，这一次重构也把服务端直接换了，更换为 Node.JS + Express ，通过 PM2 守护进程来运行在阿里云。\n\n对，这一次没有数据库，第一版暂时不打算做数据库，暂时用不到，目前大部分数据都已经迁移到 Github 仓库了，下个版本功能迭代用到了再考虑弄一下。\n\n我的服务器系统是 CentOS 7，也就是 Linux 系统，关于 Linux 下如何安装 Node ，搜素引擎很多方法，这里也不赘述了，放几个自己用到的关键命令参考吧。\n\n清除缓存然后升级系统和软件\n\n安装 NPM 并通过 stable 安装最新版本的 Node\n\n全局安装 yarn ，没错，我现在更喜欢用 yarn 来进行包管理，这一步你可以跳过\n\n然后是全局安装 pm2，这个是必须要装的，否则我们的终端一关，服务就停了，需要通过 PM2 来守护进程，当然，你也可以用 forever 。\n\n其他的步骤就不用说了，创建服务器的文件夹，初始化，安装 express 或者其他你更熟悉的服务程序，搞起吧！\n\n有几件事要特别叮嘱一下： >1. 因为服务端变了，如果原来有开启 HTTPS，记得重新配置你的 SSL 证书（我用的是阿里云的免费证书，只需要 1 年更换 1 次） >2. 域名也要重新做 301 重定向（HTTP 强切 HTTPS ， WWW 强切无 3W 等） >3. 检查之前是否有在推广的的链接挂掉了，也要重新 301 到新地址 （比如 RSS 源之前是 /feed/ ，现在是 /feed.xml） >4. 最重要的，配置上对路由 history 模式的支持\n\n第一版其实不复杂，后面有需要会继续迭代。\n\n### 自动化部署\n\n代码托管在 GitHub 的好处就是 GitHub Actions 可以帮我们实现 CI / CD，通过配置分支的 push 或者 pull\\_request 等行为来实现自动触发项目的构建打包，并实现一键部署到阿里云服务器。\n\n具体的脚本可以参考我写的 workflow ，里面都提供了注释。\n\nworkflow 里所有以  的格式均为仓库独立配置的密钥变量，在仓库的  >  里添加。\n\n其中一些关键环节说明如下：\n\n&#x20;是指分支行为，我配置了合并分支才会触发，因为平时都是托管在  分支，包括未开发完毕的功能，写一半的文章草稿，只有确认可以发布的代码，才会合并到  进行更新\n\n&#x20;是触发自动打包 / 发布一系列行为的各种操作，从上到下按顺序处理，其中的 ACCESS\\_TOKEN 是 GitHub 的 Token，请来 Personal access tokens 创建，创建后只会显示一次，请保存好，后面涉及到 Token 的地方可以重复使用同一个 Token，请勿泄露！\n\n&#x20;分支是打包完毕后的文件，推送到阿里云服务器的也是这个分支下的所有文件，之所以托管一份在 GitHub，是因为我们前面部署了 CDN 支持，JS / CSS 文件是需要读取这个分支的 CDN 文件\n\n部署到阿里云的环节，配置的  是自己服务器的密钥对，如果你也是跟我一样使用阿里云的 ECS ，可以参考 创建 SSH 密钥对， 创建后还需要绑定给实例才能激活生效，绑定操作请参考 绑定 SSH 密钥对\n\n&#x20;是自己服务器的公网 IP，这个其实可以不用配置为密钥变量，因为  一下你的域名也知道是什么 IP ，只是因为我有两台服务器，所以配置为变量可以方便的通过  和  去切换，其他变量其实也有一个 TEST 版本\n\n最后的  是你在服务器上，node 服务器所安装的目录。\n\n如果其中有什么环节不清楚的，善用搜索引擎，或者到我博客仓库给我提 issue 也可以。\n\n如果你不是托管在 GitHub ，而是别的 Git 平台诸如自建的 Gitlab ，你也可以通过 Jenkins 去配置 CI / CD 的支持。\n\n### 离线应用构建\n\n使用 Vue-CLI 创建新项目的时候，可以了解到有一个选项是关于 PWA 的，关于 PWA 的定义建议直接阅读 渐进式 Web 应用（PWA） | MDN 。\n\nVite 官方团队也对 PWA 做了支持，通过 vite-plugin-pwa 可以方便的实现一个离线应用的配置。\n\n不过目前发现了一个问题就是，当  的  选项设置为 CDN 地址时，构建出来的 PWA manifest 资源路径会读取错误，原因是 manifest 不能走 CDN，要单独从网站内读取，虽然跟作者提了优化建议（详见 #25），不过还需要点时间去优化。 >所以在原版进行版本更新之前，自己先发布了个私有调试包 fix 了这个问题，有遇到一样情况的朋友可以先安装 @chengpeiquan/vite-plugin-pwa 这个去用，不过最好还是留意原版的更新，这个私有包不会长期维护。 >2021-02-22 更新： 目前原版已更新，Fix 了我反馈的问题，请使用 v0.5.3 以后的版本可以避免该问题的产生，给作者点赞！\n\n关于 PWA 的配置可以参考我的项目，这里单独说一下需要特别注意的点：\n\n因为使用了 CDN，所以  和  选项需要显式指定，否则资源会读取出错\n\n基于我上面提到的路径问题，从 v0.5.3 开始，配置 CDN 的同时，也需要显式指定  选项，避免出现 404\n\n其他的选项根据实际需要去处理就可以了。\n\n## 结语\n\n因为网站的设计一向不是我的专长，加上不喜欢花里胡哨的东西，所以这一次重构后的 UI 设计还是基本继承了原来的风格。\n\n但也有一些新的迭代，比如加上了跟随系统的暗黑风格（也可以通过导航右上角进行手动切换），还有首页的变化，对于内容不多的博客来说，挺好的一个 idea，这是来自好友小毅 The Art of Chawye Hsu 和 Vite 开发者 Antfu Anthony Fu 的博客参考。\n\n当然，整个项目的重构，更多的技术支持来自于 Anthony，他也是 Vue 和 Vite 官方团队的开发者，他比我早几天上线的 Rewrite in Vite 给了我很多思路，很多基于 Vite 的插件也是他写的，都是在这几天发布和迭代，有那种瞌睡来了枕头的感觉，美妙！\n\n完整的项目依赖和配置请查看仓库的  package.json  和 vite.config.ts ，整个项目也完全开源了，具体的实现可以查看 Github 仓库 ，在这里就不赘述了，如果觉得对你有用，欢迎 Star 。\n"
  },
  {
    "slug": "refresh-token",
    "title": "基于OAuth2.0的refreshToken前端刷新方案与演示demo",
    "desc": "如今在涉及到用户登录的系统设计里面，基本上都是通过 OAuth 2.0 来设计授权，当你在调用登录接口的时候，可以看到在返回来的数据里面会有 2 个 Token：一个 accessToken 和一个 refreshToken 。为什么会有两个 Token，之间有什么区别？这其实是 OAuth 2.0 的四种方式 之一的 “凭证式”，一个是平时请求接口时的用户凭证，一个是用来刷新用户凭证的刷新凭证。",
    "cover": "https://cdn.chengpeiquan.com/img/2021/01/1.jpg?x-oss-process=image/interlace,1",
    "content": "如今在涉及到用户登录的系统设计里面，基本上都是通过 OAuth 2.0 来设计授权，当你在调用登录接口的时候，可以看到在返回来的数据里面会有 2 个 Token：一个  和一个  。为什么会有两个 Token，之间有什么区别？这其实是 OAuth 2.0 的四种方式 之一的 “凭证式”，一个是平时请求接口时的用户凭证，一个是用来刷新用户凭证的刷新凭证。这也是我最近在业务上涉及到的一处开发需求点，之前的老业务，服务端都没有按照这样的模式去做，单纯的过期就让用户重新登录，所以自己也没有实际去处理过 Token 续期的场景。一波处理下来，刚开始下手觉得有点繁琐，但实现起来还是蛮简单的，过程颇觉有趣，把第一次的开发经验记录起来。## 需求背景通常来说下发的  都有一个比较短暂的有效期，大部分情况下可能只有大半天，短的话更可能只有 2 \\~ 3 小时（对，我处理的这个业务就是……），意味着用户在一天之内可能需要频繁进行重新登录。关于为什么  的有效期要那么短，可以参考 OAuth 2.0 的一个简单解释 。传统的登录都是到期了跳回登录页面，让用户重新走一遍登录流程就可以了，但如今  的超短有效期带来的用户体验是非常糟糕的，为了安全而牺牲用户体验，就是产品和开发打架的常见原因之一。那么有没有办法既保证安全，又能够减少用户重复登录的操作呢？  就是因此产生。它可以用来请求重新颁发一个 ，当请求被告知过期时，通过刷新令牌的方式，用新的令牌来完成之前还没完成的请求，让用户可以不重新登录，达到无感知刷新的目的，直到  也过期了，才需要回去走登录流程。这一篇来讲一讲如何无感知的帮助用户执行  的刷新。## 需求目的搞清楚目的才能好好搞事情哈哈哈，于是拆解了一下需求，分为三个小点：当  过期的时候，在发起下一次请求之前，前端先帮用户主动刷新 Token，拿到新的 Token 完成后续的请求在刷新 Token 成功之前，不允许重复刷新（因为一个页面可能有多个请求），多个未完成的请求需要挂起当  也过期时（也就是刷新失败），停止重复刷新，引导用户重新登录Btw: 后面的 Token 统一都是指  。## 实现思路理清楚需求目的之后，还需要先跟服务端同学约定一下判断规则，先确认我们在前端能够拿到哪些数据，按照上一次对接的业务情况，服务端的登录接口提供了以下三个字段返回：字段含义accessToken请求接口的时候，需要在请求头里带上的 TokenrefreshToken用来请求刷新 Token 的凭证expiresTimeToken 的过期时间其中登录接口和刷新接口是免 Token 验证的，登录接口只需要校验默认的请求头以及账号密码，刷新接口只需要校验刷新凭证。## 实现过程以 Vue + Axios 来搭一个演示项目为例，核心代码相关的文件是这几个：虽然文件比较多，但代码其实不多，习惯把一些可能复用的代码抽离出来独立成模块了。文件作用axios/config.tsaxios 的一些基础配置，可以配置接口路径、超时时间等axios/instance.ts一个 axios 实例，在这里配置了一些全局都会用到的请求拦截、返回拦截axios/index.ts组件里用到的 axios 入口文件，会在这里再添加一些专属业务侧的拦截refreshToken.ts用来刷新 Token 的一些业务代码，返回一个 PromisesetLoginInfoToLocal.ts存储登录信息到本地，在调用登录接口和刷新接口之后需要用到点击查看： libs - refresh-token下面把几个主要文件里面，主要的代码部分讲一下：### config.ts之所以要抽离出 config ，是因为之前遇到一个坑，axios 如果先 create 再 export，那么用到的地方其实都是同一个实例，不同的模块里引用了同一个实例然后还要再做一些拦截，会相互覆盖。所以如果你在其他地方，可能要用到一个干净的新实例的时候，抽离出 config 可以单独 create ，可以减少你重复编写代码的情况。你在这里可以动态指定接口路径、默认的请求头、超时时间等等。完整代码：config.ts - refresh-token官方文档：请求配置 - axios### instance.ts单独封装的 ，是一个 “干净” 的实例，它里面包含的只是全局都会用到的一些请求拦截和返回拦截。请求拦截可以在开始请求之前，添加上一些特殊数据，比如给每个请求头都带上 Token 等等。返回拦截可以拦截掉一些特殊的返回情况，还可以简化接口返回的数据等等。完整代码：instance.ts - refresh-token### index.ts其实和  的性质差不多，本质上也是要在这里做一些拦截，但是不同于  的地方在于，入口文件更多的是侧重于业务侧的拦截。比如前面有说到，登录接口和刷新接口是不需要校验用户凭证的，也就是不必每个接口都需要进行 Token 刷新，那么这些只针对部分业务接口的拦截，就统一放到  这边。我们的刷新操作也是在这里完成的。我们前面说到，在拦截的时候，要做到不允许重复刷新，同时多个未完成的请求需要挂起，所以我们需要定义两个全局变量。前端主动发起刷新的判断标准，就是看本地记录的时间是否到期，所以要先检测本地是否存在时间记录，计算时间差：同时还要检查是否具备主动发起刷新的条件，必须本地存在旧的记录，才会去帮用户刷新。然后因为像刷新请求这个请求不应该触发刷新，所以再获取一下接口的 URL：最后，我们要把刷新操作都放到综合条件里面去，满足所有条件的，才去执行刷新。开始刷新的时候，为了避免重复刷新，只有未刷新时，才会进入刷新流程，同时进入后需要先把状态打开。然后获取新的 Token，拿到新的 Token 之后，再把原来挂起的请求执行掉，在这里记得重置队列，避免队列越来越多，下次刷新时造成无畏的重复请求。配合上一步，我们需要把刷新 Token 成功之前的请求都挂起来，因为  只有当  或者  的时候才会返回结果，所以我们在  里，把请求都先丢到  数组里存起来，就能达到请求挂起的目的。完整代码：index.ts - refresh-token### refreshToken.ts在  里有一个操作是拿到刷新后的 Token：这里其实是一个接口请求操作，就是通过登录时给的  ，去请求刷新凭证的接口签发新的  下来。为了减少代码的回调，方便  采用 ，所以这里需要返回一个 ，当刷新成功时，返回新的 Token 字符串，刷新失败则返回空的字符串。在这里，刷新完毕后，记得同时把新的资料存储到本地去，更新上次登录记录的那些数据，所以我才要把  的操作抽离出来，减少重复代码的编写。完整代码：refreshToken.ts - refresh-token## 项目演示这篇文章对应的仓库就是一个项目源码，这里提供了两种类型的 Mock 接口：### 本地 Express Server推荐用这个方式，可以一边测试效果，一边看代码。先通过  克隆本仓库到本地控制台访问项目，输入  执行依赖安装执行  启动接口服务另外打开一个控制台访问项目，输入  启动项目调试你可以在  文件夹里修改接口的一些返回数据，比如 Token 的有效期（目前默认都是 5s 过期，方便测试），以及 refreshToken 的有效几率（因为无法校验刷新凭证的合法性，所以目前采用的是随机生成一个布尔值，当  的时候表示刷新凭证过期， 则允许继续刷新），等等。这些文件的说明：文件作用index.js服务的启动入口文件createApi.js创建接口的文件，可以把写好的接口导进来生成api 文件夹里面存放的是接口文件，一个文件对应一个接口### 远程 FastMock API原本是采用这个方式的，但是可能受自己网络或者对方服务器影响，有时候响应很慢，试过 30s 超时了还没响应回来，花费过多时间在等待上了，所以才换成了本地 Server 。线上访问：Refresh Token Demo你也可以创建自己的 FastMock 接口，登录官网进行配置后，修改  里的  。点击访问：FastMock 官网点击访问：FastMock 操作文档## 参考资料感谢各位大神总结的相关知识点，收益很多，才有了自己的一番实践和总结，建议大家有兴趣也可以阅读一下！理解 OAuth 2.0OAuth 2.0 的四种方式深入理解 token请求时 token 过期自动刷新 token\n"
  },
  {
    "slug": "vue-cnzz-analytics",
    "title": "vue-cnzz-analytics 基于Vue SPA项目的友盟CNZZ统计插件（支持Vue 3.0）",
    "desc": "一个专为SPA项目开发的友盟统计插件，支持Vue 3.0以及2.0版本同时使用，也可用于VuePress项目，支持在路由切换时，自动上报流量数据等功能。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/08/1-3.jpg?x-oss-process=image/interlace,1",
    "content": "一个只有 3 kB 大小的插件，可以帮你轻松解决 SPA 单页面项目浏览数据不准确的问题，基于 Vue 路由访问轨迹自动向友盟统计平台上报 PV / 事件数据。本插件自 v2.0.0 开始，最新版插件支持在 Vue 3.0 项目下使用，同时兼容 Vue 2.0 项目的使用，具体使用方法请看下方说明以及在线 demo 。对 Vue 3.0 感兴趣，但还在观望的同学，欢迎阅读我踩坑总结的：Vue3.0学习教程与实战案例 （持续更新ing）## 功能异步载入友盟统计脚本，无需修改入口 HTML支持部署多个站点 ID ，并对应进行数据上报（跨部门合作项目，双方均要收集数据时非常有用）支持自动上报路由切换产生的 PV 数据（需引入 Vue Router，支持 hash 模式和 history 模式的地址）支持手动提交 PV 上报支持手动提交事件分析上报自动识别 Vue 版本，自动适配 Vue 2.0 / Vue 3.0 使用（本插件 v2.0.0 版本新增）提供了 Hooks API（本插件 v2.1.0 版本新增，因此 CDN 安装的用法略有调整，请留意使用说明）## 项目理论上只要引入了 Vue （必须） 和 Vue Router （自 v2.2.0 起是可选） 的项目均可以正常使用，包括但不限于以下类型：Vue-CLI 脚手架项目Vite 项目引入 Vue 相关 CDN 的 HTML 页面VuePress 项目也不仅限于 SPA 单页面项目，在 SSG / SSR 项目里也可以使用。## 预览两个在线 demo 均已开启 debug 模式，可开启控制台查看上报情况。Vue 2.0 版本：vue-cnzz-analytics demo for Vue 2.xVue 3.0 版本：vue-cnzz-analytics demo for Vue 3.x## 选项选项是否必填选项类型选项说明router否objectVue Router（自 v2.2.0 版本开始为可选，无路由的单页则不必传该选项）siteIdList是number[]友盟统计的站点 id 列表，只有一个站点需要上报就保留一个 id 即可isDebug否boolean是否开启 debug 模式，默认 ，开启后会在 F12 控制台打印上报信息友情提示：上线前记得关闭 debug 模式。## 安装方式一：通过 NPM 安装方式二：通过 CDN 安装## 启用通过 NPM 安装的项目，需要先在 main.js 里引入插件（通过 CDN 则无需该步骤）。安装插件后，在 main.js 引入以下代码（注意 Vue 2.0 和 Vue 3.0 的用法区别），即可开启自动上报功能，首次访问页面会部署统计代码并提交第一次访问数据上报。后续在路由切换过程中，也会根据路由的切换提交相应的 URL 信息到友盟统计。### 在 Vue 2.0 里使用可参考demo：main.js - Vue 2.0 demo自 v2.1.0 版本开始，如果是通过 CDN 安装，需要使用  去激活插件，通过 NPM 安装的脚手架项目则使用  就可以### 在 Vue 3.0 里使用可参考demo：main.js - Vue 3.0 demo自 v2.1.0 版本开始，如果是通过 CDN 安装，需要使用  去激活插件，通过 NPM 安装的脚手架项目则使用  就可以### 在 VuePress 里使用插件也支持在Vue的静态文档 VuePress 项目里使用。在项目下的  文件夹下，创建一个 ，按照下面的方式引入即可启动数据上报功能。官方文档传送门：应用级别的配置 - VuePress可在开发环境打开 debug 模式了解相关的上报情况（上线前记得关闭 debug ）。## API自 v2.1.0 版本开始，插件支持直接调用的全局 API  和按需导入的钩子 API  两种方式。这两种方式在 Vue 2.0 和 3.0 里均可以使用，只不过按照使用习惯和从 Vue 官方推荐的角度来说，全局 API 更适合 Vue 2.0 项目，钩子 API 更适合 Vue 3.0 项目。插件的 API 不可以直接使用，需要配合 API 里面的 方法 才可以操作到具体功能。### 全局 API在 Vue 2.0 里，只需要通过我们熟悉的  去操作即可：在 Vue 3.0 里，可以按照官方文档的推荐，导入当前实例变量，通过当前实例变量去操作全局方法：也可以导入当前实例里的代理组件去操作：### 钩子 API钩子 API 需要在用到的组件里 import 导入才可以使用。在 Vue 2.0 里，你可以绑定一个钩子变量去使用：在 Vue 3.0 里，就像在使用路由  一样去使用就可以。另外，如果 API 与其他插件冲突的话（比如你同时使用了 vue-baidu-analytics），你可以在导入的时候重命名：## 方法方法需要通过 API 去触发，全局 API 和 钩子 API 支持的方法都是完全一样的。方法功能使用说明手动上报页面 PV点击查看手动上报事件分析点击查看由于目前 Vue 2.0 的使用者还比较多，下面的举例均只用 Vue 2.0 的操作方法进行演示，Vue 3.0 可根据钩子 API 的说明去调用具体的方法。注：如果配置了多个站点 ID ，数据都会同时上报给所有站点。### 手动上报页面 PV如果你有些页面是通过 Tab 切页进行内容渲染切换，但又需要上报访问数据的话，就可以使用这个方法来进行手动上报。方法名称功能说明pv手动执行 PV 数据上报**参数**参数是否必填参数类型参数说明pageUrl否string提交上报的 URL ，必须是以  开头的相对路径，如果不填，则会默认提交为域名根目录fromUrl否string来路页面的url，必须是以  或  开头的绝对地址，如果不填，则统计平台会认为访问来源为直接输入地址**使用示范**### 手动上报事件分析比如你的页面上有个 “换一换” 的功能按钮，想要统计这个按钮的点击情况，就可以通过给按钮绑定上报事件来进行点击情况分析。方法名称功能说明event手动执行事件分析数据上报**参数**参数是否必填参数类型参数说明category是string产生该事件的位置名称，比如 action是string产生该事件的行为描述，比如 label否string产生该事件的标签名称，可以用来记录事件子 id，比如 ，默认为空value否number该事件的分值，默认 0nodeId否string产生该事件的元素id，默认为空**使用示范**## 更新记录点击查看：releases## LicenseMIT License © 2020 chengpeiquan\n"
  },
  {
    "slug": "vue-baidu-analytics",
    "title": "vue-baidu-analytics 基于Vue SPA项目的百度统计插件（支持Vue 3.0）",
    "desc": "一个专为SPA项目开发的百度统计插件，支持Vue 3.0以及2.0版本同时使用，也可用于VuePress项目，支持在路由切换时，自动上报流量数据等功能。",
    "cover": "https://cdn.chengpeiquan.com/img/2019/12/1.jpg?x-oss-process=image/interlace,1",
    "content": "一个只有 3 kB 大小的插件，可以帮你轻松解决 SPA 单页面项目浏览数据不准确的问题，可基于 Vue 路由访问轨迹自动向百度统计平台上报 PV / 事件数据。本插件自 v2.0.0 开始，最新版插件支持在 Vue 3.0 项目下使用，同时兼容 Vue 2.0 项目的使用，具体使用方法请看下方说明以及在线 demo 。对 Vue 3.0 感兴趣，但还在观望的同学，欢迎阅读我踩坑总结的：Vue3.0学习教程与实战案例 （持续更新ing）## 功能异步载入百度统计脚本，无需修改入口 HTML支持部署多个站点 ID ，并对应进行数据上报（跨部门合作项目，双方均要收集数据时非常有用）支持自动上报路由切换产生的 PV 数据（需引入 Vue Router，支持 hash 模式和 history 模式的地址）支持手动提交 PV 上报支持手动提交事件分析上报自动识别 Vue 版本，自动适配 Vue 2.0 / Vue 3.0 使用（本插件 v2.0.0 版本新增）提供了 Hooks API（本插件 v2.1.0 版本新增，因此 CDN 安装的用法略有调整，请留意使用说明）## 项目理论上只要引入了 Vue （必须） 和 Vue Router （自 v2.2.0 起是可选） 的项目均可以正常使用，包括但不限于以下类型：Vue-CLI 脚手架项目Vite 项目引入 Vue 相关 CDN 的 HTML 页面VuePress 项目也不仅限于 SPA 单页面项目，在 SSG / SSR 项目里也可以使用。## 预览两个在线 demo 均已开启 debug 模式，可开启控制台查看上报情况。Vue 2.0 版本：vue-baidu-analytics demo for Vue 2.xVue 3.0 版本：vue-baidu-analytics demo for Vue 3.x## 选项选项是否必填选项类型选项说明router否objectVue Router（自 v2.2.0 版本开始为可选，无路由的单页则不必传该选项）siteIdList是string[]百度统计的站点 id 列表，只有一个站点需要上报就保留一个 id 即可isDebug否boolean是否开启 debug 模式，默认 ，开启后会在 F12 控制台打印上报信息友情提示：上线前记得关闭 debug 模式。## 安装方式一：通过 NPM 安装方式二：通过 CDN 安装## 启用通过 NPM 安装的项目，需要先在 main.js 里引入插件（通过 CDN 则无需该步骤）。安装插件后，在 main.js 引入以下代码（注意 Vue 2.0 和 Vue 3.0 的用法区别），即可开启自动上报功能，首次访问页面会部署统计代码并提交第一次访问数据上报。后续在路由切换过程中，也会根据路由的切换提交相应的 URL 信息到百度统计。### 在 Vue 2.0 里使用可参考demo：main.js - Vue 2.0 demo自 v2.1.0 版本开始，如果是通过 CDN 安装，需要使用  去激活插件，通过 NPM 安装的脚手架项目则使用  就可以### 在 Vue 3.0 里使用可参考demo：main.js - Vue 3.0 demo自 v2.1.0 版本开始，如果是通过 CDN 安装，需要使用  去激活插件，通过 NPM 安装的脚手架项目则使用  就可以### 在 VuePress 里使用插件也支持在Vue的静态文档 VuePress 项目里使用。在项目下的  文件夹下，创建一个 ，按照下面的方式引入即可启动数据上报功能。官方文档传送门：应用级别的配置 - VuePress可在开发环境打开 debug 模式了解相关的上报情况（上线前记得关闭 debug ）。## API自 v2.1.0 版本开始，插件支持直接调用的全局 API  和按需导入的钩子 API  两种方式。这两种方式在 Vue 2.0 和 3.0 里均可以使用，只不过按照使用习惯和从 Vue 官方推荐的角度来说，全局 API 更适合 Vue 2.0 项目，钩子 API 更适合 Vue 3.0 项目。插件的 API 不可以直接使用，需要配合 API 里面的 方法 才可以操作到具体功能。### 全局 API在 Vue 2.0 里，只需要通过我们熟悉的  去操作即可：在 Vue 3.0 里，可以按照官方文档的推荐，导入当前实例变量，通过当前实例变量去操作全局方法：也可以导入当前实例里的代理组件去操作：### 钩子 API钩子 API 需要在用到的组件里 import 导入才可以使用。在 Vue 2.0 里，你可以绑定一个钩子变量去使用：在 Vue 3.0 里，就像在使用路由  一样去使用就可以。另外，如果 API 与其他插件冲突的话（比如你同时使用了 vue-cnzz-analytics），你可以在导入的时候重命名：## 方法方法需要通过 API 去触发，全局 API 和 钩子 API 支持的方法都是完全一样的。方法功能使用说明手动上报页面 PV点击查看手动上报事件分析点击查看由于目前 Vue 2.0 的使用者还比较多，下面的举例均只用 Vue 2.0 的操作方法进行演示，Vue 3.0 可根据钩子 API 的说明去调用具体的方法。注：如果配置了多个站点 ID ，数据都会同时上报给所有站点。### 手动上报页面 PV如果你有些页面是通过 Tab 切页进行内容渲染切换，但又需要上报访问数据的话，就可以使用这个方法来进行手动上报。方法名称功能说明pv手动执行 PV 数据上报**参数**参数是否必填参数类型参数说明pageUrl否string提交上报的 URL ，必须是以  开头的相对路径，如果不填，则会默认提交为域名根目录**使用示范**### 手动上报事件分析比如你的页面上有个 “换一换” 的功能按钮，想要统计这个按钮的点击情况，就可以通过给按钮绑定上报事件来进行点击情况分析。方法名称功能说明event手动执行事件分析数据上报**参数**参数是否必填参数类型参数说明category是string产生该事件的位置名称，比如 action是string产生该事件的行为描述，比如 label否string产生该事件的标签名称，可以用来记录事件子 id，比如 ，默认为空value否number该事件的分值，默认 0**使用示范**## 更新记录点击查看：releases## LicenseMIT License © 2019 chengpeiquan\n"
  },
  {
    "slug": "baidu-map-api-destroy",
    "title": "百度地图API实例销毁方案 可用于Vue单页面项目",
    "desc": "最近项目用到了百度地图的API，用倒是没啥毛病，就是发现用完之后留下来的垃圾太多 = = 项目是基于Vue做的，当时发现在需要百度地图的那个路由用完之后，切去其他页面，积累了很多DOM，并且再次进入会再次创建，在项目里体验越久，DOM树越累赘，并且由百度地图创建的定时器越攒越多。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/12/baidu-map.jpg?x-oss-process=image/interlace,1",
    "content": "最近项目用到了百度地图的 API ，用倒是没啥毛病，就是发现用完之后留下来的垃圾太多 = =\n\n项目是基于 Vue 做的，当时发现在需要百度地图的那个路由用完之后，切去其他页面，积累了很多 DOM，并且再次进入会再次创建，在项目里体验越久，DOM 树越累赘，并且由百度地图创建的定时器越攒越多。\n\n这当然不是什么好事……\n\n在接入的时候就发现了这个问题，查了好久都没有找到销毁的 API ，包括官方贴吧和各种博客都没有找到，打了个 TODO 直到今天才有空优化这个问题。\n\n一开始尝试直接移除创建的 DOM ，但发现会带来另外的问题，控制台一片血海……（很明显是定时器在执行时找不到 DOM 而产生的报错…\n\n根据打印出来的报错日志，可以看到这个报错是百度地图 API 的 JS 文件产生出来的。\n\n通常会产生这种情况的无非就是  和  了，在百度地图 API 的源码里找到了相关的代码  ，确实是一直在监听 DOM 的尺寸变化。\n\n那么解决思路就有了，在移除 DOM 的同时，顺带清除这些定时器。\n\n平时我们清除定时器都是通过  的形式定义定时器，然后再 去清除。\n\n但百度地图的定时器因为封装并且混淆的太深，暂时得不到具体的变量，所以采用了一个全局清除的 Hack 方案来解决该问题。\n\n最终相关的销毁代码如下:\n\nVue 项目我是放到了组件卸载后的生命周期里执行（Vue 2.x 是 ，3.x 是 ）。\n\n在上线这个方案之前有考虑到会不会误伤到其他定时器，但和组里的同学讨论过后，基本上都是有良好的使用习惯，就是创建  之后都有习惯在达成目的后执行销毁，所以按照这个习惯来说，理论上不会带来很大的影响。\n\n如果有更好的解决方案欢迎分享，销毁这一块实在是搜不到什么解决方案，自己也是排查了半天，不知道为什么官方就不能出一个销毁的 API 直接调。\n"
  },
  {
    "slug": "group-buy-calculator",
    "title": "外卖拼单计算器：自动帮你计算合伙点外卖应该支付多少钱",
    "desc": "目前除了美团之外，其他的外卖app（像饿了么啊、瑞幸啊、麦当劳肯德基啊）都没提供自动计算账单的功能，自己每次拉excel算的蛋疼，所以写了这个，无需纠结红包、抵扣券等乱七八糟的减免，会自动计算折扣比例来得到最终账单。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/12/2-1.jpg?x-oss-process=image/interlace,1",
    "content": "目前除了美团之外，其他的外卖 app（像饿了么啊、瑞幸啊、麦当劳肯德基啊）都没提供自动计算账单的功能，自己每次拉 excel 算的蛋疼，所以写了这个。\n\n## 在线体验\n\n无需纠结红包、抵扣券等乱七八糟的减免，会自动计算折扣比例来得到最终账单。\n\n点击使用：外卖拼单计算器\n\n## 界面预览\n"
  },
  {
    "slug": "vue-picture-cropper",
    "title": "Vue 3.0图片裁切插件：vue-picture-cropper",
    "desc": "开始玩Vue 3.0之后发现生态上要啥没啥，所以自己弄了一个，基于cropper.js，支持Vue 3.0的图片裁切工具组件，支持在Vue组件里按需引入，模板和实例也仅限在组件内使用，根据Vue 3.x的设计思想，官方也不推荐全局导入各类插件。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/12/1.jpg?x-oss-process=image/interlace,1",
    "content": "一个基于 cropper.js ，支持 Vue 3.0 的图片裁切工具组件（目前仅支持 Vue 3.x ）。对 Vue 3.0 还不熟悉的同学，可以查阅我之前总结的文档 《Vue3.0学习教程与实战案例》GitHub： https\\://github.com/chengpeiquan/vue-picture-cropperNPM： https\\://www\\.npmjs.com/package/vue-picture-cropper## demo根据平时常见的使用习惯，弄了一个简单的在线 DEMO ，点击按钮选择图片后，弹出裁切框，裁切后生成裁切结果。点击查看：vue-picture-cropper-demovue-picture-cropper-demo## 安装## 导入目前仅支持在 Vue 组件里按需引入，模板和实例也仅限在组件内使用，根据 Vue 3.x 的设计思想，官方也不推荐全局导入各类插件。需要注意的是，如果是基于 Vite 的项目，由于 Vite 需要使用 ESM 组件，所以导入方式需要改成从  版本导入：导入的模块说明：模块名称作用VuePictureCropper组件的模板，用于挂载和渲染，可自定义命名cropper工具实例，可用于操作相关的api，必须用花括号导入该名称对 Vue 3.x 还不熟悉的同学，请看下方的用法示范。## 用法工具的渲染方法如下，请注意在 Vue 3.x 里，除非你使用 class 风格来编写组件，否则组件都需要通过  来定义。上面是设定了一个裁剪区域，对于文件的选择/传入，以及裁切结果，请通过  或  绑定实例的api来获取。可参考 DEMO 里面的用法：Vue 3.0 组合式 API 写法Vue 2.0 选项式 API 写法## Props简单的说明如下，可参考上方的用法示范自行调整。props类型作用备注boxStyleobject定义裁剪区域的样式，也就是包裹cropper的父级元素样式imgstring要用来裁切的图片地址optionsobject一些cropper的设定参数，完整可参考 options - cropperjseventsfunction一些cropper的回调函数，完整可参考 events - cropperjspresetModeobject预设模式，可以开箱即用的预设效果 版本才开始支持，详见下方的 预设模式 部分文档btw: 远程图片会涉及到跨域问题，要服务端进行配合调整，请尽量使用本地图片来避免一些奇怪的问题出现。## 常用选项属性类型说明viewModenumber可以决定裁切框的活动范围，可选 0、1、2、3，建议选 1 （裁切框只能在图片区域内活动）aspectRationumber可以指定裁剪框的宽高比，不设置则为自由变化（建议按照裁切结果的尺寸设置对应的比例）previewelement/string图片预览的容器，一个 DOM 元素。必须可以被 document.querySelectorAll 获取到## 常用方法可通过  实例来调取插件的各种 API （也就是在 import 的时候花括号里的那个实例）。方法名功能说明用法示范备注getDataURL获取裁切后的base64结果，可用于本地预览展示const dataURL = cropper.getDataURL()getBlob获取裁切后的 blob 结果，可用于传给服务端const blob = cropper.getBlob()getFile获取裁切后的 file 结果，可用于传给服务端const file = cropper.getFile() 版本开始才支持该方法clear清除裁切框cropper.clear()reset重置默认的裁切区域cropper.reset()**需要注意的是** 是同步方法，可以直接拿到结果。但  和  自  版本开始是异步方法！！！需配合  或  等方式来获取结果。三者均属于插件自带的方法，生成的文件格式都是基于源图片的格式，仅支持处理本地图片，不支持远程图片。其中均可传入选项来控制获取到的结果变化：属性类型说明默认值widthnumber设置裁切结果的宽度原图所截区域的大小heightnumber设置裁切结果的高度原图所截区域的大小minWidthnumber设置裁切结果的最小宽度0minHeightnumber设置裁切结果的最小高度0maxWidthnumber设置裁切结果的最大宽度无上限maxHeightnumber设置裁切结果的最大高度无上限fillColorstring设置裁剪结果的背景色，比如你想改变png透明区域的颜色transparentimageSmoothingEnabledboolean是否让裁剪后的图片显得平滑trueimageSmoothingQualitystring图片平滑质量，可选low、medium、highlowfileNamestring文件名，目前只有  会用到该参数，可不传cropped-当前时间戳.原文件后缀用法示范：如果是要获取 blob 和 file ，请记得用异步方法：具体在项目工程里的使用可以参考文档前面附的 DEMO 源码。如果需要转换格式或者处理远程图片，请使用 getCroppedCanvas （需注意：这个方法存在部分异步操作，请留意用法说明）## 预设模式这里提供了一些常用的预设模式，方便在日常的业务场景里快速使用。通过  来指定启用哪个预设模式。属性类型说明modestringfixedSize=固定尺寸模式，round=圆形模式widthnumber裁切区的宽度，需要大于0heightnumber裁切区的高度，需要大于0### 注意事项： 只提供了一些简化的配置，比如你要获取圆形头像，就无需自己去处理很多额外的东西，但是一些该传入的  ，还是需要在  指定，请留意对应的示范代码目前使用  的情况下， “裁切区域” 和 “裁切结果” 都是一样大的，也就是说，这里指定的  和 ，会覆盖  等获取结果 API 传入的  和  。在指定  和  的时候，请留意宽高比例是否与  一致，如果不一致可能得不到你想要的结果 只接收文档里提及到的值，传入其他将不起作用### 固定尺寸模式可用固定裁切区域的大小，并且获得和裁切区域一样大的裁切结果（这种情况下你可以禁止用户修改裁切区域大小）。在线 DEMO ：fixedSize - vue-picture-cropper-demoDEMO 源码：fixedSize.vue - vue-picture-cropper-demo使用方法：将  的  指定为 将  的  和  指定为想要的尺寸将  的  设置为  可以防止裁剪框被取消将  的  设置为  可以关闭裁剪区的大小调整功能将  的  比例指定为  的比例### 圆形模式如果你在用户头像等地方，需要裁切为圆形图片，可以使用该模式来帮助你获得一个圆形的 png 图。它也是固定裁切区域的大小，并且获得和裁切区域一样大的裁切结果（这种情况下你可以禁止用户修改裁切区域大小）。这个情况下，裁切结果固定是  图片（否则似乎没有什么裁圆形的意义…）。在线 DEMO ：round - vue-picture-cropper-demoDEMO 源码：round.vue - vue-picture-cropper-demo使用方法：将  的  指定为 将  的  和  指定为想要的尺寸，两个值需要一样将  的  设置为  可以防止裁剪框被取消将  的  设置为  可以关闭裁剪区的大小调整功能将  的  比例指定为 ## 其他说明因为本插件是对做了一层组件化的实现，所以本组件也同步了 cropperjs 的所有 API ，均可通过  来使用原来的 API 。如果你需要更多高级功能，可以戳原文档参考使用 events - cropperjs\n"
  },
  {
    "slug": "vue3",
    "title": "资料专题：Vue3.0学习教程与实战案例",
    "desc": "自从海贼王更新后，就开始正式用 `Vue 3.0` + `typescript` 写业务了，在经过这段时间的尝试，发现从测试到正式版本变化还是很大，很多过往的博文已经对不上了，还是踩了不少坑，这个过程也打了不少笔记，整理起来，供需要的朋友避坑，也免得以后自己忘记了。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/10/vue3.jpg?x-oss-process=image/interlace,1",
    "content": "这是一个关于 Vue 3.0 + TypeScript 的起步学习教程，适合完全的 Vue 新手和 Vue 2.0 的老手，在官方文档的基础上融入自己的一些实践经验。\n\nVue3入门指南与实战案例\n\n## 文档地址\n\n点击阅读：https\\://vue3.chengpeiquan.com/\n\n## 编写原因\n\n之前呢，因为 Vue 3.0 一直是测试版本，担心坑太多，只是简单跑了一下 demo 大概做了一下了解，但一直还在保守观望，没有敢用在公司的业务项目上。\n\n自从 9 月中旬海贼王版本（v3.0.0 One Piece）更新后，觉得是时候正式用一下 3.0 了，刚好手里有一个工期不是很紧的项目，就开始尝试正式用  +  写业务了，毕竟熟悉一个东西最快的方法，就是一边 reading 一边 coding。\n\n在经过这段时间的尝试，发现从测试到正式版本变化还是很大，很多过往的博文已经对不上了，还是踩了不少坑，这个过程也打了不少笔记，整理起来，免得以后自己遇到问题忘记怎么处理，也可以供需要的朋友查阅。\n\n## 疑惑解答\n\n这是我第一次写此类文章，如果有什么我没说清楚，或者有误的，辛苦帮忙提出来，文章最后都添加了评论功能，关联到仓库的 issue，直接提交评论或者到仓库里提 issue / discussions 都可以。\n\n如果觉得对你有帮助，欢迎到仓库给个 Star 鼓励。\n"
  },
  {
    "slug": "vue-vscode-snippets",
    "title": "解决vscode保存vue文件时 压缩stylus代码为一行以及无法注释template的问题",
    "desc": "目前除了美团之外，其他的外卖app（像饿了么啊、瑞幸啊、麦当劳肯德基啊）都没提供自动计算账单的功能，自己每次拉excel算的蛋疼，所以写了这个，无需纠结红包、抵扣券等乱七八糟的减免，会自动计算折扣比例来得到最终账单。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/09/vue-vscode-snippets.jpg?x-oss-process=image/interlace,1",
    "content": "这篇博客主要解决使用 vscode 在编辑 vue 文件时，遇到的两个困扰了一段时间的问题：\n\n1、如果在 vue 文件里使用了 stylus 预处理器，在保存的时候会被压缩为一行\n\n2、在 template 里按 ctrl+/的时候，会用 js 注释语法来注释 html，导致注释失败\n\n## 解决 stylus 被压缩的问题\n\n最近有好长一段时间都出现了一个诡异的情况，我保存 vue 文件的时候，stylus 写的好好的，就像下面这样：\n\n然后当我按下 Ctrl+S，老是变成这样一行……还能不能玩了？？\n\n然后 less/sass 都不会，唯独 stylus 出现了，我又比较喜欢 stylus，无需花括号，无需冒号，无需分号的简洁…\n\n于是各种重装 stylus 相关插件，然而并没有一丝丝改善，搜来搜去也没什么解决办法。\n\n然后我一度很想换回 sublime，换回了 2 天又觉得有点舍不得 vscode，于是又把 vscode 的插件一个个全部关掉再开启尝试……\n\n直到……我发现了这篇同病相怜的文章…\n\n解决 vscode 中保存后 html 自动格式化的问题\nhttps\\://www\\.jianshu.com/p/01d916ab6811\n\nemmm，发现原来居然是因为 vue 3.0 的  插件引起的 = =\n\n然后我把设置里面的 format 关闭了，好了…\n\n终于告别噩梦…你知道我这段时间是怎么过来的吗？\n\n为了赶项目，然后不得不单独写一个 styl 文件，去 import 到 Vue 里，复杂项目这样玩起来好恶心 = = 总算解脱了！\n\n因为一开始针对 stylus 去搜问题，实在搜不到解决办法，记录一下，方便后面遇到一样情况的同学！！！！\n\n然后还没完，因为发现了这个  引起的问题，就顺便捣鼓一下，看看有没有别的替代拼，顺手解决了下面的这个问题。\n\n## 解决 template 无法正常注释的问题\n\n就是按  会生成这样的注释：\n\n网上很多方法说把 vue 的默认关联方式改成 html（具体操作就不说了，搜出来几乎全是这个答案…\n\n为什么不想用这个 html 文件关联的方法呢，因为不支持写 stylus，所以还是特么要单独写一个 styl 文件再 import 进去…还是烦 - -\n\n然后今天在解决第一个问题的时候，因为发现是 snippets 插件引起的，于是重新找了一下替代品，发现有个插件还蛮好用的：\n\nvue-vscode-snippets\nhttps\\://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets\n\n尝试安装了一下，顺手禁掉了之前的 ，注释的问题完美解决。\n\n当然，上面 stylus 被压缩的问题也完美解决，暂时先用这个了！\n\n希望不要有其他的坑哈哈哈哈哈。\n"
  },
  {
    "slug": "getboundingclientrect",
    "title": "使用getBoundingClientRect 针对scrollTop一直为0且documentElement无效的解决方案",
    "desc": "今天在上线一个移动端需求的时候，QA妹子跟我反馈在她们一部iPhone X上面出现了一个滚动加载会同时触发下拉刷新的bug…我就 ？？？……一个在顶部一个在底部这也能扯上关系？然后再进一步测试，发现这个坑是出现在自家app的内置webview上，在浏览器和微信等环境都正常。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/09/3.jpg?x-oss-process=image/interlace,1",
    "content": "今天在上线一个移动端需求的时候，QA 妹子跟我反馈在她们一部 iPhone X 上面出现了一个滚动加载会同时触发下拉刷新的 bug…\n\n我就 ？？？……一个在顶部一个在底部这也能扯上关系？\n\n然后再进一步测试，发现这个坑是出现在自家 app 的内置 webview 上，在浏览器和微信等环境都正常。\n\n## debug 过程\n\n幸亏这 2 个功能都是自己手写的，没引入其他插件，所以定位原因还是比较容易，因为两个功能都涉及到一个关键的数据就是 ，于是引入 vConsole，打印不断变化的 scrollTop 到控制台，结果，其他设备都能正常获取到 scrollTop，唯独这部机子一直是 0…\n\n查阅自己对 scrollTop 的定义，也是比较主流的一个方案了，原来的代码：\n\n是不是很诡异？然而搜索来搜索去就没遇到一样的情况，针对 scrollTop 一直为 0 的，全是千篇一律的这个解决方案…想打死这些只会复制粘贴的人……\n\n所幸天无绝人之路，突然想起我去年写过一篇 JS 做返回顶部按钮的博文，里面用到了一个 api&#x20;\n\n原生 JS 实现带动画的返回顶部按钮\nhttps\\://chengpeiquan.com/article/js-go-to-top.html\n\n这个 api 的作用是，获取元素的 top/right/bottom/left/x/y/width/height 信息，引用 MDN 的一张图可以直观了解：\n\nElement.getBoundingClientRect() - Web API 接口参考 | MDN\nhttps\\://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\n\n## 调试过程\n\n虽然这个 api 平时用的少，但是像这样平时没事记记笔记，关键时刻还是很靠得住的，用法很简单，给你需要监听的 dom 绑定这个 api，即可获取它的各项信息，比如：\n\n获取到的属性类似如下：\n\n可以看到，这里面获取到的  和  的绝对值，就是我们需要的  数据。\n\n在那部坑爹的测试机上跑了一下，很完美的获取到了数据！！！\n\n毕竟是一个传说中从 IE5 时代就存在的 api，兼容性果然棒！\n\n于是，就是它了！！！\n\n## 解决方案\n\n由于 caniuse 和 mdn 上都说，  的兼容性还不是特别好，所以最后采用了  属性来作为需要的数据，修改一下 scrollTop 的定义如下：\n\n也就是在最后面增加了 ，具体的元素根据实际的业务需求来，可以是 body 也可以是其他元素。\n\n这个方案真的特别美好，其他的业务代码完全不需要修改，QA 妹子测试通过，我俩都可以准时下班回家！！！（各回各家…\n"
  },
  {
    "slug": "rollupjs",
    "title": "JSSDK开发思路 基于RollupJS的经验记录",
    "desc": "虽然Rollup的推出时间应该是比Webpack早，但之前类库的工作都是公司其他前端部门负责维护，还真的没有去接触过它，直到最近自己要负责开发一个用于新业务线的JSBridge和JSLibrary，才对它有了一定的了解。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/08/1.jpg?x-oss-process=image/interlace,1",
    "content": "虽然 Rollup 的推出时间应该是比 Webpack 早，但之前类库的工作都是公司其他前端部门负责维护，还真的没有去接触过它，直到最近自己要负责开发一个用于新业务线的 JSBridge 和 JSLibrary，才对它有了一定的了解。起步还是建议先阅读一遍官网的介绍，以便对它有一个基本的了解。RollupJS 官网 https\\://www\\.rollupjs.com/但是官网的资料很多有坑（因为版本更新然后没有人更新官网资料导致……），所以如果全部按官网的指导走，是走不下去的，一堆问题。最明显的一个就是 babel，官网说明默认是 babel6，但如果直接从 npm 执行安装，默认安装 babel 则是 7+，配置起来完全不是一个世界的东西……包括搜到的很多博文也都是过期状态，无法参考，所以决定写个分享来汇总下这次遇到的问题和一些可复用的配置。注：以下大部分操作都是依赖于命令行操作，Windows 你可以用你熟悉的  或者  或者我熟悉的  ，macOS 可以用终端等等。## 创建项目Rollup 只是个工具，不是脚手架，所以没有自己的创建命令，需要走传统的项目生成方法去创建。## 初始化项目执行  命令，根据你的实际情况录入后回车，生成 package.json 文件。期间建议把入口文件设置为  ，因为实际项目会有很多个分文件，包括你自己编写的 lib 文件、config 文件等等，统一放到 src 下面进行归类管理。然后打开 package，修改里面的 script 字段为：至于为什么修改这个，放在后面说。## 安装依赖帮你合并一条命令一键安装，也可以一个个装，不过最终是都要装的。以上的包都属于最基础的依赖，建议全部安装，各个包的说明如下：基础包名作用用途补充说明rollupRollup 的核心包@rollup/plugin-node-resolveRollup 插件包，帮助 Rollup 识别 node_modules 的包@rollup/plugin-babelRollup 插件包，自动化解决 babel 的转换问题你可以更爽的写 ES6 以上的新语法…@rollup/plugin-commonjsRollup 插件包，可将 CommonJS 模块转换为 ES6大部分 npm 包都是 CommonJS，比如常用的 axios/qs 库，如果你项目里用到了他们，不引入这个插件的话会构建失败@rollup/plugin-jsonRollup 插件包，可将.json 文件转换为 ES6 模块比如：作为类库当然要涉及到版本更新，版本号肯定不能各种地方都手写，这种情况下就可以从 package.json 读取@rollup/plugin-aliasRollup 插件包，配置路径别名alias 的作用大家都懂，开发环境必备rollup-plugin-terserRollup 插件包，混淆压缩 js 代码打包发布必备rollup-plugin-bannerRollup 插件包，给打包后的文件添加注释一般可以添加开发者信息、版本号等信息@babel/core@rollup/plugin-babel 的依赖包，该插件基于 babel7@babel/plugin-proposal-class-properties@rollup/plugin-babel 的依赖包，该插件基于 babel7@babel/preset-env@rollup/plugin-babel 的依赖包，该插件基于 babel7## 配置文件上面提到修改了  的  字段，修改的含义是告知 node 在执行 build 命令的时候，通过 rollup 命令去运行一个叫  的配置文件（-c 是--config 的缩写）。这个文件就是配置文件了，对工程化开发比较熟悉的同学都知道，webpack 对应有 ，Vue-CLI 对应有 ，rollup 的这个配置文件功能也是如此，通过维护一份简单的配置，来实现我们个性化的打包目的。最基本的  的内容如下：这份配置的功能是，在执行了  之后，会在  文件夹里，生成一个 “版本号” 文件夹，版本号文件夹下是一个被压缩混淆了的版本。同时在  的 js 文件夹下，会生成一个没有混淆的版本用于 demo 的开发调试。几个核心的配置选项说明：字段作用input入口文件output出口文件，一个数组，支持打包多个版本（通常是一个完整版开发，一个混淆压缩上线）output.file出口的文件名，需要包含到文件夹里就把路径也写上，我里面的 process.env.npm_package_version 是以版本号为文件夹归类发布output.format输出格式：amd=异步模块、cjs=CommonJS、es=ES 模块文件、iife=自动执行、umd=通用模块（包含 amd/cjs/iife 为一体）output.name暴露的全局变量，可以通过 window.xxx 来访问你的类库，类似 window.jQuery 的作用output.plugins打包插件，目前我只配置了一个 terser 用于打包一个压缩版本发布完整的配置选项可以查阅官网资料：大选项列表 - Rollup.js https\\://www\\.rollupjs.com/guide/big-list-of-options/#%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BDcore-functionality## 编译打包开发阶段你可以根据自己的习惯使用各种 npm 包、自己写的  文件等等，但是最终都需要在  导出一个变量：这样使用的人就可以在引入你打包好的文件之后，通过这个变量去使用你的类库里的方法，觉得有点绕？看看最后的例子。## 关于 Babel因为开发阶段会使用大量的 ES6 等浏览器还不完全兼容的新特性，或者引入一些第三方库，比如 axios 之类的，对于低版本 IE 还不太友好，这些情况下都需要进行 Babel 转换。我目前是用的这份配置，命名为  保存到项目根目录下。## 举个例子我在  编写一个简单的函数，通过预设好的  变量名打包导出。dist 文件夹是最终要发版的混淆压缩版，每个版本都有独立的归类；demo 文件夹是用于开发调试的，这里的是未混淆的版本。切到 demo 这边，引入打包好的文件，即可通过  来获取类库的能力。觉得 demo 这个变量没什么逼格？换成$试试……微信的 JSSDK 也是类似的用法  、 等等，其实大同小异，并没有那么神秘……你可以参考 jQuery 的各种方法去玩玩，配合现在 ES6 的各种模块化，相信很快能上手！\n"
  },
  {
    "slug": "my-netease",
    "title": "记录一下在网易五年来的工作与生活",
    "desc": "虽然加班很多，但回顾起来，工作内外还是很快乐的！",
    "cover": "https://cdn.chengpeiquan.com/img/2021/05/20210509201311.jpg?x-oss-process=image/interlace,1",
    "content": "从 2015 年 6 月 1 日入职，到这个月刚好五周年，虽然加班很多，但回顾起来，工作内外还是很快乐的！\n\n最喜欢的还是这个 loading 了，看着自己从真实慢慢过渡到形象，别有感慨！！！感谢在罗马帮我拍照的美术妹子，最喜欢这张照片了，当然还有之前帮我画这个形象照的妹子\\~\n\nloading\n\n话不多说，扫码看咯\\~\n\n扫码预览\n\n手机可以戳 这里 直接看。\n"
  },
  {
    "slug": "vue-cli-config-alias-error",
    "title": "记录vue.config设置alias无法生效的一次问题排查",
    "desc": "昨晚把Node和Vue-CLI等工具都升级到了最新版，create了一个新项目，因为之前干活的时候为了方便都是拷贝之前的配置文件下来，很多东西都是基于旧版的解构，所以想针对新版本也处理一份配置，于是只拿了vue.config.js来到新项目这边。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/05/4.jpg?x-oss-process=image/interlace,1",
    "content": "昨晚把 Node 和 Vue-CLI 等工具都升级到了最新版，create 了一个新项目，因为之前干活的时候为了方便都是拷贝之前的配置文件下来，很多东西都是基于旧版的解构，所以想针对新版本也处理一份配置，于是只拿了 vue.config.js 来到新项目这边。\n\n基本都没什么问题，直到我在 main.js 准备引入一个常用的配置文件的时候，控制台报错了！\n\n出现这个提示还是蛮明显的，因为是我设置的一个别名，对应的路径是，同理的还有一堆别名用于快捷使用。\n\n因为这个提示的原因，陷入了持续很久的排查为什么 alias 不生效的过程，然而根据各种文档和博客，我的配置并没有问题。\n\n后来昨晚一看时间已经凌晨 2 点了，决定睡觉。\n\n今天早上起来，决定再次从配置文件入手，采用类似二分法的方式进行配置故障排查。\n\n先注释掉一半的配置，发现可以成功运行！！！！\n\n那么问题就出在这注释掉的前半部分了！！！！\n\n于是类似的方法排查完，你猜怎么着？？？是因为我这个 config 配置了 css 插件，但这次忘记安装了！（日常多处理 H5 需求，所以默认都带上了这个配置，平时需求目的很明显所以记得装，这次因为在调试，当时没想起来）。\n\n把 css 的插件安装完，就一切正常了。\n\n至于为什么会出现这个原因，因为 vue.config.js 本质也是个 js 文件，js 的运行就是从上到下，所以写在 chainWebpack 前面的 css.loaderOptions 出现报错后，脚本就会卡在这里不会执行后面的代码了，从而导致 alias 不生效。\n\n虽然原因弄明白了，但是还是很奇怪报错的问题，因为 css 这里 require 这个插件，但是找不到，它又不会直接报错这里，却报了因为无法生成 alias 导致无法使用别名的错误提示，导致我一直在排查 alias 的问题。\n\n先记录下来，以后遇到类似的坑，要学会多从旁边可能引起的原因一起查，不要老盯着控制台提示去看。\n"
  },
  {
    "slug": "canvas-movie-jitter-effect",
    "title": "电影故障抖动视觉效果实现：对大话手游愚人节专题的探究",
    "desc": "前几天愚人节的时候，大话手游官网上了一个专题，里面很多图片位置都使用了一个类似电影那种画面抖动的效果（目前只剩下一个slogan了，其他都下线了），很好奇是怎么实现的，于是扒了一下页面的源码，了解了一些实现思路，整理一下以后可能会用到。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/04/1.jpg?x-oss-process=image/interlace,1",
    "content": "前几天愚人节的时候，大话手游官网上了一个专题（专题地址），里面很多图片位置都使用了一个类似电影那种画面抖动的效果（目前只剩下一个 slogan 了，其他都下线了），很好奇是怎么实现的，于是扒了一下页面的源码，了解了一些实现思路，整理一下以后可能会用到。\n\n## 效果\n\n## 起因\n\n其实这个需求如果是直接给你做，你能不能马上有思路去做出来呢？相信大部分人都会有，那我为啥还要去看他们怎么实现的呢？\n\n想做这件事的原因，主要是：\n\n1、想知道对方是怎么实现的，那个抖动的特效，是有素材还是直接前端处理出来的，是不是在自己的预料之中。\n\n2、自己虽然能马上想到一些实现方案，但还是想看看是否有更优秀的解决办法，可以偷师学习！\n\n3、看看这个效果的素材是怎么处理的，以后遇到类似的需求，我是不是可以把一些锅甩给设计师？\n\n## 思路\n\n在看它是怎么实现之前，先凭经验猜测了一下，有多少种可能实现的方式：gif 动图、视频、flash、逐帧动画、图片切换、背景图切换、svg、canvas…（前端牛逼啊！！！！）\n\n当然每种方法的实现成本不一样，对应的体验和性能也不一样，思路有了，那么来验证一下官网是怎么做的。\n\n## 探路\n\n我开始以为是用的视频，因为按网易游戏以往的尿性来说，营销页面上的动态类主视觉基本都是用视频来实现的…那么要怎么看实现方法呢？当然是看 DOM 啊！\n\n所以，用的是 canvas，那就有趣了！还好不是视频，直接弄个视频引入的话也就没这篇文章什么事了…\n\ncanvas 的动画效果，都是一帧一帧的定时走出来的，这说明素材是来自设计师之手，不一定是前端直接处理的。\n\n接下来就找素材了，这种效果的素材，基本上都是图片，找图片的过程就比较简单了，作为主视觉上这么大的 slogan，结合刚刚查看 DOM 的时候，你发现那个地方的 className 就叫 slogan，那么对应的素材命名，肯定也跟 slogan 有关，单刀直入切到 img，搜索 slogan 关键词，全都出来了。\n\n可以看出他们是把整个动画过程的每一帧，都处理了一张图片素材，我们先把素材弄下来。\n\n一共有 30 帧，30 张一样尺寸的素材，现在素材有了，接下来就可以开始尝试效果复原。\n\n## 实现\n\n实现方案我上面说了，那就一个方案一个方案来看怎么实现，完整的在线 demo 在文末有地址。\n\n方案根据推荐度从低到高说起吧，实现难度基本上也是从低到高这样…\n\n### 方案一：使用 gif 动图\n\n先从最容易想到的方案说起吧，动图从制作成本来说是最省事的…只需要一个 img 标签就可以导进来了。\n\n【推荐】★★★☆☆\n\n【优点】简单，直接导个 gif 引入就完事，纯 html。\n\n【弊端】一般来说动图都会比较大，像 demo 里面只有一个 slogan 动图都去到了 866KB，太多的 gif 对页面的渲染速度有影响，用户体验不是最佳。\n\n### 方案二：切换图片地址\n\n结合我们的素材，已经是处理好一帧一帧这样的过渡状态，那通过定时切换的效果，把他们按指定的时间和顺序切下去，也可以达到想要的效果。\n\n【推荐】★★☆☆☆\n\n【优点】简单，批量导出每一帧的 png 素材出来，定时替换图片的地址就完事（而且每一帧的素材都不会很大）。\n\n【弊端】需要频繁的操作 DOM，性能方面开销太大。\n\n### 方案三：使用定时器切换背景图\n\n【推荐】★★☆☆☆\n\n和方法二比较类似，只不过方法二是切换图片的 src，这里是切换 div 的样式，来达到换背景图的效果，优缺点说起来差不多。\n\n### 方案四：使用 css3 逐帧动画\n\n这个办法我是比较推荐的，实现成本并不高，写起来也很简单，体验又好。\n\n【推荐】★★★★☆\n\n【优点】简单，性能好，生成雪碧图，然后写个动画就完事。\n\n【弊端】部分古董设备不兼容，然后还有个问题，就是像 demo 里的这个素材，做成雪碧图贼他妈大（2.24MB，经过 tinypin 压缩后还是有 640KB），所以素材太大的情况下，最好不要用这个办法来搞。\n\n实现思路：\n\n1、把所有的帧素材都合并为一张雪碧图，减少 http 请求，通过 animation 的背景图移动来实现视觉上的切换。\n\n2、这里运用到了 css3 的 animation-timing-function 的 steps，减少动画过程的代码编写\n\n3、结合第 2 点，因为 steps(number, position)的两个参数，第一个参数是设定有多少帧，第二个参数是设置动画的连续方式，所以根据 steps 的特性，我们生成的雪碧图需要无间隔并且连贯（我生成的就是从上到下排序下来的）\n\n这里推荐一个在线工具：快速生成雪碧图\n\n还有关于里面的 steps 的用法，可以参考张老师的文章：CSS3 animation 属性中的 steps 功能符深入介绍\n\n\n### 方案五：使用 canvas 逐帧绘制\n\n终于来到一开头提到的 canvas 实现方案了。大话官网专题，我看了一下源代码，虽然代码被混淆，但还是可以看出，应该是通过引入插件来实现的。\n\n我们自己写其实也不难，因为知道了本身的实现套路（有逐帧素材，然后通过逐帧逐帧去绘制渲染出来），那就可以着手编写代码了。\n\n【推荐】★★★★★\n\n【优点】canvas 在性能上有天然的优势，对于高频率的更新渲染，用 canvas 重绘来实现效果更佳。\n\n【弊端】古董机对 canvas 的兼容性不太友好，如果可以抛弃这些古董用户的话，还是推荐这个方案！\n\n实现思路：\n\n1、动态创建 canvas，不要写死 canvas 的宽度和高度，实际需求如果要覆盖移动端，请动态计算尺寸后生成（官网专题是不做移动端了，移动端纯 jpg 图，感觉有点可惜）\n\n2、载入每帧的素材的时候，后续操作都要放在 img 的 onload 事件里执行\n\n3、每次进行绘制之前，记得先清空画布，否则会一直叠加绘制，就没法看了…\n\n4、通过 setTimeout 的延时回调控制无限循环动画的速度\n\n## 最后\n\n有几个方案我没有写，关于 svg 对这个需求的实现，暂时没有思路，我选择放弃，以后想到了再来补上！\n\n而视频和 flash 这些多媒体的展示方案，这里就略过了，处理成本对我来说还是比较高的，要配合设计的主视觉去输出优质的素材，我不太擅长…（所以这种方案可以考虑把活交给设计师…）\n\n最后放上 demo 地址：电影抖屏效果 demo\n"
  },
  {
    "slug": "aliyun-ecs-server-migration",
    "title": "阿里云ECS从香港迁移至国内节点实战教程",
    "desc": "之前因为贪图管理上的方便，一直把这个博客的服务器假设在香港那边，其实速度体验和稳定性啥的都挺好，不过最近打算给博客上线一个小程序版本，受于腾讯的政策要求，必须备案和接入https，考虑了一下，看了一下国内地区的ECS价格，刚好有优惠，所以决定做一个迁移。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/02/1-1.jpg?x-oss-process=image/interlace,1",
    "content": "之前因为贪图管理上的方便，一直把这个博客的服务器假设在香港那边，其实速度体验和稳定性啥的都挺好，不过最近打算给博客上线一个小程序版本，受于腾讯的政策要求，必须备案和接入 https，考虑了一下，看了一下国内地区的 ECS 价格，刚好有优惠，所以决定做一个迁移。\n\n购买服务器的过程就省略了…我是在同一个账号下买的新的 ECS，迁移操作也是基于同一个账号来说的。\n\n## 迁移前的准备\n\n迁移前需要对原来的服务器上的数据做备份，主要操作是创建快照和生成镜像。\n\n1、访问原来的香港 ECS 实例，在“实例管理-本实例磁盘”，点击“创建快照”。\n\n2、然后切换到“本实例快照”列表，等待该快照进度 100%之后，对这个快照“创建自定义镜像”。\n\n3、在刚刚创建好的镜像右侧，点击复制镜像，然后选择目标区域为要调整的国内区域。\n\n## 开始进行迁移\n\n1、切换到国内的 ECS，在实例管理，点击停止运行。\n\n2、 继续在实例管理这个界面，配置信息的“更多”里面，选择“更换操作系统”\n\n3、 选择刚刚复制过来的自定义镜像\n\n然后就更换成功了！！！\n\n## 重启服务器\n\n此时打开新的 ECS 的公网 ip，会发现 502 Bad Gateway，因为需要对 nginx 等服务进行重启，重启之后就可以正常访问网站内容了。\n"
  },
  {
    "slug": "api-design",
    "title": "接口设计：从前端开发的角度谈一谈接口规范",
    "desc": "从前端的角度，以一个接口消费者的身份来谈一谈如何设计一套比较合理的接口，本文主要分为两部分：“接口的基本数据格式”和“接口的业务数据格式”。本文的目的是想减少前后端对接过程中产生的沟通问题，还有优化一些可以避免的错误，甚至于你可以不提供接口文档，前端也能快速上手你的接口。",
    "cover": "https://cdn.chengpeiquan.com/img/2020/02/1.jpg?x-oss-process=image/interlace,1",
    "content": "最近过年放假，加上突如其来的在家办公，时间显得有点充裕，突然就想写写什么东西，决定来聊一聊接口的设计。接口规范这个东西，网上看到的，大部分都是服务端同学之间针对开发层面的交流，当然也看到有一些前端同学在吐槽接口不好用。作为一个接口使用者，在日常业务中，的确遇到过很多结构设计随意、字段命名随意的接口（大部分是为了活动而临时设计），而通常这种接口也缺少对应的文档（因为赶工期），所以理解起来比较费时间，遇到架构设计不合理的情况时，也容易导致在业务的实现过程中，需要写很多冗余的代码来输出最终的数据。所以想从前端的角度，以一个接口消费者的身份来谈一谈如何设计一套比较合理的接口，本文主要分为两部分：“接口的基本数据格式”和“接口的业务数据格式”。本文的目的是想减少前后端对接过程中产生的沟通问题，还有优化一些可以避免的错误，甚至于你可以不提供接口文档，前端也能快速上手你的接口。## 接口的基本数据格式目前主流的数据返回格式都是以 JSON 的形式，JSON 的字段是以  的形式成对出现的。其中 key 是用来读取指定数据的标识，并且在同一个层级的数据里，是唯一的存在，而 value 就是这个 key 所对应的数据信息。例如：在一个公司里，你的工号就是你的 key ，并且这个工号是唯一的，只属于你，可以通过这个工号来找到你的信息，而 value 此时就对应了你的姓名、入职时间等员工信息。基本数据格式，是围绕 JSON 格式规范层面上来讲的。### 关于 key 的规范要求key 是用来读取指定数据的标识，**在 JSON 的格式规范中，统一用 双引号 套起来**，前端读取的时候，会通过  或者  的格式获取对应字段的数据。在实际的项目接入中，遇到的 key 在命名上问题不少，有的是缩写随意，有的是语义不明，有的是上下级重复命名，更有的是用拼音甚至是拼音缩写。我知道在赶工期的时候，服务端同学并不是那么乐意把时间投入到写文档上面，希望前端能够一看就知道接口怎么用，那么写好规范化的 key，就能够减少很多理解上的偏差，而这只需要花费一丢丢时间，所谓磨刀不误砍柴工，性价比是非常高的！所以建议在定 key 的时候，遵循一些必要的规范：**语义化来命名 key，并且遵循下划线命名法或者驼峰命名法**比如：定义一个用户信息字段，推荐使用  或者  作为 key ，而  则不建议使用，更不允许使用  、  这样毫无意义的命名方式。确定好一套命名法之后，这一套接口就需要遵循同一种书写风格，不要混搭使用。**包含“多个结果”的字段，注意名词的复数形式的使用**比如：多个标签使用  而不是  ，多个图片使用  而不是 这里有一个默认的使用窍门：1、当 value 为普通数组时，使用 “名词复数” 的形式命名 key2、当 value 为嵌套了 JSON 对象的数组时，使用  的形式来命名 key比如：**判断查询类的字段，注意动词的配合**通常这种情况代表会返回一个布尔值（true / false），常用的有以下几种：动词含义例子is是否符合某个条件{ \"isLogined\": true, \"isVip\": true }has是否包含某类数据{ \"hasCoupon\": true, \"hasAvatar\": false }can是否能够进行某个操作{ \"canPublish\": false }**使用合理的缩写**缩写是为了提高开发时的书写效率，但是也要遵循缩写规范，或者仅使用普遍认知的缩写方式，不要自己创造一些只有自己看得懂的缩写方式。比如：等级  使用缩写  ， 使用缩写  ， 使用缩写 ， 使用缩写 ，都是允许的，但是  缩写成  就会一脸懵逼！！！**避免使用重复的 key**在同一级的关系里，key 是唯一，如果有重复，后添加的会覆盖之前添加的。比如：已经有了一个的情况下，你继续添加一个，那最终读取 name 字段的时候，获取到的只有“李四”。不同层级允许使用相同的 key 命名，但是，容易造成 bug ……（我是真的遇到过这样的接口！）我举一个**很恶心的例子（请不要这样写）**，比如不同层级都使用了 “data” 作为 key ：假设前端采用 axios 发起的 ajax 请求，那么返回数据的时候，本身获取 JSON 需要用到  就包含了一个 data ，如果要获取第一个 subject ，则需要使用  连续的写上 3 个 data ，非常容易出错！！！以上部分就是对 key 的规范约束，如果能注意这些问题的话，我相信就算你来不及写接口文档，前端同学一看数据格式也能马上明白你的接口各个字段的含义和用法。### 关于 value 的规范要求在 JSON 规范中，value 对应六种不同的数据类型，不同类型的表达形式也有所区分，具体如下：类型特征例子String 字符串value 套在双引号中{ \"name\": \"张三\" }Number 数字value 为整数或者是浮点数{ \"age\": 18, \"weight\": 84.83 }Boolean 布尔值value 为 true 或者是 false{ \"isLogined\": true, \"isVip\": false }Array 数组value 套在方括号中{ \"tags\": [\"中餐\", \"粤菜\", \"卤水\", \"荤菜\"] }Object 对象value 套在花括号中{ \"userInfo\": { \"name\": \"张三\", \"age\": 18 } }Null 空类型value 为 null{ \"girlFriend\": null }那么什么情况应该用什么类型的数据呢？我们一个一个类型来解析一下：**String 字符串**最常见的数据格式，理论上所有类型都可以用 string 的形式返回，然后再转换解决（虽然可以，但是没必要…）一般用于文本展示，URL 链接、图像地址、或者一些要渲染成 HTML 代码的源码部分，我们可以选择字符串传输。另外对于以下其他类型都不适合的场景，也都可以选择字符串来传输，**不过如果能用对应类型的数据，最好还是用他们应该用的类型。****Number 数字**当你需要返回的值，只用一个数值即可表达的时候，就选择用 Number 类型。常用的有 “时间戳、用户 uid 、年龄、价格、页码、物品数量” 等场景。**Boolean 布尔值**当你需要对一个判断条件返回结果的时候，就选择用 Boolean 类型。常用的场景有“判断用户是否已登录、判断用户是否 vip 会员、判断用户是否有优惠资格等等”。误区：之前遇到有的服务端不知道是什么原因，在应该返回  的时候，返回的是  ，瞬间从 Boolean 变成了 String … **从假变成了真！！！** 这是两个完全不一样的数据！**Array 数组**当你需要返回“种类一样”的“多个结果”的时候，由于 key 的唯一性限制，这个时候就可以选择用 Array 类型。比如：返回一个相册图集的图片信息，只需要单纯返回一堆 url ，那么用数组可是非常的方便。比如：返回一个文章列表，所有的文章结构其实是一样的，那么就可以用包含了对象的数组来输出你的 value 。**Object 对象**JSON 本身是一个 Object ，但是支持嵌套 Object ，当你需要对一个字段返回多个相关信息的时候，不应该零散的一个一个单独返回，而是应该集合到一个 Object 里一起返回。比如：从接口把 “张三” 的注册资料传下来，他的 uid 、昵称、头像等等，都属于相关信息，所以可以按下面这样，返回一个 Object 嵌套到 JSON 里。**Null 空类型**空类型一般不会单独作为一个字段的值出现在接口中，更多时候是用来代替某个字段原本应该出现但缺失了的值（也就是这个字段有可能有，有可能没有，出现没有就是 null）。当数据为空的时候，按照目前约定俗成的做法，基本上有以下三种处理方案（需要前后端同学提前约定选择）：**处理方案一：接口返回 null**当一条记录不存在的时候，接口可以返回一个 null 值给前端，前端判断为 null 的时候，就知道这条数据是没有的。**处理方案二：接口不返回该字段**目前运用比较广泛的处理方案就是直接不返回该字段，前端读取到这个字段的时候会返回 undefined ，前端同学在需要用到这个字段的时候，可以灵活处理数据：直接使用该字段的时候，如果字段不存在，可以预设一个默认值。涉及需要二次处理该字段数据的时候，则加上一个判断**处理方案三：接口返回该字段类型的默认“空值”**这也是一个运用的比较广泛的方法，这里的 “空值” 是指，根据原来设定的数据类型，返回一个初始默认值，比如：如果原来是个字符串，那么“空值”就应该是 如果原来是个数组，那么“空值”就应该是 如果原来是个对象，那么“空值”就应该是 如果原来是个数字，“空值”则需要根据业务场景来处理，比如“好友数”的默认值可以是  ，但是页码的默认值则需要为 布尔值也是需要根据业务场景设定默认值，绝大部分场景都需要默认为  ，比如 “是否 vip”，对于大部分用户来说，初始默认值肯定是设置为  为佳。## 接口的业务数据格式讲完基础格式，想聊一聊业务方面的数据格式，顾名思义，是指在业务层面上，虽然符合基本规范，但是在使用上可能会存在的一些人为导致的不合理的地方，从而影响到代码的可复用性、灵活程度等等。### 不同接口的“相同数据”对于一个网站或者 APP ，通常每个不同类型的页面，都会对应不同的接口用以支持需要的数据渲染，但在落实业务的时候，往往会发现，常常出现 “不同的页面” 里包含着 “相同结构的数据” 的情况。以腾讯新闻为例，它包含了“首页推荐”、“搜索结果页”、“专题聚合页”、“热点聚合页”等不同页面，但这些页面都包含了相同的模块 —— “新闻列表”。新闻列表可以看出，“新闻列表”这个模块，每个新闻基本上都是包含了“新闻标题”、“新闻来源”、“评论数”、“发布时间”以及“缩略图（1 - 3 张）”这几个数据信息，那么在指定接口格式的时候，这一部分最好就要统一起来：然后再根据每个接口的需要，添加自己本身的特色数据。这样做的好处是，不管是搜索页的“搜索结果”、推荐页的“猜你喜欢”、专题页的“热点聚合”或者其他哪个页面的数据，对于前端同学来说，它本质都只是一个结构相同的新闻列表，统一字段名和数据结构，能有效降低维护过程中的认知成本、对接成本，并且可以封装成公共方法来处理数据调用，减少差错发生。### 业务状态码与反馈信息在 http 状态码的基础上，接口也都会有自己的一套业务状态码规则，用于反馈接口交互过程中的合法性。那什么情况下才需要使用状态码？是不是能考虑到的错误都需要提供错误码给前端判断呢？答案是否定的，状态码过多容易造成维护成本的增加，建议只在一些前端完全无法识别的错误场景才提供错误码。**不需要接口反馈状态码的情况**前端可以识别的错误场景可以由前端判断解决，无需接口来处理反馈，简单来说，基于常识性的错误，应该都属于前端可掌握的判断范围。拿文章列表来举例，文章列表的 url 通常包含着页码信息，用户可以自定义修改页码访问不同的分页数据，有时候因为页码错误的原因，导致文章列表为空，这种情况，按我们上面讲过的方法，此时数据应该是这种情况，实际上前端只需要判断一下数组的长度是否为 0，以及页码大小，即可立即知道列表是否为空，以及为什么会列表为空：**页码小于 1 表示页码错误****页码等于 1 表示当前真的还没有数据（一般出现在新创建的分类列表）****页码大于 1 表示超过最大页数**直接由前端判断后告知用户页码错误情况即可，无需服务端再处理一套页码错误反馈逻辑。**需要接口反馈状态码的情况**通俗点来说就是，前端同学：“我怎么知道这东西是真是假”，必须通过服务端确认后才可以得出结论的场景。还是拿文章列表来举例，比如网站有很多文章分类目录，每个分类对应一个列表，前端在提交请求的时候，是无法知道当前的分类 id 是否存在，这种情况下，就需要由服务端来反馈错误信息：**反馈信息尽量由接口返回**虽然在遇到错误场景的时候，接口可以只返回 status code ，前端根据接口文档的 code 说明，把提示语写死在页面上，但整个工程的灵活程度就大大降低，每次有所调整，前后端都需要进行修改。建议接口在返回 code 的时候同时返回 message，前端在弹出 Toast 的时候，文案直接使用服务端返回的 message 来灵活反馈给用户。这样不管是修改提示文案，还是新增了新的 code ，都无需重新修改页面，容错率高。**状态码不一定是数字**目前来说，绝大部分接口在定义 status code 的时候，都是使用数字来作为状态码。之前在参与开发公司的 Discuz 业务时，发现 DZ 的 mobile API 状态码就很有趣，用的是英文 keyword 来表达：因为 Discuz 的系统非常庞大，状态码肯定非常多，如果用数字，不仅容易重复，而且拿到一个数字还不一定能马上知道是什么意思，得去查文档。而通过这种 keyword 的方式来表达状态码，看到文案就能知道出了什么情况了，非常巧妙！分割线来个结束语：以上呢，就是这个假期里，目前对接口业务的一些思考和小结，欢迎点评和讨论！\n"
  },
  {
    "slug": "node-to-exe-by-pkg",
    "title": "把node脚本打包成exe文件 在无node环境的机器上运行",
    "desc": "有时候做的一些活动页面，会涉及到数据存储，虽然有一套公共业务接口，具备对应的数据导出，但是活动这种东西，一向没有那么中规中矩，总会有那么几次无法用公共接口来满足，遇到一些需要定制的情况，在赶工期的时候就只能是先满足数据录入需要部分，保证顺利上线，至于数据的导出，那往往是不在考虑范围的。",
    "cover": "https://cdn.chengpeiquan.com/img/2019/10/1.jpg?x-oss-process=image/interlace,1",
    "content": "有时候做的一些活动页面，会涉及到数据存储，虽然有一套公共业务接口，具备对应的数据导出，但是活动这种东西，一向没有那么中规中矩，总会有那么几次无法用公共接口来满足，遇到一些需要定制的情况，在赶工期的时候就只能是先满足数据录入需要部分，保证顺利上线，至于数据的导出，那往往是不在考虑范围的。\n\n那么要导出的话怎么办，通常来说就是服务端的同学从服务器上把 log 文件拖下来，交给运营同学自己分析。如果是独立的 log 还好，一份 log 就是一份想要的目标数据，但如果不是，比如说还混杂了一些其他 log，或者是想把多天的 log 合并到一起，那可能就会难倒运营了。\n\n这个时候前端同学可以搭把手帮个忙，毕竟 node 在手，天下我有。\n\n脚本怎么写就不说啦，主要是说一下最后怎么分享出去，毕竟我们写的时候都是基于 node 环境，npm 各种包，再 npm run xxxxx 运行，不可能也让每个运营同学都安装一遍 node 吧！最不济的，还要把 node 主程序放到项目文件夹里，像下面这样，把 start.js 拖到 node.exe 上面运行，但也是很难受的一堆文件，如果被手痒改了里面的文件内容，报错了你还要去修 - -。\n\n不过 node 这么万能，肯定有他自己的解决办法，那就是直接打包成一个可运行的程序，比如 Windows 的 exe 文件，目前亲测好用的就是一个 pkg 包，操作简单，效果靠谱，还支持 MacOS 和 Linux 平台的文件打包。\n\n官方文档 https\\://www\\.npmjs.com/package/pkg\n\n使用方式也很简单：\n\n上面是最基本的打包操作，打包后，会在当前项目下生成对应的 exe 文件，可以把这个程序和需要的载入目录（比如我示例的 log 文件夹）进行分享，告知运营有 log 就丢进 log 文件夹，然后运行即可。\n\n对比原来一堆文件的文件夹，现在就只需要变成简洁的工具目录，可太友好了：\n\n直接双击 start.exe，即可运行脚本，读取 log 文件夹的 log 文件，生成 result.xlsx 结果文件（根据实际需求调整目录结构）。\n"
  },
  {
    "slug": "vue-photo-preview",
    "title": "Vue插件安利：看大图插件vue-photo-preview",
    "desc": "最近一段时间，涉及到看大图功能的需求，用的比较多的一款看大图插件，PC和移动端适配良好，之前也用过一些别的插件，但还是这个方便，也比较轻量级。",
    "cover": "https://cdn.chengpeiquan.com/img/2019/09/1-1.jpg?x-oss-process=image/interlace,1",
    "content": "最近一段时间，涉及到看大图功能的需求，用的比较多的一款看大图插件，PC 和移动端适配良好，之前也用过一些别的插件，但还是这个方便，也比较轻量级。\n\n先上个 demo 感受一下功能，官方 demo：\n\nhttps\\://826327700.github.io/vue-photo-preview/demo/\n\n在 img 标签里面，有几个参数做下简单的说明：\n\npreview 是用来唤起看大图功能的，带有这个参数的 img 才能关联到插件，否则点击无效，preview 的值是用来分组，比如某个模块是一组相册，那么这一组相册的 img，使用同一个值比如 preview=\"0\"，那么看大图的时候就可以左右切换这一组图片的其他图了（没有关联的图之间，记得设置不同的 preview 值！）\n\nsrc 是图片地址，如果你的图片具备缩略图，则这里放缩略图，原图地址用 large 参数引入。\n\n如果预览图片的时候需要一些文字说明，可以给 img 再加上 preview-text 参数，对应的值，就是这张图片的说明文本。\n\n用法还是蛮简单的，我日常也主要用一下上面的功能，不过插件还是能支持很多个性化配置的，具体可以看官方文档！\n\n最后附上官方文档，更多使用方式看官方说明：\n\nhttps\\://github.com/826327700/vue-photo-preview#readme\n"
  },
  {
    "slug": "ios-time-nan",
    "title": "iOS设备显示时间为NaN的原因及处理方法",
    "desc": "其实是个存在很久的问题啦，之前在IE的年代应该也是有遇到过的，只不过后来日常涉及到时间的需求都是用时间戳比较多，加上现在各种屏蔽IE访问（我们公司的项目都是引导使用chrome/firefox），所以给忘记了！",
    "cover": "https://cdn.chengpeiquan.com/img/2019/09/1-2.jpg?x-oss-process=image/interlace,1",
    "content": "其实是个存在很久的问题啦，之前在 IE 的年代应该也是有遇到过的，只不过后来日常涉及到时间的需求都是用时间戳比较多，加上现在各种屏蔽 IE 访问（我们公司的项目都是引导使用 chrome/firefox），所以给忘记了！\n\n## 需求的背景：\n\n这次是在做中秋节需求的时候，有个需求是在接口返回的一大堆动态的列表里，提取某个作者在某个指定时间范围内的动态出来，所以涉及到一个时间范围的控制。\n\n## 踩坑的地方：\n\n需求真的特别简单，但是就没想到还是栽了个小 bug。\n\n在指定时间范围这里，一开始我也是用的时间戳，但是为了避免 QA 测试的时候改时间老是要去转时间戳，所以 config 里面的时间范围配置，我改成了 ，再通过的方式去转为时间戳，方便随时修改测试时间。\n\n一开始只在 chrome 模拟器和安卓模拟器查看效果，没什么问题，结果拿到 iOS 设备上一看，emmm，返回的时间报错了，出现了 NaN。\n\n## 解决的办法：\n\n其实这个说是 bug 也是 bug，说不是 bug 也不是 bug，因为系统的时间格式本身是，而不是，在 chrome 之所以支持，是因为人家用户体验比较好，不支持的浏览器，也不能说是人家的错！\n\n**所以解决方式也就出来了：**\n\n1、要么在 config 的时候，要求必须使用来配置；\n\n2、要么就是在之前，先对做一次\n\n以上。\n"
  },
  {
    "slug": "blog-articles-sort-out",
    "title": "对博客的文章重新做了一下归类和整理",
    "desc": "最近几个月比较忙，虽然没怎么更新博客，不过还是保留着随手记笔记的习惯，也就是遇到坑啊或者一些觉得值得记录的东西，会随手简单的写到备忘录，等有空的时候再更新上来。恰逢中秋小长假，终于闲下来看一下博客了，没想到最近一个多月每天都还是有不少人来看，大部分是搜索过来的，而且搜的关键词，就是当初我遇到的那些坑！",
    "cover": "https://cdn.chengpeiquan.com/img/2019/09/1-3.jpg?x-oss-process=image/interlace,1",
    "content": "最近几个月比较忙，虽然没怎么更新博客，不过还是保留着随手记笔记的习惯，也就是遇到坑啊或者一些觉得值得记录的东西，会随手简单的写到备忘录，等有空的时候再更新上来。\n\n恰逢中秋小长假，终于闲下来看一下博客了，没想到最近一个多月每天都还是有不少人来看，大部分是搜索过来的，而且搜的关键词，就是当初我遇到的那些坑！\n\n还是蛮开心的，觉得能帮助到大家！\n\n而且自己写博客的目的，也就是为了记录这些坑爹的东西，作为自己的备忘，防止以后再次踩坑，所以今晚舍弃了原来的 “按技术选型分类” 的目录模式（毕竟分类太多其实也写不了那么多东西），就简单的合并成了两个主要大类：\n\n一个是 “项目经验” ，用来写一些项目开发过程中的思路沉淀和经验总结。\n\n一个是 “踩坑心得” ，用来记录日常遇到的坑和解决办法。\n\n希望接下来能有点时间把之前的笔记都整理出来，晚安！\n"
  },
  {
    "slug": "sublime-text-install-package",
    "title": "解决Sublime Text 3无法安装package的问题",
    "desc": "今天无聊更新了一下Sublime Text 3的最新版，结果坑爹了，无法使用Ctrl+Shift+P选择install安装各种插件，会报错 Package Control There are no packages available for installation Please see https://packagecontrol.io/docs/troubleshooting for help",
    "cover": "https://cdn.chengpeiquan.com/img/2019/07/1-3.jpg?x-oss-process=image/interlace,1",
    "content": "今天无聊更新了一下 Sublime Text 3 的最新版，结果坑爹了，无法使用 Ctrl+Shift+P 选择 install 安装各种插件，会报错。\n\nPackage Control There are no packages available for installation Please see https\\://packagecontrol.io/docs/troubleshooting for help\n\n根据提示，那个网站被墙了，打不开，不过很快在 github 上找到了一个同步这个网站的项目，从 github 上下载最新的 zip 解压，根据 md 文档说明配置到 sublime 的设置里即可解决。\n\ngithub 地址  https\\://github.com/HBLong/channel\\_v3\\_daily\n\n项目说明：每天定时更新 channel\\_v3.json，解决 Sublime Text 3 拓展包源无法访问问题\n\n基本上跟着 md 文档处理就行，这一篇只是作为自己的备忘录笔记，嘿嘿。\n"
  },
  {
    "slug": "node-web-crawler",
    "title": "网站改版迁移经验记录：基于node的爬虫编写",
    "desc": "以往的网站迁移服务器，数据方面的东西都是由服务端直接处理，不过这一次的需求比较特殊，就比如门户首页本来抓的是门户的资讯，但改版后是抓微博的动态，原来的资讯基本舍弃，只保留一部分专题和文章页，类似酱紫的一个改版迁移emmm，所以经过商讨，需要由前端来将需要保存的旧页面从客户端保存，再发布上传到新服务器上。",
    "cover": "https://cdn.chengpeiquan.com/img/2019/07/1.jpg?x-oss-process=image/interlace,1",
    "content": "以往的网站迁移服务器，数据方面的东西都是由服务端直接处理，不过这一次的需求比较特殊，先来看一下需求的几个特征点：1、改版后的数据源都是来自另外一个平台，新服务器通过接口实现前后端分离，新的数据都来自某款 app，后台也是使用该 app 对应的后台2、由于第一点，所以旧的 CMS 后台将被下线停用3、这是一个 10 几年的老网站，数据量庞大，但是大部分旧数据要做舍弃处理（因为大部分内容是资讯，已经过了阅读时效性）4、有一部分有价值的旧数据需要单独保存，但由于是基于 CMS 更新发布，从服务端导出的都是模板类的代码，无法直接使用其实简单理解，就比如门户首页本来抓的是门户的资讯，但改版后是抓微博的动态，原来的资讯基本舍弃，只保留一部分专题和文章页，类似酱紫的一个改版迁移 emmm，所以经过商讨，需要由前端来将需要保存的旧页面从客户端保存，再发布上传到新服务器上。## 注意事项这次的需求并不是简单的爬取就完事，拿了需求需要先进行一波分析，拆分了两类注意事项如下：### 缺点分析1、旧页面的编码需要调整（由“gb2312”调整为“utf-8”），否则在新服务器会乱码。2、旧页面的部分公共模块需要移除（页头通栏、页脚、评论模块、登陆模块等），保留的旧页面将变成纯静态页面。3、旧页面的统计代码需要更换。4、旧页面的保存路径必须和原来一模一样（比如文章页一定要遵循原来的 “根目录/年/月/日/hash 文件名.html” 的格式保存），这样才不会造成死链接。5、需要保存的资源散落在各个专题的引用链接里，需要自己从专题里提取。### 优点分析1、由于是 CMS 输出的文章和专题，所以所有的同类型页面，结构、布局、资源引入完全一致，只需要写一套爬虫代码即可适配抓取（虽然有 3 套文章模板，但结构其实是一样的）。2、几乎所有的 js 和 css 都是 CDN 资源，也就是无需单独保存这些资源，同步好 html 代码就完事，个别被定制了样式的专题再单独处理一下即可。3、虽然文章要自己提取链接，但是专题的链接由运营整理提供，可以节省一部分工作量最后自己这边定下来的方案是用 node 来做爬虫服务器，实现自动化抓取和保存，以下是本次涉及到的工具和模块。工具/模块用途api 文档/githubnode.js爬虫服务器http://nodejs.cn/api/http 模块node 内置的模块，用于获取页面信息，也可以用封装好的 express 框架代替http://nodejs.cn/api/http.htmlfs 模块node 内置的模块，用于文件的创建和保存http://nodejs.cn/api/http.htmlmkdirpnode 内置的模块，用于创建多级文件夹（因为 fs 模块的 mkdir 只能一级一级创建，很繁琐）https://github.com/substack/node-mkdirpiconvnode 本身只支持 utf-8，对于非 utf-8 的网站，要用这个模块进行转码，才不会乱码https://github.com/ashtuchkin/iconv-lite/cheerio可选，运行在 node 端的 dom 选择器，api 语法和 jQuery 一样，必要时可用来提取需要的东西https://github.com/cheeriojs/cheerio/## 编写爬虫这里分两步走：### 先提取需要爬取的链接这一步是汇总成一个数组，这一步就略过了，提取 a 标签的 href，对大家应该都没什么难度。### 开始爬取页面流程：创建项目文件夹，创建一个 getHtml.js 作为主程序文件，打开 node，cd 到这个目录，运行 node getHtml 即可开始爬取。主程序 getHtml.js 的核心代码如下（模糊掉业务相关信息，仅供参考）：## 成果预览一切顺利，最终爬了有将近 150 篇文章，数据量说大不大，但如果人工处理肯定是不小（至少创建层级文件夹就会累死人）。刚搞完这次需求，需求方又找过来说还会有个网站想迁移，emmm，坐等新一波挑战了\\~\n"
  },
  {
    "slug": "vue-cli-webpack-banner-plugin",
    "title": "基于Vue-CLI 3.0 让WebPack在打包的时候添加版权注释",
    "desc": "其实以前就知道说有这么个东西可以在打包后添加一个版权注释，但是一直没有去用。不过最近觉得最好还是配置一下，版权不版权倒是其次，毕竟打包后都是混淆的东西，要抄也不好抄啊不是，主要还是给一些有需要的人知道说这个东西是谁写的，有什么问题可以咨询谁，或者说以后有什么类似的需求，是不是可以再次找谁做。",
    "cover": "https://cdn.chengpeiquan.com/img/2019/04/1-1.jpg?x-oss-process=image/interlace,1",
    "content": "这个不是 Vue 的东西，是 webpack 的功能\\~\n\n其实以前就知道说有这么个东西可以在打包后添加一个版权注释，但是一直没有去用。\n\n不过最近觉得最好还是配置一下，版权不版权倒是其次，毕竟打包后都是混淆的东西，要抄也不好抄啊不是，主要还是给一些有需要的人知道说这个东西是谁写的，有什么问题可以咨询谁，或者说以后有什么类似的需求，是不是可以再次找谁做。\n\n配置方式也比较简单啦，都是基于 vue.config.js\n\n效果预览如下，会在打包后的 css/js 文件开头，生成你配置的版权注释：\n\n更多的配置选项可以看 webpack 的官方文档：\n\nhttps\\://www\\.webpackjs.com/plugins/banner-plugin/\n"
  },
  {
    "slug": "css-conf-5",
    "title": "第五届CSS开发者大会：我的第一次参加开发者大会",
    "desc": "2019年3月30日，在深圳，看了几年张老师的博客，今天终于见到大神真人，开心！",
    "cover": "https://cdn.chengpeiquan.com/img/2021/09/20210920173259.jpg?x-oss-process=image/interlace,1",
    "content": "看了几年张老师的博客，今天终于见到大神真人，开心！CSS 这东西虽然写的越来越少，但平时经常会听到运营吐槽设计师不会设计炫酷的效果，设计师吐槽前端做不出来，前端吐槽运营压根没提需求，恶性循环肯定是不行的，整个大环境一直在推进发展，多了解一下新东西还是觉得很值得。\n"
  },
  {
    "slug": "editorconfig",
    "title": "项目代码风格统一神器 editorconfig的作用与配置说明",
    "desc": "团队协作，或者有时候你从GitHub或者其他地方拷贝人家的组件插件下来，想修改，发现代码风格不一致，比如自己习惯2个空格的缩进，但别人是4个空格，或者直接用tab，这就emmm了不是…",
    "cover": "https://cdn.chengpeiquan.com/img/2019/03/1-2.jpg?x-oss-process=image/interlace,1",
    "content": "团队协作，或者有时候你从 GitHub 或者其他地方拷贝人家的组件插件下来，想修改，发现代码风格不一致，比如自己习惯 2 个空格的缩进，但别人是 4 个空格，或者直接用 tab，这就 emmm 了不是…\n\n分享一个神器，只需要命名为 .editorconfig ，保存到自己的项目根目录下，即可让项目下所有文件都统一代码风格，非常棒！\n\n官网 https\\://editorconfig.org/\n\n## 常用配置：\n\n附上我常用的一个 config 文件：\n\n配置基本都是语义化，一看就知道都什么意思，可根据自己的习惯调整！\n\n## 更多配置：\n\n当然也支持更多的配置，具体的配置说明如下：\n\n### 一、常用属性配置\n\n**1、root \\<boolean>**\n\n是否是顶级配置文件，设置为 true 的时候才会停止搜索.editorconfig 文件\n\n**2、charset <\"latin\" | \"utf-8\" | \"utf-8-bom\" | \"utf-16be\" | \"utf-16le\">**\n\n编码格式\n\n**3、indent\\_style <\"tab\" | \"space\">**\n\n缩进方式\n\n**4、indent\\_size \\<number>**\n\n缩进大小\n\n**5、end\\_of\\_line<\"lf\" | \"cr\" | \"crlf\">**\n\n换行符类型\n\n**6、insert\\_final\\_newline \\<boolean>**\n\n是否让文件以空行结束\n\n**7、trim\\_trailing\\_whitespace \\<boolean>**\n\n是否删除行尾空格\n\n**8、max\\_line\\_length \\<number>**\n\n最大行宽。\n\n### 二、常用文件名匹配\n\n**1、\\***\n\n匹配除/之外的任意字符\n\n**2、\\*\\***\n\n匹配任意字符串\n\n**3、?**\n\n匹配任意单个字符\n\n**4、\\[name]**\n\n匹配 name 字符\n\n**5、\\[!name]**\n\n不匹配 name 字符\n\n**6、\\[s1,s2,s3]**\n\n匹配给定的字符串\n\n**7、\\[num1..num2]**\n\n匹配 num1 到 mun2 直接的整数\n\n配置项说明转自简书 https\\://www\\.jianshu.com/p/00ac7bd5e74e\n\n睡觉！\n"
  },
  {
    "slug": "vue-devserver-proxy",
    "title": "基于Vue-CLI 3.0配置webpack的跨域限制代理功能devServer.proxy",
    "desc": "接口跨域一直是个头疼的问题，之前的业务页面都基于一套限制比较少的接口在交互，所以大部分还是写完静态页面然后替换数据部分，直接打包到测试环境即可，所以一直不太在意本地调试的问题。",
    "cover": "https://cdn.chengpeiquan.com/img/2019/03/1-1.jpg?x-oss-process=image/interlace,1",
    "content": "接口跨域一直是个头疼的问题，之前的业务页面都基于一套限制比较少的接口在交互，依赖 chrome 的 Host Switch Plus 和 Allow-Control-Allow-Origin: \\*就能简单解决本地调试的问题，所以大部分情况下还是写完静态页面然后替换数据部分，直接打包到测试环境即可，所以一直也不觉得麻烦。\n\n不过最近业务变动比较大，一些新的业务接口也开始接了进来，并且新接口对域名白名单也做了很多限制，导致原来的方法以及 ip 测试服无法使用，所以新问题就来了，我必须找一个能代替测试服的测试方式解决我在开发过程中遇到的调试问题（毕竟我总不能每次改动都打包发布到正式环境吧！）。\n\n第一个想法就是 node 这么牛逼，应该可以直接做代理吧，所以查了一下，发现是 webpack 就具备的功能，既然是 webpack 有的东西，那 3.0 的脚手架应该也可以轻松配置，于是翻了一下官方文档关于 config 的那一 part，还真的有，嘿嘿！\n\n先附上 vue 的官方文档   https\\://cli.vuejs.org/zh/config/#devserver-proxy\n\n当然，所有配置都是基于 webpack，更多的要看 webpack 的官方文档。\n\nwebpack 的官方文档   https\\://webpack.docschina.org/configuration/dev-server/\n\n下面是我在工作环境中，采取的几种处理方式的小笔记。\n\n## 注意事项\n\n1、以下的所有方式，调试的时候都是 npm run serve 启动本机测试服，打包的时候都是 npm run build 跟平时一样打包。\n\n2、配置的 proxy 指向，在项目文件里的请求必须都是相对地址，不能是以 http/https 开头的绝对地址，只有相对地址才会发起代理请求。\n\n### 接口和项目处于同域名\n\n这种情况就是我原来接触最多的接口，之前能直接丢到测试服也是因为测试服也有一套跟正式环境一样的测试接口，所以项目里引入接口都是写 / 开头的，从根目录开始的相对地址。\n\n比如：\n\n项目地址是 chengpeiquan.com/web-app/project-name/\n\n接口地址是 chengpeiquan.com/api/index.php?module=newslist\n\n**配置方式参考如下：**\n\n### 二、接口和项目不在同域名\n\n这种情况就是我现在新的业务场景。\n\n比如：\n\n项目地址是 chengpeiquan.com/web-app/project-name/\n\n接口地址是 2dang.com/api/index.php?module=newslist\n\n由于接口已经不是项目所在的域名，所以线上是不能用相对地址配置接口 url，但是调试的时候又必须是相对地址，所以针对这种情况，封装了一个接口域名函数来判断当前的环境，决定是以绝对地址请求还是相对地址请求。\n\n**配置方式参考如下：**\n\n上面 2 个是最简单的例子，主要是记录起来备忘，更多配置可以看 webpack 的官方文档。\n"
  },
  {
    "slug": "vue-skeleton",
    "title": "基于Vue-CLI 3.0的骨架屏实现方案",
    "desc": "大型Project的首次载入速度一般会比较慢，虽然Vue可以配置路由懒加载，但有时候打包出来的chunk还是会比较大，这个时候可以结合骨架屏来提高用户等待加载时的体验。",
    "cover": "https://cdn.chengpeiquan.com/img/2019/03/1.jpg?x-oss-process=image/interlace,1",
    "content": "大型 Project 的首次载入速度一般会比较慢，虽然 Vue 可以配置路由懒加载，但有时候打包出来的 chunk 还是会比较大，这个时候可以结合骨架屏来提高用户等待加载时的体验。\n\n## 安装依赖\n\n3.0 的骨架屏和 2.0 不太一样，简化了不少操作，可直接依赖一个插件 vue-skeleton-webpack-plugin 来处理，我们需要先安装它。\n\n官方文档 https\\://github.com/lavas-project/vue-skeleton-webpack-plugin\n\n## 配置 config\n\n脚手架 3.0 的好处就是所有配置都集中到 vue.config.js 处理，非常方便，核心的 config 代码贴一下，完整代码最后会附上。\n\n## 创建骨架屏文件\n\n需要 2 个核心文件，1 个是骨架屏模板 Skeleton.vue，一个是动态引入到项目的 Skeleton.js\n\nSkeleton.vue：模板在这里就不贴代码了，常规的 template 和 style 根据首屏的布局，写一个简化版的纯色模板即可，可在最后下载 demo 参考。\n\nSkeleton.js：参考 main.js，但是需要通过 export default 单独暴露给 Vue。\n\n以上文件保存到 src 目录下，和 App.vue 同级。\n\n## 预览效果\n\n以上，就完成了骨架屏的配置，预览效果可以通过 chrome 模拟器，调节到 low-end mobile 模式，降速查看骨架屏的渲染是否 ok ～\n\n## Demo 下载\n\n相关的 demo 我发布到 github 了，可以下载看一下～ node\\_modules 没有一起放上来，下载后自己先 npm install。\n\nhttps\\://github.com/chengpeiquan/vue-skeleton\n"
  },
  {
    "slug": "vue-params-lost",
    "title": "Vue路由params丢失、错误路由白屏的解决方案",
    "desc": "使用带params的路由的时候，如果params不正确，路由就不会渲染，导致页面出现空白，本来想跟query一样，指定其中一个query为默认值，没想到并不能如己所愿，不过最终问题还是解决了，采用了一个路由的api来判断当前路由是否存在，顺带解决了其他非正常路由的指向问题。",
    "cover": "https://cdn.chengpeiquan.com/img/2019/02/1-1.jpg?x-oss-process=image/interlace,1",
    "content": "使用带 params 的路由的时候，如果 params 不正确，路由就不会渲染，导致页面出现空白，本来想跟 query 一样，指定其中一个 query 为默认值，没想到并不能如己所愿，不过最终问题还是解决了，采用了一个路由的 api 来判断当前路由是否存在，顺带解决了其他非正常路由的指向问题。\n\n## 定位问题：\n\n带有 params 的路由，比如一些文章页、用户个人页等等，输入 ./article/123 这样是可以正常进入文章 ID 为 123 的详情页，但是如果只有 ./article ，这样页面就会变成空白。\n\n## 解决思路：\n\n1、使用了  $route.matched 来判断to的路由对象是否存在，$route.matched 返回的是一个数组，如果数组为空，则表示接下来要去的非我们配置好的路由页面。\n\n2、使用 beforeEach，在进入路由之前，判断接下来是否异常，如果异常，先看原来的路径是否有路由，有的话返回上一页，没有的话，回到首页。\n\n附上官方文档：\n\nhttps\\://router.vuejs.org/zh/api/#路由对象属性\n\n## 相关代码：\n\n放到 main.js 里即可。\n"
  },
  {
    "slug": "github-upload-delete",
    "title": "Github发布项目与删除文件夹操作指令",
    "desc": "Git的指令还是记不太住，发篇文帮助记忆，记录起来方便查阅。",
    "cover": "https://cdn.chengpeiquan.com/img/2019/02/1-2.jpg?x-oss-process=image/interlace,1",
    "content": "Git 的指令还是记不太住，发篇文帮助记忆～\n\n## 发布项目文件到仓库\n\n把 github 上面的仓库克隆到本地，先去自己 Git 项目仓库复制克隆地址，再通过指令克隆到本地\n\n克隆成功后，本地项目文件夹下面就会多出个文件夹，该文件夹名即为 github 上面的项目名，把要上传的文件都放到这个文件夹里面去。\n\n进入克隆下来的项目文件夹，比如这个项目名叫 myGit\n\n添加要发布的文件，一般新项目都是全选即可（注：全选是在 add 后面用一个空格和点，此操作是把 myGit 文件夹下面的文件都添加进来，如果想指定单个文件夹，则 add 后面空格+文件夹名称，文件也同理）\n\n补充提交信息，注明本次发布更新的原因或者调整内容等\n\n执行发布命令，就会开始把刚刚 add 到暂存区的文件都 push 到 github 上面，此步骤需要输入对应的 Github 的帐号和密码。\n\n## 删除仓库里的文件夹\n\n在 github 上的仓库设置里，只能删除整个仓库，不能删除文件夹或文件，所以只能通过命令来解决。\n\n和上传的准备工作一样，先将远程仓库里面的项目克隆下来，然后进入克隆好的项目文件夹里\n\n删除之前可以查看有哪些文件夹\n\n比如要删掉一个叫 oldGit 的子文件夹\n\n和提交一样，填写操作记录说明\n\n发布本次的更新操作\n\n以上，记录起来方便查阅。\n"
  },
  {
    "slug": "js-go-to-top",
    "title": "原生JS实现带动画的返回顶部按钮",
    "desc": "添加的第一个参数destination，终点位置，含义是指终点坐标与窗口顶部的Y轴距离，非必须，默认为0，也就是直接返回到窗口顶部。通过window.scrollY > destination的条件判断，如果当前窗口滚动距离比预设的终点距离大，就执行滚动，否则就结束，到达目的地。",
    "cover": "https://cdn.chengpeiquan.com/img/2019/01/1.jpg?x-oss-process=image/interlace,1",
    "content": "之前 jQuery 走天下的时候，返回顶部按钮倒是很简单，一个 animate 就可以解决，原生 JS 能否实现呢？答案是肯定的！\n\n## 相关代码：\n\n先贴代码，思路和代码来源 stackoverflow，做了一波小小的调整，添加 2 个参数，1 个是滚动到的指定位置，1 个是滚动速度，附个 issue 链接。\n\nhttps\\://stackoverflow\\.com/questions/21474678/scrolltop-animation-without-jquery\n\n## 主要思路：\n\n既然改装了一下人家的函数，那就顺便说一下当时的思路吧。\n\n### 原版的思路\n\n1、先算好每次往上移动的距离（因为每次距离顶部的高度要减少，所以这个值需要是负值），scrollY 是当前窗口距离初始位置所滚动的所有距离，通过这个距离去把每次位置计算出来（分母应该是老外通过合理计算后得出的一个公式，具体原理未深入探索，应该也是经过多次尝试）。\n\n2、通过 setInterval 循环执行页面的滚动距离回缩，直到 scrollY 为 0 的时候停止，清除循环。\n\n### 新增返回位置\n\n添加的第一个参数 destination，终点位置，含义是指终点坐标与窗口顶部的 Y 轴距离，非必须，默认为 0，也就是直接返回到窗口顶部。\n\n通过 window\\.scrollY > destination 的条件判断，如果当前窗口滚动距离比预设的终点距离大，就执行滚动，否则就结束，到达目的地。\n\n为什么要加这个呢，主要是结合自己的日常业务需求，比如一些 Ajax 翻页按钮，翻页后只是重置 data 里的数组数据，DOM 树不改变，页面也不会刷新，这个时候翻页是成功了，但页面还是在列表底部的按钮位置，体验不太好，这个时候就需要让翻页的同时让页面再滚回到列表最前面。\n\ndestination 可以直接写死数值，也可以根据实际情况先做一个计算，2 个参考方法如下。\n\n### 新增滚动速度\n\n第二个参数 duration，滚动的持续时间，单位毫秒，也是非必须，默认是 500 毫秒。\n\n添加的原因也是因为业务需求，不过用的不是很多，所以放第二个参数去了。\n\n以上，就是一个带动画的滚动控制函数说明了。\n"
  },
  {
    "slug": "document-write-optimize-webpack",
    "title": "针对document.write渲染的优化方案（适用webpack按需加载）",
    "desc": "write方法去渲染html，更多情况是适合手写页面的年代，现在前端开发都是通过node+webpack工程化打包，那么遇到必须write又不想write的情况应该怎么办？最近刚好对手里的一个项目做了渲染优化，在这里顺便做个总结，讲一下对`document.write`渲染html的一个优化思路，可以结合到MVVM框架（如Vue.js）里去使用。",
    "cover": "https://cdn.chengpeiquan.com/img/2018/12/1.jpg?x-oss-process=image/interlace,1",
    "content": "参与过 discuz 相关业务开发的同学应该都知道，dz 论坛有一套自带的 api 系统叫数据调用（后台-门户-模块管理-数据调用），对于论坛运营同学来说，可以将模块的外部调用作为广告位数据源、或者引用到专题页面去展示论坛内容，很受运营的喜爱。\n\n但这套系统有个问题就是，所有的渲染方式都是通过去抓取模板语法生成的 html 数据，而我们都知道，在现代化的前端开发里是越来越排斥这个方法，因为会引起性能问题，影响网页的渲染速度，write 的越多，渲染越慢。\n\n而且 write 方法去渲染 html，更多情况是适合手写页面的年代，现在前端开发都是通过 node+webpack 工程化打包，那么遇到必须 write 又不想 write 的情况应该怎么办？最近刚好对手里的一个项目做了渲染优化，在这里顺便做个总结，讲一下对渲染 html 的一个优化思路，可以结合到 MVVM 框架（如 Vue.js）里去使用。\n\n## 痛点分析\n\n一个多元化的专题里面，会有轮播图、帖子列表、帖子排行榜等不同的模块，而传统的数据调用渲染方式，注定了一个模块只能一个调用，于是一个页面下来会有 N 个数据调用，也就是有 N 个。\n\n### 回顾传统的方法\n\n通过 html 模板配置数据调用，在 html 里引入数据调用，会通过 write 去渲染 html，如果页面有太多 write，渲染会卡顿严重。\n\n相关模板如下，传统的模板就是 html 结构长什么样，模板结构就长什么样：\n\n### 曾经尝试的方法\n\n如果说直接去 wirte 出 html dom 会严重卡顿，那我是不是可以 write 出 object，先通过 js 处理完数据再一次性渲染？毕竟 wirte 出来的脚本是可以运行的！\n\n答案当然是可以！！！并且自己亲测有效！！！\n\n相关模板如下，把模板写成 js，把数据源定义成一个 json array：\n\n然而！！！但是！！！因为最终负责维护数据源（也就是负责推送或者抓取的人）是运营同学，他们并不清楚 js 或者 json 需要注意的问题，通过 object 格式配置数据调用模板，又会在运营过程中，因为反斜杆，引号等问题导致数据报错，整个页面渲染崩溃。\n\n而且还有一个问题就是，现在用 node+webpack 来做开发的话，这种方式依然必须用传统的渲染方法，也就是在 entry 的 index.html 里，引入这个数据调用才行，无法通过构建打包然后按需加载！！！\n\n## 优化思路\n\n回顾了痛点，我们梳理一下我们想要的东西：\n\n1、渲染的时候不要 write，更不要直接 write 出好多 DOM 去导致卡顿\n\n2、开发阶段不要去修改 entry 的 index.html，想全部由 webpack 构建生成\n\n3、最终渲染的时候可以按需加载，不要有多少数据源就在打开页面的时候全部加载完\n\n目的理清楚了，解决方案是不是越来越清晰！！！不错，就是 ajax！\n\n我以一个基于 Vue-CLI 的案例来直观的表达我的处理思路和方式吧！（这里有一个地方需要注意，就是通过这种方式来获取数据调用内容源的时候，不能跨域，除非你们服务端配置了允许跨域，否则专题最终都得传到论坛域名下）。\n\n## discuz 数据调用模板\n\n这是写在数据调用的模板里的模板代码，具体语法参照模板说明，但是 html 结构无需遵循业务需要，只需要最简单的 html 标签和 className 就可以了，目的是通过 className 去获取对应标签里的文本。\n\n这里是以抓取论坛帖子为例子，抓取了帖子 id、帖子标题、发布时间和缩略图：\n\n## Vue 组件模板\n\n写在 Vue 组件的 template 里，这是一个包含了链接、封面、标题、发布时间的文章列表。\n\n## Vue 数据格式\n\n在 Vue 组件 data 里的一个数据，最终文章列表的数据源是一个 JSON 数组：\n\n## Vue 数据请求方法\n\n请求数据如我们前面说的，通过 ajax 去获取，避开带来的性能问题，以下是基于 axios 的请求演示，请根据业务场景调整。\n"
  },
  {
    "slug": "vconsole",
    "title": "移动端真机debug调试神器 vConsole的引入说明（原生态与WebPack）",
    "desc": "距离这个神器发布第一个版本的时间，已经过去3年了，不过还是有蛮多新同学不知道他的存在，在做项目的时候，移动端真机调试还是用alert来弹，不仅调试起来很烦，也蛮不好定位问题的。安利过的每个人，都对vConsole有着100%的好评哈哈哈，写个博文记录下吧，好东西应该持续推荐。",
    "cover": "https://cdn.chengpeiquan.com/img/2018/11/1-1.jpg?x-oss-process=image/interlace,1",
    "content": "距离这个神器发布第一个版本的时间，已经过去 3 年了，不过还是有蛮多新同学不知道他的存在，在做项目的时候，移动端真机调试还是用 alert 来弹，不仅调试起来很烦，也蛮不好定位问题的。\n\n安利过的每个人，都对 vConsole 有着 100%的好评哈哈哈，写个博文记录下吧，好东西应该持续推荐。\n\n## 功能简介\n\n在项目页面上引入 vConsole 之后，会在页面右下角生成一个控制台按钮，打开控制台后，会类似 Chrome 的 console 一样，打印我们输出的 log 信息，以及各种页面报错，还可以查看到浏览器 UA 信息、结构 DOM、本地存储信息等等。\n\n## 下载地址\n\nWebPack 可以通过 npm i vconsole 直接安装。\n\nhttps\\://www\\.npmjs.com/package/vconsole\n\n也可以到官方仓库下载文件引入。\n\nhttps\\://github.com/Tencent/vConsole\n\n## 引入方式\n\n### 1、原生页面\n\n就是常规的通过 src 引入即可。\n\n### 2、WebPack 打包\n\n通过 npm 安装，然后封装成一个可复用的小组件，保存到项目下的静态目录，命名为 vconsole.js\n\n在需要调用的项目组件里，引入这个小组件即可。\n\n使用非常简单。\n\n最后，切记正式发布前，移除控制台再对外上线哦！\n"
  },
  {
    "slug": "vue-cli-3",
    "title": "Vue-CLI脚手架3.0升级小结（含Win版Node升级与PowerShell踩坑记录）",
    "desc": "Vue脚手架3.0出来也蛮久了，秉着前人先踩坑的习惯，最近才开始升级。整个过程还是蛮顺利的，不过也有一些小小的问题，简单记录起来。",
    "cover": "https://cdn.chengpeiquan.com/img/2018/11/1-2.jpg?x-oss-process=image/interlace,1",
    "content": "Vue 脚手架 3.0 出来也蛮久了，秉着前人先踩坑的习惯，最近才开始升级。整个过程还是蛮顺利的，不过也有一些小小的问题，简单记录起来。\n\n系统版本：Windows 7 64 位（公司限制无法使用管理员权限）\n\n命令程序：PowerShell（公司限制无法使用 CMD）\n\n官方文档 https\\://cli.vuejs.org/zh/guide/\n\n## 关于 Node.js 版本升级\n\nVue-cli 3.0 需要 8.9 或者更高的 node，官方推荐 8.11+，我 check 了一下本机的 node 版本，有点老，才 7.0，于是需要先解决版本升级的问题。\n\n先从官网下载 node 安装包，由于公司是 Windows 的机器，而且不开放管理员权限，无法直接通过 msi 文件安装，于是选择了下载 zip 免安装包，下载后直接解压，覆盖原来的 node 目录的文件即可升级。\n\n然而一开始选择的最新版 node 目前使用有问题，安装 npm 包的时候一直报错 asyncWrite is not a function，半天定位不到原因，后来在 stackoverflow 上看到这个问题，通过降级到 8.11.2 来解决（所以最新版还是不知道什么原因和怎么解决 emmm）。\n\nhttps\\://stackoverflow\\.com/questions/50597159/npm-err-asyncwrite-is-not-a-function\n\n附上 Node 的相关下载地址。\n\n官网下载 https\\://nodejs.org/zh-cn/download/历史版本 https\\://nodejs.org/zh-cn/download/releases/我选的版本 https\\://nodejs.org/download/release/v8.11.2/node-v8.11.2-win-x64.zip\n\n## 关于 Node 的环境变量\n\n直接通过安装包安装的 node 现在都不需要配置这个了，会自动设置好，但如果跟我一样，没有管理员权限，通过 zip 解压的话，第一次使用 node 需要关联上这个 path。\n\n方法也比较简单，就直接截图示范了，path 的内容就是你的 node 的路径。\n\n## 安装 Vue-CLI 3.0\n\n本来以为要踩坑也得等到使用的时候才会踩，安装怎么说也得很顺利吧，然而现实就是比较残酷，安装的时候就踩了个大坑。\n\n根据官方文档说明，卸载了旧版脚手架之后，使用  就可以直接安装，但是频繁报错，说存在无法识别的标记，如下图：\n\n并且这个问题，百度和谷歌都找不到原因，根本没有人提问，我能怎么办，我很绝望啊！\n\n幸亏天无绝人之路，有位同事对 PowerShell 比较熟，一眼就帮我看出问题所在，是@引起的，在 CMD 是可以直接这么安装，但是在 PS，@是个特殊字符，需要进行转义，需要在@前面加上\\`，再次尝试 ，转义后立即可以安装了，感动到哭。\n\n## 修改 Vue 项目配置\n\n3.0 的目录结构比 2.0 精简了好多，具体的这里不细说了，官方文档也说的很清晰，这里附上我在用的 vue.config.js 文件给大家参考。\n\n配置文档说明 https\\://cli.vuejs.org/zh/config/\n"
  },
  {
    "slug": "wechat-bug-input-textarea",
    "title": "微信浏览器input/textarea回收键盘后界面错位bug的解决办法",
    "desc": "最近在处理一个H5页面的时候，有一个需要用户填写昵称信息的环节，模拟器一切正常，结果到了真机上发现输入信息完毕后，无法点击确认按钮emmm，黑人问号了半天，联系QA又深度测试了一下，发现只有iOS的微信浏览器才会。",
    "cover": "https://cdn.chengpeiquan.com/img/2018/10/1-6.jpg?x-oss-process=image/interlace,1",
    "content": "最近在处理一个 H5 页面的时候，有一个需要用户填写昵称信息的环节，模拟器一切正常，结果到了真机上发现输入信息完毕后，无法点击确认按钮 emmm，黑人问号了半天，联系 QA 又深度测试了一下，发现只有 iOS 的微信浏览器才会。\n\n似乎问题范围一下子缩小了不少，可还是有点懵逼，因为 H5 在手机上看，视觉还是正常，然而就是无法点击下一步，后来不断的断点调试后，发现其实界面是“错位”的，那问题定位到就好说了，在查询了一堆 QA 问答之后，在 sf 发现这个问题几乎一毛一样的情况。\n\niphonex 微信页面下，safari 不会,input 输入框拉起键盘后，键盘消失，但是原本键盘的区域还存在\nhttps\\://segmentfault.com/q/1010000015447012\n\n看了大神的回答恍然大悟，解决办法比较多，主要原理还是在于输入焦点取消后，让页面有个滚动过程来还原原来的高度，代码可以看原来的问题，这里选取了一个最简单的贴一下，感恩！\n"
  },
  {
    "slug": "js-exchange-random",
    "title": "低成本实现“猜你喜欢”需求的几种思路（本质为随机数与“换一换”）",
    "desc": "这个话题的第一次出现，是在2017年8月份的时候，到现在也蛮久了，之所以想起来说要小结一下，是因为这一年里不少新同学都过问过这么个问题，自己虽然做的不算多，但也通过几种情况完成了各类需求，写个笔记也方便以后用。那会自己第一次遇到一个需求是做一个“猜你喜欢”，然后没有后端的支持，也就是实际上这个“猜你喜欢”本质并不是“猜”，而是一个随机展示，也就是所谓的“换一换”。",
    "cover": "https://cdn.chengpeiquan.com/img/2018/10/1-7.jpg?x-oss-process=image/interlace,1",
    "content": "这个话题的第一次出现，是在 2017 年 8 月份的时候，到现在也蛮久了，之所以想起来说要小结一下，是因为这一年里不少新同学都过问过这么个问题，自己虽然做的不算多，但也通过几种情况完成了各类需求，给了他们一些思路指点，既然陆陆续续会遇到，那就干脆写个笔记也方便以后用。\n\n当初自己第一次遇到一个需求，其实需求文档上写的是做一个“猜你喜欢”，然而并没有后端的支持，也就是实际上这个“猜你喜欢”本质并不是“猜”，而是一个随机展示，剥掉外皮看本质，落地执行也就清晰了，最终那个“猜你喜欢”上线后，就是随机渲染，以及所谓的“换一换”。\n\n好了，小回忆之后就是总结了，基于后端提供的不同数据情况，这里列举一些常见的套路，如果以后有新的，再慢慢补进来。\n\n## 后端能够提供随机数据\n\n先从最简单的说吧，如果是大 project，产品很重视，后端也有独立人员提供支持对接的话，肯定是优先从后端提供现成的数据返回，有了后端的随机数据，那前端只需要直接请求过来展示就 ok。\n\n## 后端不随机，但有翻页\n\n适用于一般的 project，比如一个投稿活动，在作品展示页面，除了按“热门/最新”排列作品，需求方可能会想提供一个随机作品模块来提高那些位于榜单后面的作品曝光量，那这个情况肯定不会单独要求后端做一个随机数据的接口返回，我们要基于作品列表接口，通过随机页码的方式来实现需求。\n\n注 1：如果要保证所有作品都覆盖到随机范围内，可以先这样定个静态随机值上限，第一次获取到数据后，再从接口返回的 count 总数去计算总页数（活动接口通常会有一个作品总数量值，用于体现当前参与情况），更新这个上限值。\n\n注 2：需要“换一换”按钮，则点击按钮时重新生成一个 page 值请求新的列表数据即可。\n\n## 后端不随机，没有翻页\n\n这种情况也遇到过一次，就是后端是一个推荐作者列表，因为这种需求数据量不是很大，所以并没有做翻页，前端部分则只有一个小小的模块，每次展示 4 位作者，刷新页面随机推荐 4 位上来，或者手动换一拨。\n\n注：需要“换一换”按钮，则点击按钮时重新生成一个 min 值，并更新对应的 max 值，随机取本地数据的另外一段数据来渲染，无需请求接口。\n\n目前主要就这 3 种情况，以后有别的话，再继续补充。\n"
  },
  {
    "slug": "ckeditor4-rich-text-editor-webpack",
    "title": "基于CKEditor4的富文本编辑器 WebPack引入说明与配置注意事项",
    "desc": "前几天对接了个需求，说因为传统的CMS太笨重，并且一些业务结合点想落地的话改造太麻烦，想让我这边帮他做一个发布后台，前后端分离，他只负责数据和接口，其他的由我自己把控。我当时没立即答应，因为我不会啊 - - 哈哈哈没玩过这东西，之前做发布都是直接走CMS或者WordPress这种直接现成的发布系统，偶尔自己做一些活动用的传图发布页面也是简单的一个textarea就完事。不过好奇心又很强，也想学多点东西，还是接了过来，然后让他给我点时间我得尝试一下。",
    "cover": "https://cdn.chengpeiquan.com/img/2018/10/1-3.jpg?x-oss-process=image/interlace,1",
    "content": "前几天对接了个需求，说因为传统的 CMS 太笨重，并且一些业务结合点想落地的话改造太麻烦，想让我这边帮他做一个发布后台，前后端分离，他只负责数据和接口，其他的由我自己把控。简单看了一下需求，说是发布后台，实际上对我来说就是一个前台发布页面，只不过通过 OpenID 登录后，识别不同的用户身份来决定是否允许发布或者修改删除。\n\n我之前做的发布页面都是偏简单化的东西，几个 input 搭配一个 textarea 就完事（传图/提交按钮其实也是 input 哈哈哈），第一次面对复杂需求说要富文本编辑器，想自己造轮子是不可能了，于是先查阅了一下现成的 JS 插件，倒是出乎意料的多。普遍用的比较多的还是 CKEditor，包括我们公司的很多内部发布系统也是用的这个，Ok，心里有底，可以开搞了。\n\n## 版本选择\n\n因为需求要的编辑器功能比较多，我选择的是功能最强大的 full 版（总大小 1.7M，核心文件 700K），并且由于最新版的 ck5 包括插件只能全部走 npm 安装打包，对打包出来的项目文件大小影响很大（如果你和我一样不打算多个 html 出口的话）。\n\n所以我选择了传统一点的 ck4，可以不作为项目的核心文件打包，并且根据页面需要动态按需载入（我喜欢 SPA 的思维方式，哪怕用 jQ 也是喜欢单个页面，根据不同的 Query 去实现“页”与“页”之间的切换，嗯没错，这次的实现是走的 jQuery 去实现，Vue 按理来说应该问题也不大）。\n\nhtml 部分，写一个 textarea\n\n引入插件后\n\n官网下载 https\\://ckeditor.com/ckeditor-4/download/\n开发文档 https\\://ckeditor.com/docs/ckeditor4/latest/guide/\n\n注：下载的时候一般无需勾选“Easy Image”，因为图片这块通常都是存自己的服务器，用不到这个功能。\n\n## 开发过程\n\n### 确认打包结构\n\n由于 jQuery 在 WebPack 并没有像 Vue 那么统一的部署格式，我个人是习惯按这样的分支去安排文件的放置，app 是个人开发用的文件夹，public 是打包后的线上文件夹，从 app 里打包的东西都会生成到 static 里（每次都清空并重新生成带新 hash 的文件）。\n\n由于编辑器工具是个无需频繁修改的插件文件，所以在 public 下创建了个 plugins 插件并放进去，这样每次打包都不会影响到 plugins，如果需要发布到线上预览，也只需要更新原来的 index 和 static，无需一直重复发布 plugins。\n\n### 动态引入插件\n\n由于不是 import 到项目里，所以需要在用到编辑器的时候才把它载入进来，动态载入 JS 文件，jQuery 是比较简单的，利用 getScript 引入即可，剩下的要干嘛干嘛就写到 done 的回调里就 ok。\n\n### 修改插件配置\n\n执行完第 2 步里的东西，会发现编辑器加载过程中会有报错。\n\n因为 CKEditor 有很多自己的小插件，比如语言包、编辑器的样式文件、拓展功能等，它的引入规则是“CKEditor 从哪里引入，它的插件就从哪里引入”，因为核心文件 ckeditor.js 里有这么一个引入方式：\n\n就相当于你在 index.html 里引入里了 CKEditor，那么这个 contents.css 的路径就是直接从项目根目录里加载，然而现在我们的文件是在 plugins 下，所以需要修改编辑器的配置。\n\n官网对编辑器 path 的说明   https\\://ckeditor.com/docs/ckeditor4/latest/guide/dev\\_basepath.html\n\n无需修改核心文件的东西，只需要在 getScript 的回调里添加就行（官网是建议在 html 里作为全局变量配置，不过我这样子在项目里也可以生效，就放一起维护了）。\n\n那么到这一步，编辑器就可以出来了（上面的标题和类别选择不是富文本的）。\n\n### 传图功能实现\n\n生成好的编辑器，默认是不显示文件上传控件的，只能插入远程图片 url，通过对官网 api 文档的查阅，确定好传图的配置方式，添加即可实现。\n\n官网 api 文档 https\\://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR\\_config.html\n\n但是在上传后，出现了一个提示“不正确的服务器响应”。\n\n一脸懵逼的翻阅文档，找到了原因，是接口返回的格式不对（相对于编辑器需要的返回结果的不对，有固定要求），解决办法如下：\n\n官网关于传图后 success 与 error 返回的格式要求说明文档 https\\://ckeditor.com/docs/ckeditor4/latest/guide/dev\\_file\\_upload.html\n\n### 文章编辑功能\n\n编辑功能的思路，一开始是想着从接口拿到原来的文章数据后，放到编辑器内容框里就行，然而却发现编辑器是用 iframe 来实现。\n\n虽然可以也可以通过操作 iframe 来实现，但觉得别扭，后来翻阅文档找到一个功能就是 setData，CKEditor 自己有 api 可以直接向编辑器添加数据。\n\n## 汇总一下代码\n\n到这里就暂时没有什么问题了，项目主要涉及到的功能和问题主要是上面这几个，以后有其他问题再陆续补充，目前用到的代码如下。\n\n以上。\n"
  },
  {
    "slug": "axios-ie9",
    "title": "解决axios的responseType为\"json\"时IE9报undefined的兼容办法",
    "desc": "虽然axios说可以兼容IE9，但实际上在项目开发过程中，IE9报错，而且目前的情况是responseType为\"json\"时才会报这个异常，相关请求代码大致如下",
    "cover": "https://cdn.chengpeiquan.com/img/2018/10/1-8.jpg?x-oss-process=image/interlace,1",
    "content": "虽然 axios 说可以兼容 IE9，但实际上在项目开发过程中，IE9 报错，而且目前的情况是 responseType 为\"json\"时才会报这个异常。\n\n## 定位问题：\n\n因为 IE9 下，指定 json 格式的请求，response 只返回 responseText，而其他浏览器都可以正常返回 data\n\n相关请求代码大致如下：\n\n## 解决方案：\n\n解决方案也很简单，判断接口返回的数据是否正常，如果请求 json 格式返回的 data 为空，则将响应数据指向 responseText。\n\n经过搜索发现将以下代码添加至 main.js 即可解决该异常，很好用！感恩 Github，附上 issue 原文链接。\n\nhttps\\://github.com/axios/axios/issues/265#issuecomment-333014355\n"
  },
  {
    "slug": "noconflict-jquery-zepto",
    "title": "只写一次执行函数 同时兼容桌面noConflict后的jQuery与移动端的Zepto",
    "desc": "今天遇到一个比较特殊的情况是这样子，维护一个年代比较久远的项目，说年代久远也就三年前开发上线的，实际生产线还是用的很稳，只不过中间经历了一次改版，后端倒没啥，同一个部门维护的，前端当时因为排期问题，为了及时上线，所以做桌面端模板和移动端模板是两个不同的部门的开发，于是，现在需要做一些中间层的需求就遇到了这么一个稍微有点坑爹的情况。",
    "cover": "https://cdn.chengpeiquan.com/img/2018/10/1-2.jpg?x-oss-process=image/interlace,1",
    "content": "今天遇到一个比较特殊的情况是这样子，维护一个年代比较久远的项目，说年代久远也就三年前开发上线的，实际生产线还是用的很稳，只不过中间经历了一次改版，后端倒没啥，同一个部门维护的，前端当时因为排期问题，为了及时上线，所以做桌面端模板和移动端模板是两个不同的部门的开发，于是，现在需要做一些中间层的需求就遇到了这么一个稍微有点坑爹的情况。\n\n## 需求回顾\n\n功能本身不复杂，就是后台系统有一个模块是存放提前配置好的函数功能，里面包含一些模板参数，到时候用户在前台的发布界面上填好参数，提交后，就会渲染到浏览器去执行相应的功能，有点类似于我们常用的插入视频 url 生成视频等功能。\n\n如上图，其中桌面版是引入了 jQuery 库，并由于$符号与其他库冲突，当时的开发对jQ做了noConflict，所以在桌面版除非自己使用形参函数，否则都得用jq或者jQuery来代替$，移动端是使用了 Zepto，默认是$，并且双端引入库的位置也不一样，编辑器渲染的代码是在页面中间，这就需要等页面加载完毕才能执行编辑器代码，才不会导致出现异常。\n\n## 定位问题\n\n理清楚需求，再来看有什么问题：\n\n1、双端本来可以用同一套代码，但因为 noConflict，无法直接使用$\n\n2、代码需要等页面加载完毕再执行，但页面上已有 onload 事件，无法重复使用 onload，也因为$的问题，无法使用 ready\n\n3、涉及 ajax 并且是非简单请求（虽然这个可以用原生 js 实现，但为了简化代码还是想解决一下然后用 jQ/Zp）\n\n## 解决思路\n\n1、第一个问题：无法使用$\n\n这个倒比较好解决，因为形参的存在，通过稍微变形就可以解决\n\n2、第二个问题，无法使用 onload 和 ready\n\n再细化一下问题，既然解决了$的问题，也就相当于只要jQuery和Zepto有定义，即可成功使用$去操作。\n\n桌面版 jQuery 库是引入在页头，所以在编辑器代码渲染出来的时候，jQuery 这个关键词是已经定义过的，桌面版可以直接 ready 执行。\n\n移动版由于 Zepto 在页尾，编辑器代码渲染的时候，浏览器还不知道 Zepto 是什么，由于 onload 无法用，那么就得尝试别的方式，这个时候最理想的方法应该就是采用监听，采用了 addEventListener 监听页面加载情况来解决。因为 addEventListener 目前对主流浏览器已经兼容的非常好，并且移动端需求，没有 IE8 这种坑爹浏览器需要考虑，当然更主要的是，允许有多个 load 的监听，类似 jQ 允许一个页面上有多个 ready 一样。\n\n解决了 1 和 2，第 3 个问题关于 ajax 非简单请求就不是什么问题了。\n\n## 最终方案\n\n汇总一下解决方案的代码如下：\n"
  },
  {
    "slug": "large-image-preload-fast",
    "title": "弹窗大背景优化方案 png大图片预加载处理方法",
    "desc": "因为一直做游戏风格的需求，而日常维护的游戏也比较朴素，都是用纯css处理的渐变底色即可满足弹窗背景的配置，最近处理了一个比较花哨的需求，弹窗设计方面比较下功夫，带来的一个问题就是这个弹窗背景图只能切成png，哪怕经过tinypng优化之后还有50多kb。50kb的图片说实话也不算特别大，如果作为常规的img加载其实没什么问题，但作为背景图来加载，问题就会被放大 —— 用户访问页面后，第一次打开弹窗的体验非常差，会先显示弹窗内容，再慢慢加载弹窗背景（隐藏层的背景需要层变为可见才会加载）。",
    "cover": "https://cdn.chengpeiquan.com/img/2018/10/1.jpg?x-oss-process=image/interlace,1",
    "content": "因为一直做游戏风格的需求，而日常维护的游戏也比较朴素，都是用纯 css 处理的渐变底色即可满足弹窗背景的配置，最近处理了一个比较花哨的需求，弹窗设计方面比较下功夫，弹窗的背景图片只能导出 png 素材，无法使用纯 css 来实现，哪怕经过 tinypng 优化之后还有 50 多 kb 之巨。\n\n## 定位问题\n\n50kb 的图片说实话也不算特别大，如果作为常规的 img 加载其实没什么问题，但作为背景图来加载，问题就会被放大 —— 用户访问页面后，第一次打开弹窗的体验非常差，会先显示弹窗内容，再慢慢加载弹窗背景（隐藏层的背景图需要经过交互后变为可见才会加载）。\n\n## 解决方案\n\n在页面加载完毕后，执行一次背景图素材的预加载，最终解决效果完美。\n\n以下为实现时的 demo 代码片段\n\n只要不创建 dom，对页面的外观是没有影响的，图片只要请求成功了，后续再调用这个图片地址就无需重新请求了，本地已有缓存可快速显示。\n"
  },
  {
    "slug": "vue-toast",
    "title": "Vue插件：封装独立的通用组件 可复用的单文件式全局Toast弹窗",
    "desc": "最近突然很想简化一些自己写的，项目常用的调用小功能，比如一些弹窗等等，之前都是H/J/C分离，每次复用都要分别写到对应的文件里，略显麻烦。最近看了Vue官网有关于插件打包的说明，尝试了一下还可以，目前成功打包了一个Toast组件。以后每次项目要用到Toast弹窗，只需要引入一个 showToast.vue 即可直接生效调用，而不必在多个文件里维护自己的那部分代码。",
    "cover": "https://cdn.chengpeiquan.com/img/2018/10/1-9.jpg?x-oss-process=image/interlace,1",
    "content": "最近突然很想简化一些自己写的，项目常用的调用小功能，比如一些弹窗等等，之前都是 Html/JavaScript/Css 分离，每次复用都要分别写到对应的文件里，略显麻烦。\n\n最近看了 Vue 官网有关于插件打包的说明，尝试了一下还可以，目前成功打包了一个 Toast 组件。以后每次项目要用到 Toast 弹窗，只需要引入一个 showToast.vue 即可直接生效调用，而不必在多个文件里维护自己的那部分代码。\n\n## 功能说明\n\n1、支持自定义弹窗文案，并自动计算弹窗的高度调整在屏幕的位置，以一直保持居中\n\n2、支持自定义弹窗显示时长（默认 2 秒，单位毫秒）\n\n3、支持回调函数，callback 将在设定的时间结束后才执行\n\n## 使用方式\n\n1、将 showToast.vue 文件放置于项目的模板文件夹（个人习惯为 src/components）\n\n2、打开 App.vue，引入 vue 和 showToast 组件，并 use 该组件（其实是 use 组件里的方法，只不过打包为一个文件了）。\n\ntemplate 部分（举例，主要就是 showToast 那里）：\n\nscript 部分：\n\n3、之后在 App.vue 或者任意子组件里，就可以直接通过 this.$showToast(文案, 显示时间, 回调函数) 去唤起 Toast 弹窗了。\n\n## 效果预览\n\n## 组件源码\n\n我使用的是 stylus，样式在这里就随便写一下，请根据实际项目需要做调整和本地备份。\n\n保存为 showToast.vue 文件到项目模板文件夹下即可，以后如果要引用，就直接引入该文件就 ok。\n\n最后附上项目的 github 地址\n\nhttps\\://github.com/chengpeiquan/vue-toast\n"
  },
  {
    "slug": "vue-ajax-axios",
    "title": "Vue使用ajax 关于axios遇到乱码等问题的那些坑",
    "desc": "这个情况当时是很懵逼的，因为在PC端，以及使用Chrome的移动端模拟器测试都一切正常，但到了真机上提交数据时，只要包含了中文，post到服务端的结果永远是【銆愭姤鍚嶇粍鍒】，这个至今还是不知道到底是什么鬼。",
    "cover": "https://cdn.chengpeiquan.com/img/2018/09/1-1.jpg?x-oss-process=image/interlace,1",
    "content": "从 jQuery 刚转到 Vue 的时候，对 ajax 的替代方案是选择了 npm 上的 axios，理由也比较简单，两者的 api 相似，调用方式也很接近，过渡可以说是无缝吧，不过在做第一个项目的时候还是踩了个坑，特此记录下来。\n\n先说一下遇到的那些坑：\n\n## 移动端真机 post 乱码\n\n这个情况当时是很懵逼的，因为在 PC 端，以及使用 Chrome 的移动端模拟器测试都一切正常，但到了真机上提交数据时，只要包含了中文，post 到服务端的结果永远是【銆愭姤鍚嶇粍鍒 】，至今还是不知道这个到底是什么鬼。\n\n当时搜索了很多 issue，都是建议在 Content-Type 添加 charset 为 utf-8，但实测没什么用，最后还是老老实实回顾了一下英文的官方文档，发现这么一句话：\n\nAlternatively, you can encode data using the qs library:\n\nqs library？赶紧去查了一下 qs 之后，恍然大悟，于是引入了 qs，完美解决（这一点和当初 jQuery 就不一样，之前压根就没遇到这种情况 emm）。\n\n## 解决方案\n\n最后回顾一下 axios 的使用方法：\n\naxios 官方文档 https\\://www\\.npmjs.com/package/axios\nqs 官方文档  https\\://www\\.npmjs.com/package/qs\n\n目前主要就是上面这些，其他的扩展需求，等以后根据项目实际需要再陆续继续补充记录。\n"
  },
  {
    "slug": "wordpress-rewrite-nginx-lnmp",
    "title": "基于lnmp配置WordPress的Nginx伪静态方法",
    "desc": "Nginx配置rewrite，基于lnmp搭建的话，其实配置起来非常简单，只需要在lnmp上输入几个简单的指令就可以把域名和伪静态类型关联上，重启Nginx后直接生效~",
    "cover": "https://cdn.chengpeiquan.com/img/2018/09/1-2.jpg?x-oss-process=image/interlace,1",
    "content": "搭好博客之后，打算配置伪静态，由于习惯直接搜索引擎，导致折腾了几个小时都没解决，最后去官网转了一下，人家本来就有相关的文档，吃一堑长一智，Mark 下来。\n\n配置其实非常简单，只需要在 lnmp 上输入几个简单的指令就可以把域名和伪静态类型关联上，重启 Nginx 后直接生效，不需要和网上那些教程一样说的，频繁修改这个文件那个文件，还有核对伪静态代码是否正确什么的。\n\n## 配置步骤\n\nWordPress 后台 - 设置 - 固定链接，配置好自己想要的伪静态格式。\n\n打开终端，连接服务器，开始处理服务端的 rewrite 规则配置。\n\n以上就是所有操作步骤，参考文档：\n\n## 官方文档\n\nlnmp 官网配置说明 https\\://lnmp.org/faq/lnmp-vhost-add-howto.html\n"
  },
  {
    "slug": "hello-world",
    "title": "世界，您好！",
    "desc": "这是这次博客的第一篇文章，不是历史以来的第一篇。以前也在这个域名下搭过一次WordPress，但后来写的东西有点杂，而且觉得以前记录的问题已经都不是什么问题了，所以在之前的新浪云到期之后，果断就舍弃了。",
    "cover": "https://cdn.chengpeiquan.com/img/2018/09/1.jpg?x-oss-process=image/interlace,1",
    "content": "这是这次博客的第一篇文章，不是这个博客历史以来的第一篇。\n\n以前也在这个域名下搭过一次 WordPress，但后来写的东西有点杂，而且觉得以前记录的问题已经都不是什么问题了，所以今年年初在之前使用的新浪云到期之后，果断就直接扔了。\n\n现在，大概隔了半年，又心痒痒的想重新搭一次站点记录点什么，主要是因为最近刚好工作环境从万年不变的 jQuery 在逐步迁移到 Vue.js，新技术总会有新的坑点，这个时候不记起来的话，怕以后继续踩坑。\n\n重新购买了服务器，受到之前新浪云经常卡顿和域名没备案需要绕到国外再绕回来的苦，这次果断是买了阿里云的香港服务器，也尝试着从 Windows 系统转移到 Linux(CentOS)上。\n\n本来以为会比较麻烦，出乎意料的发现比 Windows 简单多了，直接下个 lnmp 包，敲几个指令，大概半小时就全部搭起来，一个字，爽！\n\n补个题外话，目前技术博客网站的广告真是太多了，实在无法忍受，选来选去最后还是自己搭，刚好安安静静的可以自己一个人写东西，毕竟主要是写给自己看的。\n\n嗯，第一篇文章，就酱。\n"
  }
]