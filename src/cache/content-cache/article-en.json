[
  {
    "slug": "git-commit-analytics",
    "content": "A tool to analyze your git repository's commit log. It can help you generate daily/weekly or longer work reports.git-commit-analytics## DownloadThis is a client tool, so you need to download the program to use it. See: The Latest Release to download.## Change LogYou can look at the CHANGELOG to understand the content of each update.## UsageCreate and fill in your configuration file, and then run the program to get your work report.## ConfigurationYou need to create a `config.json` at the same folder with the program, and write the content in the following format.```json\n{\n  \"lang\": \"en\",\n  \"authors\": [\"chengpeiquan\"],\n  \"dateRange\": [\"2021-12-01\", \"2022-01-31\"],\n  \"repos\": [\"D:\\\\Git\\\\git-commit-analytics\"],\n  \"format\": {\n    \"git-commit-analytics\": \"Git Commit Analytics\"\n  },\n  \"includes\": [\"feat\", \"fix\", \"docs\", \"style\", \"refactor\", \"test\", \"chore\"],\n  \"excludes\": [\"typo\", \"backup\", \"progress\"]\n}\n```The configuration items are described as follows:|    key    |            type            | description                                                                                                                          |\n| :-------: | :------------------------: | :----------------------------------------------------------------------------------------------------------------------------------- |\n|    lang   |           string           | Set program default language, support `en` (English) and `zh` (Simplified Chinese).                                                  |\n|  authors  |          string\\[]         | Filter the author name of commits, support multiple author names, for you may have different names in different repos.               |\n| dateRange |      \\[string, string]     | Fill in \\[start date, end date], support the legal time format, and count from the start date `00:00:00` to the end date `23:59:59`. |\n|   repos   |          string\\[]         | The Git repo folder on your computer, need to be switched to the branch you want to count.                                           |\n|   format  | { \\[key: string]: string } | Format your folder name as the project name.                                                                                         |\n|  includes |          string\\[]         | The commit message prefix to be included in the statistics.                                                                          |\n|  excludes |          string\\[]         | In the statistical results, exclude commit messages that contain these keywords.                                                     |Among them, `authors` / `includes` / `excludes` will be created as regular expressions to match data.## ReportThe report file will be generated in `markdown` syntax (probably the most common format for developer?) and saved as a file in `.txt` format (probably the most compatible format?).The project name will be classified as the second-level title, and 7 types of commit prefixes will be classified as the third-level title:|   type   |   description   |\n| :------: | :-------------: |\n|   feat   |     Features    |\n|    fix   |    Bug Fixes    |\n|   docs   |  Documentation  |\n|   style  | Optimized Style |\n| refactor |    Refactored   |\n|   test   |    Test Cases   |\n|   chore  |      Chores     |You can click Commit message and Change log writing guide to learn how to standardize the git commit.\n"
  },
  {
    "slug": "vite-plugin-banner",
    "content": "This is my first Vite plugin. Before I start using Vite, I used rollup for a while, I have used rollup-plugin-banner and rollup-plugin-banner2. But I import them into vite.config.ts and found that them doesn't work. So, I try to learn the plugin development of vite, so there is this work, Its features is similar to WebPack bannerPlugin.\n\nIt follows Vite's plugin development specifications, It currently works normally in Vite 2.0, and it can inherit some options of vite.config, e.g. build.outDir.\n\n## Features\n\nAdds a banner to the top of each generated chunk.\n\n## Install\n\nInstall the package from npm (or yarn, or pnpm).\n\n```bash\nnpm install -D vite-plugin-banner\n```\n\n## Options\n\n| Plugin Options Type | Description                     | Example                   |\n| :------------------ | :------------------------------ | :------------------------ |\n| string              | The banner content              | Basic usage               |\n| BannerPluginOptions | See the type declarations below | Optional parameter format |\n\n· Type Declarations:\n\n```ts\n/**\n * Some options from `vite.config.[ts|js]`\n * @tips This options type is supported since `0.2.0`\n */\nexport interface BannerPluginOptions {\n  /**\n   * The comment content of the banner\n   */\n  content: string\n\n  /**\n   * The output directory from the configuration of Vite.js\n   * @default `dist`\n   */\n  outDir?: string\n\n  /**\n   * Whether to print error messages to the console\n   * @tips This option is supported since `0.4.0`\n   * @default `false`\n   */\n  debug?: boolean\n}\n```\n\n## Usage\n\nIn most cases, just use the `String` format as a plugin option.\n\nIn some special cases, such as in VitePress, you might need to use `Object` format to pass in plugin options, see Optional parameter format.\n\n### Basic usage\n\nAdd it to `vite.config.ts`\n\n```ts\n// vite.config.ts\nimport banner from 'vite-plugin-banner'\n// Other dependencies...\n\nexport default defineConfig({\n  plugins: [banner('This is the banner content.')],\n})\n```\n\nWhen you run `npm run build` on your project, In the `dist` folder(Or the build.outDir in `vite.config.ts` you configured), Except for `vendor` files, all `js` and `css` files will add a banner to the top.\n\ne.g. in `app.b3a7772e.js`:\n\n```js\n/* This is the banner content. */\nvar e=Object.assign;import{M as t,d as a,u as r,c......\n```\n\n### Advanced usage\n\nOf course, the most ideal banner is related to your package information.\n\nFirst, You need to update your `package.json` like this, For example, it contains such field content:\n\n```json\n{\n  \"name\": \"chengpeiquan.com\",\n  \"version\": \"0.1.0\",\n  \"description\": \"My personal website, technology stack based on Vue.js 3.0, and Vite 2.0, use Server Side Generation.\",\n  \"author\": \"chengpeiquan\",\n  \"homepage\": \"https://chengpeiquan.com/\"\n}\n```\n\nThen, import the `package.json` into `vite.config.ts`, update the banner like this:\n\n```ts\n// vite.config.ts\nimport pkg from './package.json'\n// Other dependencies...\n\nexport default defineConfig({\n  plugins: [\n    banner(\n      `/**\\n * name: ${pkg.name}\\n * version: v${pkg.version}\\n * description: ${pkg.description}\\n * author: ${pkg.author}\\n * homepage: ${pkg.homepage}\\n */`,\n    ),\n  ],\n})\n```\n\nRun `npm run build`, you can see the banner become more detailed.\n\ne.g. in `app.6936be52.js`:\n\n```js\n/**\n * name: chengpeiquan.com\n * version: v0.1.0\n * description: My personal website, technology stack based on Vue.js 3.0, and Vite 2.0, use Server Side Generation.\n * author: chengpeiquan\n * homepage: https://chengpeiquan.com/\n */\nvar e=Object.assign;import{M as t,d as a,u as r,c......\n```\n\n### Fun usage\n\nIf you want to make some banners that show your personality, you can make some interesting content from some online generators.\n\nSuch as:\n\n* http\\://www\\.network-science.de/ascii/\n\n* https\\://www\\.bootschool.net/ascii\n\n```ts\n// vite.config.ts\nexport default defineConfig({\n  plugins: [\n    banner(`\n    ██   ██         ███████   ██      ██ ████████   ██    ██   ███████   ██     ██\n    ░██  ░██        ██░░░░░██ ░██     ░██░██░░░░░   ░░██  ██   ██░░░░░██ ░██    ░██\n    ░██  ░██       ██     ░░██░██     ░██░██         ░░████   ██     ░░██░██    ░██\n    ░██  ░██      ░██      ░██░░██    ██ ░███████     ░░██   ░██      ░██░██    ░██\n    ░██  ░██      ░██      ░██ ░░██  ██  ░██░░░░       ░██   ░██      ░██░██    ░██\n    ░██  ░██      ░░██     ██   ░░████   ░██           ░██   ░░██     ██ ░██    ░██\n    ░██  ░████████ ░░███████     ░░██    ░████████     ░██    ░░███████  ░░███████ \n    ░░   ░░░░░░░░   ░░░░░░░       ░░     ░░░░░░░░      ░░      ░░░░░░░    ░░░░░░░  \n    `),\n  ],\n})\n```\n\nRun `npm run build`, e.g. in `app.d9a287b8.js`:\n\n```js\n/*\n    ██   ██         ███████   ██      ██ ████████   ██    ██   ███████   ██     ██\n    ░██  ░██        ██░░░░░██ ░██     ░██░██░░░░░   ░░██  ██   ██░░░░░██ ░██    ░██\n    ░██  ░██       ██     ░░██░██     ░██░██         ░░████   ██     ░░██░██    ░██\n    ░██  ░██      ░██      ░██░░██    ██ ░███████     ░░██   ░██      ░██░██    ░██\n    ░██  ░██      ░██      ░██ ░░██  ██  ░██░░░░       ░██   ░██      ░██░██    ░██\n    ░██  ░██      ░░██     ██   ░░████   ░██           ░██   ░░██     ██ ░██    ░██\n    ░██  ░████████ ░░███████     ░░██    ░████████     ░██    ░░███████  ░░███████\n    ░░   ░░░░░░░░   ░░░░░░░       ░░     ░░░░░░░░      ░░      ░░░░░░░    ░░░░░░░\n     */\nvar e=Object.assign;import{M as t,d as a,u as r,c......\n```\n\n### Optional parameter format\n\nI'm not sure what other scenarios besides VitePress need to use this method to pass in options, so I use VitePress as an example, I hope it can give you a reference.\n\n```ts\n// docs/.vitepress/config.ts\nimport { defineConfig } from 'vitepress'\nimport banner from 'vite-plugin-banner'\nimport pkg from '../../package.json'\n\nconst outDir = '../dist'\n\nexport default defineConfig({\n  // Specify the output directory for packaging\n  outDir,\n\n  // Use Vite plugins\n  vite: {\n    plugins: [\n      // Please remember to use the options in Object format here\n      banner({\n        outDir,\n        content: `/**\\n * name: ${pkg.name}\\n * version: v${pkg.version}\\n * description: ${pkg.description}\\n * author: ${pkg.author}\\n * homepage: ${pkg.homepage}\\n */`,\n      }),\n    ],\n  },\n  // ...\n})\n```\n\nWhy do it?\n\nBecause in VitePress, what you get through `viteConfig.build.outDir` is always a `.temp` temporary directory, not the final output directory, so you need to manually specify the output directory to inform the plugin.\n\nOf course, with the updated version of Vitepress, this is not necessarily required, but you can choose to do so when you need it.\n"
  },
  {
    "slug": "vue-cnzz-analytics",
    "content": "Only 3 kB, this plugin base on the CNZZ analytics, it can help you quickly to collect the page views on your website, including single page web application.\n\n> Since the version v2.0.0, it supports the Vue 3.0, and is compatible with the Vue 2.0, you can see the live demo to learn more.<br>If you haven’t started using Vue 3.0, welcome to read the tutorial learning Vue3 .\n\n## Features\n\n* Asynchronously load the CNZZ analytics scripts, no need to modify the entry HTML.\n\n* Support the deployment of multiple site IDs and corresponding data reporting.\n\n* Supports automatic reporting of PV data generated by route switching (This feature need Vue Router, It can support hash mode and history mode).\n\n* Support manual submission of page views reports.\n\n* Support manual submission of event reports.\n\n* Since the version v2.0.0, the plugin can automatically recognize the Vue version at Vue 2.0 or Vue 3.0 .\n\n* Since the version v2.1.0, Hooks API is provided (So the usage of CDN installation is slightly adjusted)\n\n## Project\n\nAs long as Vue and Vue Router are introduced, the projects can be used normally, no matter what method is used to develop your project, e.g. :\n\n* Vue-CLI scaffolding project\n\n* Vite project\n\n* Introduce the HTML page of Vue related CDN\n\n* VuePress project\n\nIt is not limited to SPA single page projects, it can also be used in SSG / SSR projects.\n\n## Preview\n\nBoth live demos have enabled debug mode, and you can open the console to view the report.\n\nVue 2.0 ：vue-cnzz-analytics demo for Vue 2.x\n\nVue 3.0 ：vue-cnzz-analytics demo for Vue 3.x\n\n## Options\n\n|   Option   | Required |    Type   | Description                                                                                              |\n| :--------: | :------: | :-------: | -------------------------------------------------------------------------------------------------------- |\n|   router   |   false  |   object  | Vue Router(It is optional since v2.2.0.)                                                                 |\n| siteIdList |   true   | number\\[] | The site ids for CNZZ analytics, if only one site needs to be reported, just keep one item in the array. |\n|   isDebug  |   false  |  boolean  | if `true`, it will open the debug mode，you can see the log in the console.                               |\n\nTips: Please remember to turn off the debug mode before publish.\n\n## Install\n\nYou can install the plugin from NPM.\n\n```bash\nnpm install vue-cnzz-analytics --save-dev\n```\n\nCan also use the CDN URL in your HTML.\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/vue-cnzz-analytics/dist/vue-cnzz-analytics.min.js\"></script>\n```\n\n## Usage\n\nIf use NPM, you must import the plugin in `main.js` .\n\n```js\nimport cnzzAnalytics from 'vue-cnzz-analytics'\n```\n\nThen, refer to the sample code in Vue 2.0 and Vue 3.0 below to use it.\n\nWhen the route is switched, the new URL address will be reported to CNZZ analytics after the visit.\n\n### Use in the Vue 2.0\n\nSee：main.js - Vue 2.0 demo\n\n> Since the version v2.1.0, if you use CDN in your HTML, must be use `cnzzAnalytics.default` to use the plugin.\n\n```js\nVue.use(cnzzAnalytics, {\n  router: router,\n  siteIdList: [11111, 22222],\n  isDebug: false,\n})\n```\n\n### Use in the Vue 3.0\n\nSee：main.js - Vue 3.0 demo\n\n> Since the version v2.1.0, if you use CDN in your HTML, must be use `cnzzAnalytics.default` to use the plugin.\n\n```js\ncreateApp(app)\n  .use(router)\n  .use(cnzzAnalytics, {\n    router: router,\n    siteIdList: [11111, 22222],\n    isDebug: false,\n  })\n  .mount('#app')\n```\n\n### Use in the VuePress\n\nThe plugin can also be used in VuePress project.\n\nIn the `/docs/.vuepress` folder under the project, create a file named `enhanceApp.js`, and write the following code in this file.\n\nYou can see App Level Enhancements - VuePress to learn more.\n\n```js\nimport cnzzAnalytics from 'vue-cnzz-analytics'\n\nexport default ({ Vue, router }) => {\n  Vue.use(cnzzAnalytics, {\n    router: router,\n    siteIdList: [11111, 22222],\n    isDebug: false,\n  })\n}\n```\n\nYou can turn on the debug mode in the development environment to learn about related reports (remember to turn off debug before going online).\n\n## API\n\nSince the version v2.1.0, you can use the Global API `$pushCNZZ` and the Hooks API `usePush` in your project, they both support the Vue 2.0 and 3.0.\n\n> The APIs can't be used directly, it needs to cooperate with the Methods to operate the specific functions.\n\n### The Global API\n\nIn the Vue 2.0:\n\n```js\n// xxx.vue in Vue 2.0\nexport default {\n  // ...\n  mounted() {\n    this.$pushCNZZ.pv('/example-url/')\n  },\n  // ...\n}\n```\n\nIn the Vue 3.0, you can use the Global Properties:\n\n```js\n// xxx.vue in Vue 3.0\nimport { getCurrentInstance } from 'vue'\n\nexport default {\n  setup() {\n    const app = getCurrentInstance()\n    app.appContext.config.globalProperties.$pushCNZZ.pv('/example-url/')\n  },\n}\n```\n\nYou can also import the proxy component in the current instance to operate:\n\n```js\n// xxx.vue in Vue 3.0\nimport { getCurrentInstance } from 'vue'\n\nexport default {\n  setup() {\n    const { proxy } = getCurrentInstance()\n    proxy.$pushCNZZ.pv('/example-url/')\n  },\n}\n```\n\n### The Hooks API\n\nIn the Vue 2.0:\n\n```js\n// xxx.vue in Vue 2.0\nimport { usePush } from 'vue-cnzz-analytics'\n\nexport default {\n  // ...\n  data() {\n    return {\n      cnzz: usePush(),\n    }\n  },\n  mounted() {\n    this.cnzz.pv('/example-url/')\n  },\n  // ...\n}\n```\n\nIn the Vue 3.0, just use it as if you were using the route `const router = useRouter();`.\n\n```js\n// xxx.vue in Vue 3.0\nimport { usePush } from 'vue-cnzz-analytics'\n\nexport default {\n  setup() {\n    const cnzz = usePush()\n    cnzz.pv('/example-url/')\n  },\n}\n```\n\nIf the name of the hook API has already been declared, you can rename it when import.\n\n```js\nimport { usePush as useCnzz } from 'vue-cnzz-analytics'\nconst cnzz = useCnzz()\n```\n\n## Methods\n\nAll methods are needs to be triggered through the API, and the methods supported by the Global API and the Hooks API are exactly the same.\n\n| Method                             | Description        |\n| :--------------------------------- | :----------------- |\n| Manually report the page views     | Click here to see. |\n| Manually report the event analysis | Click here to see. |\n\n> Since there are still many users of Vue 2.0, the following examples only use the operation method of Vue 2.0 to demonstrate. Vue 3.0 can call specific methods according to the description of the Hooks API.\n\nTips: If multiple site IDs are configured, the data will be reported to all sites at the same time.\n\n### Manually report the page views\n\nIf you switch content rendering on some pages through Tab, but you need to report access data, you can use this method to manually report.\n\n| Method | Description                         |\n| :----: | ----------------------------------- |\n|   pv   | Manually perform PV data reporting. |\n\n**Params**\n\n|  Param  | Required |  Type  | Description                                                                                                                                                                                                    |\n| :-----: | :------: | :----: | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| pageUrl |   false  | string | The URL submitted for the report must be a relative path starting with `/`, if not filled, it will be submitted as the domain name root directory by default.                                                  |\n| fromUrl |   false  | string | The URL of the incoming page must be an absolute address beginning with `http` or `https`, if it is not filled in, the statistics platform will consider the source of the visit to be a direct input address. |\n\n**Example**\n\n```js\nthis.$pushCNZZ.pv('/example-url/', 'https://example.com/example-from-url/')\n```\n\n### Manually report the event analysis\n\nFor example, there is a \"exchange\" function button on your page. If you want to count the clicks of this button, you can perform click analysis by binding the button to report events.\n\n| Method | Description                                     |\n| :----: | ----------------------------------------------- |\n|  event | Manually perform event analysis data reporting. |\n\n**Params**\n\n|   Param  | Required |  Type  | Description                                                                                                                |\n| :------: | :------: | :----: | -------------------------------------------------------------------------------------------------------------------------- |\n| category |   true   | string | The name of the location where the event occurred, e.g. `banner`                                                           |\n|  action  |   true   | string | The description of the behavior that generated the event, e.g. `click`                                                     |\n|   label  |   false  | string | The name of the label that generated the event can be used to record the event sub-id, e.g. `bannerId_123`. (@default: '') |\n|   value  |   false  | number | The score of the event. (@default: 0)                                                                                      |\n|  nodeId  |   false  | string | The id of the element that generated the event. (@default: '')                                                             |\n\n**Example**\n\n```js\nthis.$pushCNZZ.event(\n  this.category,\n  this.action,\n  this.label,\n  this.value,\n  this.nodeId,\n)\n```\n\n## CHANGELOG\n\nSee：releases\n\n## License\n\nMIT License © 2019 chengpeiquan\n"
  },
  {
    "slug": "vue-baidu-analytics",
    "content": "Only 3 kB, this plugin base on the Baidu analytics, it can help you quickly to collect the page views on your website, including single page web application.\n\n> Since the version v2.0.0, it supports the Vue 3.0, and is compatible with the Vue 2.0, you can see the live demo to learn more.<br>If you haven’t started using Vue 3.0, welcome to read the tutorial learning Vue3 .\n\n## Features\n\n* Asynchronously load the Baidu analytics scripts, no need to modify the entry HTML.\n\n* Support the deployment of multiple site IDs and corresponding data reporting.\n\n* Supports automatic reporting of PV data generated by route switching (This feature need Vue Router, It can support hash mode and history mode).\n\n* Support manual submission of page views reports.\n\n* Support manual submission of event reports.\n\n* Since the version v2.0.0, the plugin can automatically recognize the Vue version at Vue 2.0 or Vue 3.0 .\n\n* Since the version v2.1.0, Hooks API is provided (So the usage of CDN installation is slightly adjusted)\n\n## Project\n\nAs long as Vue and Vue Router are introduced, the projects can be used normally, no matter what method is used to develop your project, e.g. :\n\n* Vue-CLI scaffolding project\n\n* Vite project\n\n* Introduce the HTML page of Vue related CDN\n\n* VuePress project\n\nIt is not limited to SPA single page projects, it can also be used in SSG / SSR projects.\n\n## Preview\n\nBoth live demos have enabled debug mode, and you can open the console to view the report.\n\nVue 2.0 ：vue-baidu-analytics demo for Vue 2.x\n\nVue 3.0 ：vue-baidu-analytics demo for Vue 3.x\n\n## Options\n\n|   Option   | Required |    Type   | Description                                                                                               |\n| :--------: | :------: | :-------: | --------------------------------------------------------------------------------------------------------- |\n|   router   |   false  |   object  | Vue Router(It is optional since v2.2.0.)                                                                  |\n| siteIdList |   true   | string\\[] | The site ids for Baidu analytics, if only one site needs to be reported, just keep one item in the array. |\n|   isDebug  |   false  |  boolean  | if `true`, it will open the debug mode，you can see the log in the console.                                |\n\nTips: Please remember to turn off the debug mode before publish.\n\n## Install\n\nYou can install the plugin from NPM.\n\n```bash\nnpm install vue-baidu-analytics --save-dev\n```\n\nCan also use the CDN URL in your HTML.\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/vue-baidu-analytics/dist/vue-baidu-analytics.min.js\"></script>\n```\n\n## Usage\n\nIf use NPM, you must import the plugin in `main.js` .\n\n```js\nimport baiduAnalytics from 'vue-baidu-analytics'\n```\n\nThen, refer to the sample code in Vue 2.0 and Vue 3.0 below to use it.\n\nWhen the route is switched, the new URL address will be reported to Baidu analytics after the visit.\n\n### Use in the Vue 2.0\n\nSee：main.js - Vue 2.0 demo\n\n> Since the version v2.1.0, if you use CDN in your HTML, must be use `baiduAnalytics.default` to use the plugin.\n\n```js\nVue.use(baiduAnalytics, {\n  router: router,\n  siteIdList: ['aaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbb'],\n  isDebug: false,\n})\n```\n\n### Use in the Vue 3.0\n\nSee：main.js - Vue 3.0 demo\n\n> Since the version v2.1.0, if you use CDN in your HTML, must be use `baiduAnalytics.default` to use the plugin.\n\n```js\ncreateApp(app)\n  .use(router)\n  .use(baiduAnalytics, {\n    router: router,\n    siteIdList: ['aaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbb'],\n    isDebug: false,\n  })\n  .mount('#app')\n```\n\n### Use in the VuePress\n\nThe plugin can also be used in VuePress project.\n\nIn the `/docs/.vuepress` folder under the project, create a file named `enhanceApp.js`, and write the following code in this file.\n\nYou can see App Level Enhancements - VuePress to learn more.\n\n```js\nimport baiduAnalytics from 'vue-baidu-analytics'\n\nexport default ({ Vue, router }) => {\n  Vue.use(baiduAnalytics, {\n    router: router,\n    siteIdList: [\n      'aaaaaaaaaaaaaaaaaaa',\n      'bbbbbbbbbbbbbbbbbbb',\n      'ccccccccccccccccccc',\n    ],\n    isDebug: false,\n  })\n}\n```\n\nYou can turn on the debug mode in the development environment to learn about related reports (remember to turn off debug before going online).\n\n## API\n\nSince the version v2.1.0, you can use the Global API `$pushBAIDU` and the Hooks API `usePush` in your project, they both support the Vue 2.0 and 3.0.\n\n> The APIs can't be used directly, it needs to cooperate with the Methods to operate the specific functions.\n\n### The Global API\n\nIn the Vue 2.0:\n\n```js\n// xxx.vue in Vue 2.0\nexport default {\n  // ...\n  mounted() {\n    this.$pushBAIDU.pv('/example-url/')\n  },\n  // ...\n}\n```\n\nIn the Vue 3.0, you can use the Global Properties:\n\n```js\n// xxx.vue in Vue 3.0\nimport { getCurrentInstance } from 'vue'\n\nexport default {\n  setup() {\n    const app = getCurrentInstance()\n    app.appContext.config.globalProperties.$pushBAIDU.pv('/example-url/')\n  },\n}\n```\n\nYou can also import the proxy component in the current instance to operate:\n\n```js\n// xxx.vue in Vue 3.0\nimport { getCurrentInstance } from 'vue'\n\nexport default {\n  setup() {\n    const { proxy } = getCurrentInstance()\n    proxy.$pushBAIDU.pv('/example-url/')\n  },\n}\n```\n\n### The Hooks API\n\nIn the Vue 2.0:\n\n```js\n// xxx.vue in Vue 2.0\nimport { usePush } from 'vue-baidu-analytics'\n\nexport default {\n  // ...\n  data() {\n    return {\n      baidu: usePush(),\n    }\n  },\n  mounted() {\n    this.baidu.pv('/example-url/')\n  },\n  // ...\n}\n```\n\nIn the Vue 3.0, just use it as if you were using the route `const router = useRouter();`.\n\n```js\n// xxx.vue in Vue 3.0\nimport { usePush } from 'vue-baidu-analytics'\n\nexport default {\n  setup() {\n    const baidu = usePush()\n    baidu.pv('/example-url/')\n  },\n}\n```\n\nIf the name of the hook API has already been declared, you can rename it when import.\n\n```js\nimport { usePush as useBaidu } from 'vue-baidu-analytics'\nconst baidu = useBaidu()\n```\n\n## Methods\n\nAll methods are needs to be triggered through the API, and the methods supported by the Global API and the Hooks API are exactly the same.\n\n| Method                             | Description        |\n| :--------------------------------- | :----------------- |\n| Manually report the page views     | Click here to see. |\n| Manually report the event analysis | Click here to see. |\n\n> Since there are still many users of Vue 2.0, the following examples only use the operation method of Vue 2.0 to demonstrate. Vue 3.0 can call specific methods according to the description of the Hooks API.\n\nTips: If multiple site IDs are configured, the data will be reported to all sites at the same time.\n\n### Manually report the page views\n\nIf you switch content rendering on some pages through Tab, but you need to report access data, you can use this method to manually report.\n\n| Method | Description                         |\n| :----: | ----------------------------------- |\n|   pv   | Manually perform PV data reporting. |\n\n**Params**\n\n|  Param  | Required |  Type  | Description                                                                                                                                                   |\n| :-----: | :------: | :----: | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| pageUrl |   false  | string | The URL submitted for the report must be a relative path starting with `/`, if not filled, it will be submitted as the domain name root directory by default. |\n\n**Example**\n\n```js\nthis.$pushBAIDU.pv('/example-url/')\n```\n\n### Manually report the event analysis\n\nFor example, there is a \"exchange\" function button on your page. If you want to count the clicks of this button, you can perform click analysis by binding the button to report events.\n\n| Method | Description                                     |\n| :----: | ----------------------------------------------- |\n|  event | Manually perform event analysis data reporting. |\n\n**Params**\n\n|   Param  | Required |  Type  | Description                                                                                                                |\n| :------: | :------: | :----: | -------------------------------------------------------------------------------------------------------------------------- |\n| category |   true   | string | The name of the location where the event occurred, e.g. `banner`                                                           |\n|  action  |   true   | string | The description of the behavior that generated the event, e.g. `click`                                                     |\n|   label  |   false  | string | The name of the label that generated the event can be used to record the event sub-id, e.g. `bannerId_123`. (@default: '') |\n|   value  |   false  | number | The score of the event. (@default: 0)                                                                                      |\n\n**Example**\n\n```js\nthis.$pushBAIDU.event(this.category, this.action, this.label, this.value)\n```\n\n## CHANGELOG\n\nSee：releases\n\n## License\n\nMIT License © 2019 chengpeiquan\n"
  }
]